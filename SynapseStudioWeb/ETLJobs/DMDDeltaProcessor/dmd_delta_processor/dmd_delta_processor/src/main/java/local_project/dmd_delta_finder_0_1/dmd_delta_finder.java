// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.dmd_delta_finder_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: dmd_delta_finder Purpose: dmd_delta_finder<br>
 * Description: dmd_delta_finder <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class dmd_delta_finder implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dmd_stg_current_processs_id != null){
				
					this.setProperty("dmd_stg_current_processs_id", dmd_stg_current_processs_id.toString());
				
			}
			
			if(dmd_db_additionalparams != null){
				
					this.setProperty("dmd_db_additionalparams", dmd_db_additionalparams.toString());
				
			}
			
			if(dmd_db_host != null){
				
					this.setProperty("dmd_db_host", dmd_db_host.toString());
				
			}
			
			if(dmd_db_name != null){
				
					this.setProperty("dmd_db_name", dmd_db_name.toString());
				
			}
			
			if(dmd_db_password != null){
				
					this.setProperty("dmd_db_password", dmd_db_password.toString());
				
			}
			
			if(dmd_db_port != null){
				
					this.setProperty("dmd_db_port", dmd_db_port.toString());
				
			}
			
			if(dmd_db_psql_path != null){
				
					this.setProperty("dmd_db_psql_path", dmd_db_psql_path.toString());
				
			}
			
			if(dmd_db_pwd_string != null){
				
					this.setProperty("dmd_db_pwd_string", dmd_db_pwd_string.toString());
				
			}
			
			if(dmd_db_schema != null){
				
					this.setProperty("dmd_db_schema", dmd_db_schema.toString());
				
			}
			
			if(dmd_db_script_path != null){
				
					this.setProperty("dmd_db_script_path", dmd_db_script_path.toString());
				
			}
			
			if(dmd_db_stg_additionalparams != null){
				
					this.setProperty("dmd_db_stg_additionalparams", dmd_db_stg_additionalparams.toString());
				
			}
			
			if(dmd_db_stg_host != null){
				
					this.setProperty("dmd_db_stg_host", dmd_db_stg_host.toString());
				
			}
			
			if(dmd_db_stg_name != null){
				
					this.setProperty("dmd_db_stg_name", dmd_db_stg_name.toString());
				
			}
			
			if(dmd_db_stg_password != null){
				
					this.setProperty("dmd_db_stg_password", dmd_db_stg_password.toString());
				
			}
			
			if(dmd_db_stg_port != null){
				
					this.setProperty("dmd_db_stg_port", dmd_db_stg_port.toString());
				
			}
			
			if(dmd_db_stg_pwd_string != null){
				
					this.setProperty("dmd_db_stg_pwd_string", dmd_db_stg_pwd_string.toString());
				
			}
			
			if(dmd_db_stg_schema != null){
				
					this.setProperty("dmd_db_stg_schema", dmd_db_stg_schema.toString());
				
			}
			
			if(dmd_db_stg_user != null){
				
					this.setProperty("dmd_db_stg_user", dmd_db_stg_user.toString());
				
			}
			
			if(dmd_db_user != null){
				
					this.setProperty("dmd_db_user", dmd_db_user.toString());
				
			}
			
			if(dmd_file_path != null){
				
					this.setProperty("dmd_file_path", dmd_file_path.toString());
				
			}
			
			if(dmd_version != null){
				
					this.setProperty("dmd_version", dmd_version.toString());
				
			}
			
		}

public String dmd_stg_current_processs_id;
public String getDmd_stg_current_processs_id(){
	return this.dmd_stg_current_processs_id;
}
public String dmd_db_additionalparams;
public String getDmd_db_additionalparams(){
	return this.dmd_db_additionalparams;
}
public String dmd_db_host;
public String getDmd_db_host(){
	return this.dmd_db_host;
}
public String dmd_db_name;
public String getDmd_db_name(){
	return this.dmd_db_name;
}
public java.lang.String dmd_db_password;
public java.lang.String getDmd_db_password(){
	return this.dmd_db_password;
}
public Integer dmd_db_port;
public Integer getDmd_db_port(){
	return this.dmd_db_port;
}
public String dmd_db_psql_path;
public String getDmd_db_psql_path(){
	return this.dmd_db_psql_path;
}
public String dmd_db_pwd_string;
public String getDmd_db_pwd_string(){
	return this.dmd_db_pwd_string;
}
public String dmd_db_schema;
public String getDmd_db_schema(){
	return this.dmd_db_schema;
}
public String dmd_db_script_path;
public String getDmd_db_script_path(){
	return this.dmd_db_script_path;
}
public String dmd_db_stg_additionalparams;
public String getDmd_db_stg_additionalparams(){
	return this.dmd_db_stg_additionalparams;
}
public String dmd_db_stg_host;
public String getDmd_db_stg_host(){
	return this.dmd_db_stg_host;
}
public String dmd_db_stg_name;
public String getDmd_db_stg_name(){
	return this.dmd_db_stg_name;
}
public java.lang.String dmd_db_stg_password;
public java.lang.String getDmd_db_stg_password(){
	return this.dmd_db_stg_password;
}
public Integer dmd_db_stg_port;
public Integer getDmd_db_stg_port(){
	return this.dmd_db_stg_port;
}
public String dmd_db_stg_pwd_string;
public String getDmd_db_stg_pwd_string(){
	return this.dmd_db_stg_pwd_string;
}
public String dmd_db_stg_schema;
public String getDmd_db_stg_schema(){
	return this.dmd_db_stg_schema;
}
public String dmd_db_stg_user;
public String getDmd_db_stg_user(){
	return this.dmd_db_stg_user;
}
public String dmd_db_user;
public String getDmd_db_user(){
	return this.dmd_db_user;
}
public String dmd_file_path;
public String getDmd_file_path(){
	return this.dmd_file_path;
}
public String dmd_version;
public String getDmd_version(){
	return this.dmd_version;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dmd_delta_finder";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("_UhLp0D-vEeuPubMxNiErVQ", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils("_UhLp0D-vEeuPubMxNiErVQ", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dmd_delta_finder.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dmd_delta_finder.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row48_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row51_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row55_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row58_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row62_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendStats_STATS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendMeter_METTER_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_36_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendMeter_METTER_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_insert_rowStruct implements routines.system.IPersistableRow<amp_insert_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_insert_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
amp_insert_rowStruct amp_insert_row = new amp_insert_rowStruct();
row14Struct row14 = new row14Struct();






	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_insert_row");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.dmd_db_schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_2 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_2 = context.dmd_db_password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\",\"dmd_version\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_insert_rowStruct amp_insert_row_tmp = new amp_insert_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_2 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"desc\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nmdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nm_prev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"suppcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_auth_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authchangecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authchangedt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"combprodcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"flavourcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"ema\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"parallel_import\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"avail_restrictcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\"";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.apid = null;
							} else {
	                         		
        	row1.apid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.invalid = null;
							} else {
		                          
            row1.invalid = rs_tDBInput_2.getShort(2);
            if(rs_tDBInput_2.wasNull()){
                    row1.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.vpid = null;
							} else {
	                         		
        	row1.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.nm = null;
							} else {
	                         		
        	row1.nm = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.abbrevnm = null;
							} else {
	                         		
        	row1.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.desc = null;
							} else {
	                         		
        	row1.desc = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.nmdt = null;
							} else {
										
			row1.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 7);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.nm_prev = null;
							} else {
	                         		
        	row1.nm_prev = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.suppcd = null;
							} else {
	                         		
        	row1.suppcd = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.lic_authcd = null;
							} else {
		                          
            row1.lic_authcd = rs_tDBInput_2.getLong(10);
            if(rs_tDBInput_2.wasNull()){
                    row1.lic_authcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.lic_auth_prevcd = null;
							} else {
		                          
            row1.lic_auth_prevcd = rs_tDBInput_2.getLong(11);
            if(rs_tDBInput_2.wasNull()){
                    row1.lic_auth_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row1.lic_authchangecd = null;
							} else {
		                          
            row1.lic_authchangecd = rs_tDBInput_2.getLong(12);
            if(rs_tDBInput_2.wasNull()){
                    row1.lic_authchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row1.lic_authchangedt = null;
							} else {
										
			row1.lic_authchangedt = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 13);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row1.combprodcd = null;
							} else {
		                          
            row1.combprodcd = rs_tDBInput_2.getLong(14);
            if(rs_tDBInput_2.wasNull()){
                    row1.combprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row1.flavourcd = null;
							} else {
		                          
            row1.flavourcd = rs_tDBInput_2.getLong(15);
            if(rs_tDBInput_2.wasNull()){
                    row1.flavourcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row1.ema = null;
							} else {
		                          
            row1.ema = rs_tDBInput_2.getInt(16);
            if(rs_tDBInput_2.wasNull()){
                    row1.ema = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row1.parallel_import = null;
							} else {
		                          
            row1.parallel_import = rs_tDBInput_2.getInt(17);
            if(rs_tDBInput_2.wasNull()){
                    row1.parallel_import = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row1.avail_restrictcd = null;
							} else {
		                          
            row1.avail_restrictcd = rs_tDBInput_2.getLong(18);
            if(rs_tDBInput_2.wasNull()){
                    row1.avail_restrictcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row1.col_val_hash = null;
							} else {
		                          
            row1.col_val_hash = rs_tDBInput_2.getObject(19);
            if(rs_tDBInput_2.wasNull()){
                    row1.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.apid = row1.apid ;
                        		    		
                        		    		    row2HashKey.col_val_hash = row1.col_val_hash ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.apid = '" + row2HashKey.apid + "', row2.col_val_hash = '" + row2HashKey.col_val_hash + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

amp_insert_row = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'amp_insert_row'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
amp_insert_row_tmp.dmd_id = row1.apid ;
amp_insert_row_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
amp_insert_row_tmp.dmd_entity_name = "dmd_amp";
amp_insert_row_tmp.row_action = "i";
amp_insert_row_tmp.dmd_version = context.dmd_version;
amp_insert_row = amp_insert_row_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "amp_insert_row"
if(amp_insert_row != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_insert_row");
					}
					



            row14 = null;
        whetherReject_tDBOutput_2 = false;
                    if(amp_insert_row.dmd_id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, amp_insert_row.dmd_id);
}

                    if(amp_insert_row.sync_process_id == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, amp_insert_row.sync_process_id);
}

                    if(amp_insert_row.dmd_entity_name == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, amp_insert_row.dmd_entity_name);
}

                    if(amp_insert_row.row_action == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, amp_insert_row.row_action);
}

                    if(amp_insert_row.dmd_version == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, amp_insert_row.dmd_version);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
                            row14 = new row14Struct();
                                row14.dmd_id = amp_insert_row.dmd_id;
                                row14.sync_process_id = amp_insert_row.sync_process_id;
                                row14.dmd_entity_name = amp_insert_row.dmd_entity_name;
                                row14.row_action = amp_insert_row.row_action;
                                row14.dmd_version = amp_insert_row.dmd_version;
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row14.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row14.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row14.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row14.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row14.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row14.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row14.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row14.row_action)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row14.dmd_version != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row14.dmd_version)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "amp_insert_row"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_insert_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.apid = this.apid;
	            other.invalid = this.invalid;
	            other.vpid = this.vpid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.desc = this.desc;
	            other.nmdt = this.nmdt;
	            other.nm_prev = this.nm_prev;
	            other.suppcd = this.suppcd;
	            other.lic_authcd = this.lic_authcd;
	            other.lic_auth_prevcd = this.lic_auth_prevcd;
	            other.lic_authchangecd = this.lic_authchangecd;
	            other.lic_authchangedt = this.lic_authchangedt;
	            other.combprodcd = this.combprodcd;
	            other.flavourcd = this.flavourcd;
	            other.ema = this.ema;
	            other.parallel_import = this.parallel_import;
	            other.avail_restrictcd = this.avail_restrictcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.apid = this.apid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.vpid = readString(dis,ois);
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
						this.desc = readString(dis,ois);
					
						this.nmdt = readDate(dis,ois);
					
						this.nm_prev = readString(dis,ois);
					
						this.suppcd = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
						this.lic_authchangedt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis,ois);
					
						this.parallel_import = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.vpid, dos, oos);
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						writeString(this.desc, dos, oos);
					
						writeDate(this.nmdt, dos, oos);
					
						writeString(this.nm_prev, dos, oos);
					
						writeString(this.suppcd, dos, oos);
					
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
						writeDate(this.lic_authchangedt, dos, oos);
					
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					writeInteger(this.ema, dos, oos);
					
					writeInteger(this.parallel_import, dos, oos);
					
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(amp_insert_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_1 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"apid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"invalid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"nm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"abbrevnm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"desc\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"nmdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"nm_prev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"suppcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_authcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_auth_prevcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_authchangecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_authchangedt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"combprodcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"flavourcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"ema\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"parallel_import\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"avail_restrictcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\"";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.apid = null;
							} else {
	                         		
        	row2.apid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.invalid = null;
							} else {
		                          
            row2.invalid = rs_tDBInput_1.getShort(2);
            if(rs_tDBInput_1.wasNull()){
                    row2.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.vpid = null;
							} else {
	                         		
        	row2.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.nm = null;
							} else {
	                         		
        	row2.nm = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.abbrevnm = null;
							} else {
	                         		
        	row2.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row2.desc = null;
							} else {
	                         		
        	row2.desc = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row2.nmdt = null;
							} else {
										
			row2.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 7);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row2.nm_prev = null;
							} else {
	                         		
        	row2.nm_prev = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row2.suppcd = null;
							} else {
	                         		
        	row2.suppcd = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row2.lic_authcd = null;
							} else {
		                          
            row2.lic_authcd = rs_tDBInput_1.getLong(10);
            if(rs_tDBInput_1.wasNull()){
                    row2.lic_authcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row2.lic_auth_prevcd = null;
							} else {
		                          
            row2.lic_auth_prevcd = rs_tDBInput_1.getLong(11);
            if(rs_tDBInput_1.wasNull()){
                    row2.lic_auth_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row2.lic_authchangecd = null;
							} else {
		                          
            row2.lic_authchangecd = rs_tDBInput_1.getLong(12);
            if(rs_tDBInput_1.wasNull()){
                    row2.lic_authchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row2.lic_authchangedt = null;
							} else {
										
			row2.lic_authchangedt = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 13);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row2.combprodcd = null;
							} else {
		                          
            row2.combprodcd = rs_tDBInput_1.getLong(14);
            if(rs_tDBInput_1.wasNull()){
                    row2.combprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row2.flavourcd = null;
							} else {
		                          
            row2.flavourcd = rs_tDBInput_1.getLong(15);
            if(rs_tDBInput_1.wasNull()){
                    row2.flavourcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row2.ema = null;
							} else {
		                          
            row2.ema = rs_tDBInput_1.getInt(16);
            if(rs_tDBInput_1.wasNull()){
                    row2.ema = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row2.parallel_import = null;
							} else {
		                          
            row2.parallel_import = rs_tDBInput_1.getInt(17);
            if(rs_tDBInput_1.wasNull()){
                    row2.parallel_import = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row2.avail_restrictcd = null;
							} else {
		                          
            row2.avail_restrictcd = rs_tDBInput_1.getLong(18);
            if(rs_tDBInput_1.wasNull()){
                    row2.avail_restrictcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row2.col_val_hash = null;
							} else {
		                          
            row2.col_val_hash = rs_tDBInput_1.getObject(19);
            if(rs_tDBInput_1.wasNull()){
                    row2.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.apid = row2.apid;
				
				row2_HashRow.invalid = row2.invalid;
				
				row2_HashRow.vpid = row2.vpid;
				
				row2_HashRow.nm = row2.nm;
				
				row2_HashRow.abbrevnm = row2.abbrevnm;
				
				row2_HashRow.desc = row2.desc;
				
				row2_HashRow.nmdt = row2.nmdt;
				
				row2_HashRow.nm_prev = row2.nm_prev;
				
				row2_HashRow.suppcd = row2.suppcd;
				
				row2_HashRow.lic_authcd = row2.lic_authcd;
				
				row2_HashRow.lic_auth_prevcd = row2.lic_auth_prevcd;
				
				row2_HashRow.lic_authchangecd = row2.lic_authchangecd;
				
				row2_HashRow.lic_authchangedt = row2.lic_authchangedt;
				
				row2_HashRow.combprodcd = row2.combprodcd;
				
				row2_HashRow.flavourcd = row2.flavourcd;
				
				row2_HashRow.ema = row2.ema;
				
				row2_HashRow.parallel_import = row2.parallel_import;
				
				row2_HashRow.avail_restrictcd = row2.avail_restrictcd;
				
				row2_HashRow.col_val_hash = row2.col_val_hash;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_insert_rowStruct implements routines.system.IPersistableRow<vmp_insert_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_insert_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		row3Struct row3 = new row3Struct();
vmp_insert_rowStruct vmp_insert_row = new vmp_insert_rowStruct();
row17Struct row17 = new row17Struct();






	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_insert_row");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.dmd_db_schema;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_6 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_6 = context.dmd_db_password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_insert_rowStruct vmp_insert_row_tmp = new vmp_insert_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_4 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vtmid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"basiscd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"basis_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmchangecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"comprodcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"pres_statcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"sug_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"glu_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"pres_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"cfc_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"non_availcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"non_availdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"df_indcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"udfs\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"udfs_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"unit_dose_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row3.vpid = null;
							} else {
	                         		
        	row3.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row3.vpiddt = null;
							} else {
										
			row3.vpiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row3.vpidprev = null;
							} else {
	                         		
        	row3.vpidprev = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row3.vtmid = null;
							} else {
	                         		
        	row3.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row3.invalid = null;
							} else {
		                          
            row3.invalid = rs_tDBInput_4.getShort(5);
            if(rs_tDBInput_4.wasNull()){
                    row3.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row3.nm = null;
							} else {
	                         		
        	row3.nm = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row3.abbrevnm = null;
							} else {
	                         		
        	row3.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row3.basiscd = null;
							} else {
		                          
            row3.basiscd = rs_tDBInput_4.getLong(8);
            if(rs_tDBInput_4.wasNull()){
                    row3.basiscd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row3.nmdt = null;
							} else {
										
			row3.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 9);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row3.nmprev = null;
							} else {
	                         		
        	row3.nmprev = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row3.basis_prevcd = null;
							} else {
		                          
            row3.basis_prevcd = rs_tDBInput_4.getLong(11);
            if(rs_tDBInput_4.wasNull()){
                    row3.basis_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row3.nmchangecd = null;
							} else {
		                          
            row3.nmchangecd = rs_tDBInput_4.getLong(12);
            if(rs_tDBInput_4.wasNull()){
                    row3.nmchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row3.comprodcd = null;
							} else {
		                          
            row3.comprodcd = rs_tDBInput_4.getLong(13);
            if(rs_tDBInput_4.wasNull()){
                    row3.comprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row3.pres_statcd = null;
							} else {
		                          
            row3.pres_statcd = rs_tDBInput_4.getLong(14);
            if(rs_tDBInput_4.wasNull()){
                    row3.pres_statcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row3.sug_f = null;
							} else {
		                          
            row3.sug_f = rs_tDBInput_4.getInt(15);
            if(rs_tDBInput_4.wasNull()){
                    row3.sug_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row3.glu_f = null;
							} else {
		                          
            row3.glu_f = rs_tDBInput_4.getInt(16);
            if(rs_tDBInput_4.wasNull()){
                    row3.glu_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row3.pres_f = null;
							} else {
		                          
            row3.pres_f = rs_tDBInput_4.getInt(17);
            if(rs_tDBInput_4.wasNull()){
                    row3.pres_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row3.cfc_f = null;
							} else {
		                          
            row3.cfc_f = rs_tDBInput_4.getInt(18);
            if(rs_tDBInput_4.wasNull()){
                    row3.cfc_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row3.non_availcd = null;
							} else {
		                          
            row3.non_availcd = rs_tDBInput_4.getInt(19);
            if(rs_tDBInput_4.wasNull()){
                    row3.non_availcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row3.non_availdt = null;
							} else {
										
			row3.non_availdt = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 20);
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row3.df_indcd = null;
							} else {
		                          
            row3.df_indcd = rs_tDBInput_4.getLong(21);
            if(rs_tDBInput_4.wasNull()){
                    row3.df_indcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row3.udfs = null;
							} else {
		                          
            row3.udfs = rs_tDBInput_4.getBigDecimal(22);
            if(rs_tDBInput_4.wasNull()){
                    row3.udfs = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row3.udfs_uomcd = null;
							} else {
	                         		
        	row3.udfs_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_4, 23, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row3.unit_dose_uomcd = null;
							} else {
	                         		
        	row3.unit_dose_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row3.col_val_hash = null;
							} else {
		                          
            row3.col_val_hash = rs_tDBInput_4.getObject(25);
            if(rs_tDBInput_4.wasNull()){
                    row3.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row4HashKey.vpid = row3.vpid ;
                        		    		
                        		    		    row4HashKey.col_val_hash = row3.col_val_hash ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.vpid = '" + row4HashKey.vpid + "', row4.col_val_hash = '" + row4HashKey.col_val_hash + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

vmp_insert_row = null;

if(!rejectedInnerJoin_tMap_2 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vmp_insert_row'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
vmp_insert_row_tmp.dmd_id = row3.vpid;
vmp_insert_row_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vmp_insert_row_tmp.dmd_entity_name = "dmd_vmp";
vmp_insert_row_tmp.row_action = "i";
vmp_insert_row = vmp_insert_row_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "vmp_insert_row"
if(vmp_insert_row != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_insert_row");
					}
					



            row17 = null;
        whetherReject_tDBOutput_6 = false;
                    if(vmp_insert_row.dmd_id == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, vmp_insert_row.dmd_id);
}

                    if(vmp_insert_row.sync_process_id == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, vmp_insert_row.sync_process_id);
}

                    if(vmp_insert_row.dmd_entity_name == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, vmp_insert_row.dmd_entity_name);
}

                    if(vmp_insert_row.row_action == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(4, vmp_insert_row.row_action);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
            if(!whetherReject_tDBOutput_6) {
                            row17 = new row17Struct();
                                row17.dmd_id = vmp_insert_row.dmd_id;
                                row17.sync_process_id = vmp_insert_row.sync_process_id;
                                row17.dmd_entity_name = vmp_insert_row.dmd_entity_name;
                                row17.row_action = vmp_insert_row.row_action;
            }
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                if ((batchSize_tDBOutput_6 > 0) && (batchSizeCounter_tDBOutput_6 > 0)) {
                try {
                		int countSum_tDBOutput_6 = 0;
                		    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
            	    	
            	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
                batchSizeCounter_tDBOutput_6 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_6){
			    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
			    	String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					}else{
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}
			    	
			    	int countSum_tDBOutput_6 = 0;
					for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					
			    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
			    	
			    	System.err.println(errormessage_tDBOutput_6);
			    	
				}
            }
                	conn_tDBOutput_6.commit();
                	
                	commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row17.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row17.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row17.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row17.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row17.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row17.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row17.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row17.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "vmp_insert_row"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			
	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			
			conn_tDBOutput_6.commit();
			
		
    	conn_tDBOutput_6 .close();
    	
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_insert_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.vpid = this.vpid;
	            other.vpiddt = this.vpiddt;
	            other.vpidprev = this.vpidprev;
	            other.vtmid = this.vtmid;
	            other.invalid = this.invalid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.basiscd = this.basiscd;
	            other.nmdt = this.nmdt;
	            other.nmprev = this.nmprev;
	            other.basis_prevcd = this.basis_prevcd;
	            other.nmchangecd = this.nmchangecd;
	            other.comprodcd = this.comprodcd;
	            other.pres_statcd = this.pres_statcd;
	            other.sug_f = this.sug_f;
	            other.glu_f = this.glu_f;
	            other.pres_f = this.pres_f;
	            other.cfc_f = this.cfc_f;
	            other.non_availcd = this.non_availcd;
	            other.non_availdt = this.non_availdt;
	            other.df_indcd = this.df_indcd;
	            other.udfs = this.udfs;
	            other.udfs_uomcd = this.udfs_uomcd;
	            other.unit_dose_uomcd = this.unit_dose_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.vpiddt = readDate(dis,ois);
					
						this.vpidprev = readString(dis,ois);
					
						this.vtmid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
						this.nmdt = readDate(dis,ois);
					
						this.nmprev = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis,ois);
					
						this.glu_f = readInteger(dis,ois);
					
						this.pres_f = readInteger(dis,ois);
					
						this.cfc_f = readInteger(dis,ois);
					
						this.non_availcd = readInteger(dis,ois);
					
						this.non_availdt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
       			    	this.udfs = (BigDecimal) ois.readObject();
					
						this.udfs_uomcd = readString(dis,ois);
					
						this.unit_dose_uomcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.vpiddt, dos, oos);
					
						writeString(this.vpidprev, dos, oos);
					
						writeString(this.vtmid, dos, oos);
					
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
						writeDate(this.nmdt, dos, oos);
					
						writeString(this.nmprev, dos, oos);
					
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					writeInteger(this.sug_f, dos, oos);
					
					writeInteger(this.glu_f, dos, oos);
					
					writeInteger(this.pres_f, dos, oos);
					
					writeInteger(this.cfc_f, dos, oos);
					
					writeInteger(this.non_availcd, dos, oos);
					
						writeDate(this.non_availdt, dos, oos);
					
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
       			    	oos.writeObject(this.udfs);
					
						writeString(this.udfs_uomcd, dos, oos);
					
						writeString(this.unit_dose_uomcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(row3,row4) outputs:(vmp_insert_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_3 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vpiddt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vpidprev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vtmid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"invalid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"abbrevnm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"basiscd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nmdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nmprev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"basis_prevcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nmchangecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"comprodcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"pres_statcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"sug_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"glu_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"pres_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"cfc_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"non_availcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"non_availdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"df_indcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"udfs\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"udfs_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"unit_dose_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\"";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row4.vpid = null;
							} else {
	                         		
        	row4.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row4.vpiddt = null;
							} else {
										
			row4.vpiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 2);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row4.vpidprev = null;
							} else {
	                         		
        	row4.vpidprev = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row4.vtmid = null;
							} else {
	                         		
        	row4.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row4.invalid = null;
							} else {
		                          
            row4.invalid = rs_tDBInput_3.getShort(5);
            if(rs_tDBInput_3.wasNull()){
                    row4.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row4.nm = null;
							} else {
	                         		
        	row4.nm = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row4.abbrevnm = null;
							} else {
	                         		
        	row4.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row4.basiscd = null;
							} else {
		                          
            row4.basiscd = rs_tDBInput_3.getLong(8);
            if(rs_tDBInput_3.wasNull()){
                    row4.basiscd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row4.nmdt = null;
							} else {
										
			row4.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 9);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row4.nmprev = null;
							} else {
	                         		
        	row4.nmprev = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row4.basis_prevcd = null;
							} else {
		                          
            row4.basis_prevcd = rs_tDBInput_3.getLong(11);
            if(rs_tDBInput_3.wasNull()){
                    row4.basis_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row4.nmchangecd = null;
							} else {
		                          
            row4.nmchangecd = rs_tDBInput_3.getLong(12);
            if(rs_tDBInput_3.wasNull()){
                    row4.nmchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row4.comprodcd = null;
							} else {
		                          
            row4.comprodcd = rs_tDBInput_3.getLong(13);
            if(rs_tDBInput_3.wasNull()){
                    row4.comprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row4.pres_statcd = null;
							} else {
		                          
            row4.pres_statcd = rs_tDBInput_3.getLong(14);
            if(rs_tDBInput_3.wasNull()){
                    row4.pres_statcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row4.sug_f = null;
							} else {
		                          
            row4.sug_f = rs_tDBInput_3.getInt(15);
            if(rs_tDBInput_3.wasNull()){
                    row4.sug_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row4.glu_f = null;
							} else {
		                          
            row4.glu_f = rs_tDBInput_3.getInt(16);
            if(rs_tDBInput_3.wasNull()){
                    row4.glu_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row4.pres_f = null;
							} else {
		                          
            row4.pres_f = rs_tDBInput_3.getInt(17);
            if(rs_tDBInput_3.wasNull()){
                    row4.pres_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row4.cfc_f = null;
							} else {
		                          
            row4.cfc_f = rs_tDBInput_3.getInt(18);
            if(rs_tDBInput_3.wasNull()){
                    row4.cfc_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row4.non_availcd = null;
							} else {
		                          
            row4.non_availcd = rs_tDBInput_3.getInt(19);
            if(rs_tDBInput_3.wasNull()){
                    row4.non_availcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row4.non_availdt = null;
							} else {
										
			row4.non_availdt = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 20);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row4.df_indcd = null;
							} else {
		                          
            row4.df_indcd = rs_tDBInput_3.getLong(21);
            if(rs_tDBInput_3.wasNull()){
                    row4.df_indcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row4.udfs = null;
							} else {
		                          
            row4.udfs = rs_tDBInput_3.getBigDecimal(22);
            if(rs_tDBInput_3.wasNull()){
                    row4.udfs = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row4.udfs_uomcd = null;
							} else {
	                         		
        	row4.udfs_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row4.unit_dose_uomcd = null;
							} else {
	                         		
        	row4.unit_dose_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row4.col_val_hash = null;
							} else {
		                          
            row4.col_val_hash = rs_tDBInput_3.getObject(25);
            if(rs_tDBInput_3.wasNull()){
                    row4.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.vpid = row4.vpid;
				
				row4_HashRow.vpiddt = row4.vpiddt;
				
				row4_HashRow.vpidprev = row4.vpidprev;
				
				row4_HashRow.vtmid = row4.vtmid;
				
				row4_HashRow.invalid = row4.invalid;
				
				row4_HashRow.nm = row4.nm;
				
				row4_HashRow.abbrevnm = row4.abbrevnm;
				
				row4_HashRow.basiscd = row4.basiscd;
				
				row4_HashRow.nmdt = row4.nmdt;
				
				row4_HashRow.nmprev = row4.nmprev;
				
				row4_HashRow.basis_prevcd = row4.basis_prevcd;
				
				row4_HashRow.nmchangecd = row4.nmchangecd;
				
				row4_HashRow.comprodcd = row4.comprodcd;
				
				row4_HashRow.pres_statcd = row4.pres_statcd;
				
				row4_HashRow.sug_f = row4.sug_f;
				
				row4_HashRow.glu_f = row4.glu_f;
				
				row4_HashRow.pres_f = row4.pres_f;
				
				row4_HashRow.cfc_f = row4.cfc_f;
				
				row4_HashRow.non_availcd = row4.non_availcd;
				
				row4_HashRow.non_availdt = row4.non_availdt;
				
				row4_HashRow.df_indcd = row4.df_indcd;
				
				row4_HashRow.udfs = row4.udfs;
				
				row4_HashRow.udfs_uomcd = row4.udfs_uomcd;
				
				row4_HashRow.unit_dose_uomcd = row4.unit_dose_uomcd;
				
				row4_HashRow.col_val_hash = row4.col_val_hash;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_del_rowStruct implements routines.system.IPersistableRow<amp_del_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_del_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_6Process(globalMap);

		row5Struct row5 = new row5Struct();
amp_del_rowStruct amp_del_row = new amp_del_rowStruct();
row16Struct row16 = new row16Struct();






	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_del_row");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.dmd_db_schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_4 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_4 = context.dmd_db_password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_del_rowStruct amp_del_row_tmp = new amp_del_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_5 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"apid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"invalid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"nm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"abbrevnm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"desc\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"nmdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"nm_prev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"suppcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_authcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_auth_prevcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_authchangecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"lic_authchangedt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"combprodcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"flavourcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"ema\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"parallel_import\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"avail_restrictcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp\"";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.apid = null;
							} else {
	                         		
        	row5.apid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.invalid = null;
							} else {
		                          
            row5.invalid = rs_tDBInput_5.getShort(2);
            if(rs_tDBInput_5.wasNull()){
                    row5.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.vpid = null;
							} else {
	                         		
        	row5.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row5.nm = null;
							} else {
	                         		
        	row5.nm = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row5.abbrevnm = null;
							} else {
	                         		
        	row5.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row5.desc = null;
							} else {
	                         		
        	row5.desc = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row5.nmdt = null;
							} else {
										
			row5.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 7);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row5.nm_prev = null;
							} else {
	                         		
        	row5.nm_prev = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row5.suppcd = null;
							} else {
	                         		
        	row5.suppcd = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row5.lic_authcd = null;
							} else {
		                          
            row5.lic_authcd = rs_tDBInput_5.getLong(10);
            if(rs_tDBInput_5.wasNull()){
                    row5.lic_authcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row5.lic_auth_prevcd = null;
							} else {
		                          
            row5.lic_auth_prevcd = rs_tDBInput_5.getLong(11);
            if(rs_tDBInput_5.wasNull()){
                    row5.lic_auth_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row5.lic_authchangecd = null;
							} else {
		                          
            row5.lic_authchangecd = rs_tDBInput_5.getLong(12);
            if(rs_tDBInput_5.wasNull()){
                    row5.lic_authchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row5.lic_authchangedt = null;
							} else {
										
			row5.lic_authchangedt = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 13);
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row5.combprodcd = null;
							} else {
		                          
            row5.combprodcd = rs_tDBInput_5.getLong(14);
            if(rs_tDBInput_5.wasNull()){
                    row5.combprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row5.flavourcd = null;
							} else {
		                          
            row5.flavourcd = rs_tDBInput_5.getLong(15);
            if(rs_tDBInput_5.wasNull()){
                    row5.flavourcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row5.ema = null;
							} else {
		                          
            row5.ema = rs_tDBInput_5.getInt(16);
            if(rs_tDBInput_5.wasNull()){
                    row5.ema = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row5.parallel_import = null;
							} else {
		                          
            row5.parallel_import = rs_tDBInput_5.getInt(17);
            if(rs_tDBInput_5.wasNull()){
                    row5.parallel_import = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row5.avail_restrictcd = null;
							} else {
		                          
            row5.avail_restrictcd = rs_tDBInput_5.getLong(18);
            if(rs_tDBInput_5.wasNull()){
                    row5.avail_restrictcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row5.col_val_hash = null;
							} else {
		                          
            row5.col_val_hash = rs_tDBInput_5.getObject(19);
            if(rs_tDBInput_5.wasNull()){
                    row5.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row6HashKey.apid = row5.apid ;
                        		    		
                        		    		    row6HashKey.col_val_hash = row5.col_val_hash ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.apid = '" + row6HashKey.apid + "', row6.col_val_hash = '" + row6HashKey.col_val_hash + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

amp_del_row = null;

if(!rejectedInnerJoin_tMap_3 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'amp_del_row'
// # Filter conditions 
if( rejectedInnerJoin_tMap_3 ) {
amp_del_row_tmp.dmd_id = row5.apid;
amp_del_row_tmp.sync_process_id =  (String)globalMap.get("current_process_id") ;
amp_del_row_tmp.dmd_entity_name = "dmd_amp";
amp_del_row_tmp.row_action = "d";
amp_del_row = amp_del_row_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "amp_del_row"
if(amp_del_row != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_del_row");
					}
					



            row16 = null;
        whetherReject_tDBOutput_4 = false;
                    if(amp_del_row.dmd_id == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, amp_del_row.dmd_id);
}

                    if(amp_del_row.sync_process_id == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, amp_del_row.sync_process_id);
}

                    if(amp_del_row.dmd_entity_name == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, amp_del_row.dmd_entity_name);
}

                    if(amp_del_row.row_action == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, amp_del_row.row_action);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
            if(!whetherReject_tDBOutput_4) {
                            row16 = new row16Struct();
                                row16.dmd_id = amp_del_row.dmd_id;
                                row16.sync_process_id = amp_del_row.sync_process_id;
                                row16.dmd_entity_name = amp_del_row.dmd_entity_name;
                                row16.row_action = amp_del_row.row_action;
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
            	    	
            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
			    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
			    	
			    	System.err.println(errormessage_tDBOutput_4);
			    	
				}
            }
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row16.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "amp_del_row"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_del_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.apid = this.apid;
	            other.invalid = this.invalid;
	            other.vpid = this.vpid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.desc = this.desc;
	            other.nmdt = this.nmdt;
	            other.nm_prev = this.nm_prev;
	            other.suppcd = this.suppcd;
	            other.lic_authcd = this.lic_authcd;
	            other.lic_auth_prevcd = this.lic_auth_prevcd;
	            other.lic_authchangecd = this.lic_authchangecd;
	            other.lic_authchangedt = this.lic_authchangedt;
	            other.combprodcd = this.combprodcd;
	            other.flavourcd = this.flavourcd;
	            other.ema = this.ema;
	            other.parallel_import = this.parallel_import;
	            other.avail_restrictcd = this.avail_restrictcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.apid = this.apid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.vpid = readString(dis,ois);
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
						this.desc = readString(dis,ois);
					
						this.nmdt = readDate(dis,ois);
					
						this.nm_prev = readString(dis,ois);
					
						this.suppcd = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
						this.lic_authchangedt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis,ois);
					
						this.parallel_import = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.vpid, dos, oos);
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						writeString(this.desc, dos, oos);
					
						writeDate(this.nmdt, dos, oos);
					
						writeString(this.nm_prev, dos, oos);
					
						writeString(this.suppcd, dos, oos);
					
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
						writeDate(this.lic_authchangedt, dos, oos);
					
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					writeInteger(this.ema, dos, oos);
					
					writeInteger(this.parallel_import, dos, oos);
					
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_5) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_3 - inputs:(row5,row6) outputs:(amp_del_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_6 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"desc\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nmdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nm_prev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"suppcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_auth_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authchangecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authchangedt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"combprodcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"flavourcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"ema\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"parallel_import\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"avail_restrictcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\"";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row6.apid = null;
							} else {
	                         		
        	row6.apid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row6.invalid = null;
							} else {
		                          
            row6.invalid = rs_tDBInput_6.getShort(2);
            if(rs_tDBInput_6.wasNull()){
                    row6.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row6.vpid = null;
							} else {
	                         		
        	row6.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row6.nm = null;
							} else {
	                         		
        	row6.nm = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row6.abbrevnm = null;
							} else {
	                         		
        	row6.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row6.desc = null;
							} else {
	                         		
        	row6.desc = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row6.nmdt = null;
							} else {
										
			row6.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 7);
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								row6.nm_prev = null;
							} else {
	                         		
        	row6.nm_prev = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								row6.suppcd = null;
							} else {
	                         		
        	row6.suppcd = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 10) {
								row6.lic_authcd = null;
							} else {
		                          
            row6.lic_authcd = rs_tDBInput_6.getLong(10);
            if(rs_tDBInput_6.wasNull()){
                    row6.lic_authcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 11) {
								row6.lic_auth_prevcd = null;
							} else {
		                          
            row6.lic_auth_prevcd = rs_tDBInput_6.getLong(11);
            if(rs_tDBInput_6.wasNull()){
                    row6.lic_auth_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 12) {
								row6.lic_authchangecd = null;
							} else {
		                          
            row6.lic_authchangecd = rs_tDBInput_6.getLong(12);
            if(rs_tDBInput_6.wasNull()){
                    row6.lic_authchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 13) {
								row6.lic_authchangedt = null;
							} else {
										
			row6.lic_authchangedt = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 13);
		                    }
							if(colQtyInRs_tDBInput_6 < 14) {
								row6.combprodcd = null;
							} else {
		                          
            row6.combprodcd = rs_tDBInput_6.getLong(14);
            if(rs_tDBInput_6.wasNull()){
                    row6.combprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 15) {
								row6.flavourcd = null;
							} else {
		                          
            row6.flavourcd = rs_tDBInput_6.getLong(15);
            if(rs_tDBInput_6.wasNull()){
                    row6.flavourcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 16) {
								row6.ema = null;
							} else {
		                          
            row6.ema = rs_tDBInput_6.getInt(16);
            if(rs_tDBInput_6.wasNull()){
                    row6.ema = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 17) {
								row6.parallel_import = null;
							} else {
		                          
            row6.parallel_import = rs_tDBInput_6.getInt(17);
            if(rs_tDBInput_6.wasNull()){
                    row6.parallel_import = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 18) {
								row6.avail_restrictcd = null;
							} else {
		                          
            row6.avail_restrictcd = rs_tDBInput_6.getLong(18);
            if(rs_tDBInput_6.wasNull()){
                    row6.avail_restrictcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 19) {
								row6.col_val_hash = null;
							} else {
		                          
            row6.col_val_hash = rs_tDBInput_6.getObject(19);
            if(rs_tDBInput_6.wasNull()){
                    row6.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.apid = row6.apid;
				
				row6_HashRow.invalid = row6.invalid;
				
				row6_HashRow.vpid = row6.vpid;
				
				row6_HashRow.nm = row6.nm;
				
				row6_HashRow.abbrevnm = row6.abbrevnm;
				
				row6_HashRow.desc = row6.desc;
				
				row6_HashRow.nmdt = row6.nmdt;
				
				row6_HashRow.nm_prev = row6.nm_prev;
				
				row6_HashRow.suppcd = row6.suppcd;
				
				row6_HashRow.lic_authcd = row6.lic_authcd;
				
				row6_HashRow.lic_auth_prevcd = row6.lic_auth_prevcd;
				
				row6_HashRow.lic_authchangecd = row6.lic_authchangecd;
				
				row6_HashRow.lic_authchangedt = row6.lic_authchangedt;
				
				row6_HashRow.combprodcd = row6.combprodcd;
				
				row6_HashRow.flavourcd = row6.flavourcd;
				
				row6_HashRow.ema = row6.ema;
				
				row6_HashRow.parallel_import = row6.parallel_import;
				
				row6_HashRow.avail_restrictcd = row6.avail_restrictcd;
				
				row6_HashRow.col_val_hash = row6.col_val_hash;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_row_delStruct implements routines.system.IPersistableRow<vmp_row_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_row_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_8Struct implements routines.system.IPersistableRow<after_tDBInput_8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_7Process(globalMap);

		row7Struct row7 = new row7Struct();
vmp_row_delStruct vmp_row_del = new vmp_row_delStruct();
row13Struct row13 = new row13Struct();






	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tLogRow_6 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
		java.io.PrintStream consoleOut_tLogRow_6 = null;	

 		StringBuilder strBuffer_tLogRow_6 = null;
		int nb_line_tLogRow_6 = 0;
///////////////////////    			



 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_row_del");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.dmd_db_schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_1 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_1 = context.dmd_db_password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_row_delStruct vmp_row_del_tmp = new vmp_row_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_8 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vpiddt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vpidprev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"vtmid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"invalid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"abbrevnm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"basiscd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nmdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nmprev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"basis_prevcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"nmchangecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"comprodcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"pres_statcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"sug_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"glu_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"pres_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"cfc_f\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"non_availcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"non_availdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"df_indcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"udfs\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"udfs_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"unit_dose_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp\"";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row7.vpid = null;
							} else {
	                         		
        	row7.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row7.vpiddt = null;
							} else {
										
			row7.vpiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 2);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row7.vpidprev = null;
							} else {
	                         		
        	row7.vpidprev = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row7.vtmid = null;
							} else {
	                         		
        	row7.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 4, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								row7.invalid = null;
							} else {
		                          
            row7.invalid = rs_tDBInput_8.getShort(5);
            if(rs_tDBInput_8.wasNull()){
                    row7.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 6) {
								row7.nm = null;
							} else {
	                         		
        	row7.nm = routines.system.JDBCUtil.getString(rs_tDBInput_8, 6, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 7) {
								row7.abbrevnm = null;
							} else {
	                         		
        	row7.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_8, 7, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 8) {
								row7.basiscd = null;
							} else {
		                          
            row7.basiscd = rs_tDBInput_8.getLong(8);
            if(rs_tDBInput_8.wasNull()){
                    row7.basiscd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 9) {
								row7.nmdt = null;
							} else {
										
			row7.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 9);
		                    }
							if(colQtyInRs_tDBInput_8 < 10) {
								row7.nmprev = null;
							} else {
	                         		
        	row7.nmprev = routines.system.JDBCUtil.getString(rs_tDBInput_8, 10, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 11) {
								row7.basis_prevcd = null;
							} else {
		                          
            row7.basis_prevcd = rs_tDBInput_8.getLong(11);
            if(rs_tDBInput_8.wasNull()){
                    row7.basis_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 12) {
								row7.nmchangecd = null;
							} else {
		                          
            row7.nmchangecd = rs_tDBInput_8.getLong(12);
            if(rs_tDBInput_8.wasNull()){
                    row7.nmchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 13) {
								row7.comprodcd = null;
							} else {
		                          
            row7.comprodcd = rs_tDBInput_8.getLong(13);
            if(rs_tDBInput_8.wasNull()){
                    row7.comprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 14) {
								row7.pres_statcd = null;
							} else {
		                          
            row7.pres_statcd = rs_tDBInput_8.getLong(14);
            if(rs_tDBInput_8.wasNull()){
                    row7.pres_statcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 15) {
								row7.sug_f = null;
							} else {
		                          
            row7.sug_f = rs_tDBInput_8.getInt(15);
            if(rs_tDBInput_8.wasNull()){
                    row7.sug_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 16) {
								row7.glu_f = null;
							} else {
		                          
            row7.glu_f = rs_tDBInput_8.getInt(16);
            if(rs_tDBInput_8.wasNull()){
                    row7.glu_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 17) {
								row7.pres_f = null;
							} else {
		                          
            row7.pres_f = rs_tDBInput_8.getInt(17);
            if(rs_tDBInput_8.wasNull()){
                    row7.pres_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 18) {
								row7.cfc_f = null;
							} else {
		                          
            row7.cfc_f = rs_tDBInput_8.getInt(18);
            if(rs_tDBInput_8.wasNull()){
                    row7.cfc_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 19) {
								row7.non_availcd = null;
							} else {
		                          
            row7.non_availcd = rs_tDBInput_8.getInt(19);
            if(rs_tDBInput_8.wasNull()){
                    row7.non_availcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 20) {
								row7.non_availdt = null;
							} else {
										
			row7.non_availdt = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 20);
		                    }
							if(colQtyInRs_tDBInput_8 < 21) {
								row7.df_indcd = null;
							} else {
		                          
            row7.df_indcd = rs_tDBInput_8.getLong(21);
            if(rs_tDBInput_8.wasNull()){
                    row7.df_indcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 22) {
								row7.udfs = null;
							} else {
		                          
            row7.udfs = rs_tDBInput_8.getBigDecimal(22);
            if(rs_tDBInput_8.wasNull()){
                    row7.udfs = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 23) {
								row7.udfs_uomcd = null;
							} else {
	                         		
        	row7.udfs_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_8, 23, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 24) {
								row7.unit_dose_uomcd = null;
							} else {
	                         		
        	row7.unit_dose_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_8, 24, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 25) {
								row7.col_val_hash = null;
							} else {
		                          
            row7.col_val_hash = rs_tDBInput_8.getObject(25);
            if(rs_tDBInput_8.wasNull()){
                    row7.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row8HashKey.vpid = row7.vpid ;
                        		    		
                        		    		    row8HashKey.col_val_hash = row7.col_val_hash ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.vpid = '" + row8HashKey.vpid + "', row8.col_val_hash = '" + row8HashKey.col_val_hash + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

vmp_row_del = null;

if(!rejectedInnerJoin_tMap_4 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vmp_row_del'
// # Filter conditions 
if( rejectedInnerJoin_tMap_4 ) {
vmp_row_del_tmp.dmd_id = row7.vpid ;
vmp_row_del_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vmp_row_del_tmp.dmd_entity_name = "dmd_vmp";
vmp_row_del_tmp.row_action = "d";
vmp_row_del = vmp_row_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "vmp_row_del"
if(vmp_row_del != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_row_del");
					}
					



            row13 = null;
        whetherReject_tDBOutput_1 = false;
                    if(vmp_row_del.dmd_id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, vmp_row_del.dmd_id);
}

                    if(vmp_row_del.sync_process_id == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, vmp_row_del.sync_process_id);
}

                    if(vmp_row_del.dmd_entity_name == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, vmp_row_del.dmd_entity_name);
}

                    if(vmp_row_del.row_action == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, vmp_row_del.row_action);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
                            row13 = new row13Struct();
                                row13.dmd_id = vmp_row_del.dmd_id;
                                row13.sync_process_id = vmp_row_del.sync_process_id;
                                row13.dmd_entity_name = vmp_row_del.dmd_entity_name;
                                row13.row_action = vmp_row_del.row_action;
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_6 = new StringBuilder();




   				
	    		if(row13.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_6);
                    }
                    consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
                    consoleOut_tLogRow_6.flush();
                    nb_line_tLogRow_6++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "vmp_row_del"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_row_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	


//////
//////
globalMap.put("tLogRow_6_NB_LINE",nb_line_tLogRow_6);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.vpid = this.vpid;
	            other.vpiddt = this.vpiddt;
	            other.vpidprev = this.vpidprev;
	            other.vtmid = this.vtmid;
	            other.invalid = this.invalid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.basiscd = this.basiscd;
	            other.nmdt = this.nmdt;
	            other.nmprev = this.nmprev;
	            other.basis_prevcd = this.basis_prevcd;
	            other.nmchangecd = this.nmchangecd;
	            other.comprodcd = this.comprodcd;
	            other.pres_statcd = this.pres_statcd;
	            other.sug_f = this.sug_f;
	            other.glu_f = this.glu_f;
	            other.pres_f = this.pres_f;
	            other.cfc_f = this.cfc_f;
	            other.non_availcd = this.non_availcd;
	            other.non_availdt = this.non_availdt;
	            other.df_indcd = this.df_indcd;
	            other.udfs = this.udfs;
	            other.udfs_uomcd = this.udfs_uomcd;
	            other.unit_dose_uomcd = this.unit_dose_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.vpiddt = readDate(dis,ois);
					
						this.vpidprev = readString(dis,ois);
					
						this.vtmid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
						this.nmdt = readDate(dis,ois);
					
						this.nmprev = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis,ois);
					
						this.glu_f = readInteger(dis,ois);
					
						this.pres_f = readInteger(dis,ois);
					
						this.cfc_f = readInteger(dis,ois);
					
						this.non_availcd = readInteger(dis,ois);
					
						this.non_availdt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
       			    	this.udfs = (BigDecimal) ois.readObject();
					
						this.udfs_uomcd = readString(dis,ois);
					
						this.unit_dose_uomcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.vpiddt, dos, oos);
					
						writeString(this.vpidprev, dos, oos);
					
						writeString(this.vtmid, dos, oos);
					
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
						writeDate(this.nmdt, dos, oos);
					
						writeString(this.nmprev, dos, oos);
					
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					writeInteger(this.sug_f, dos, oos);
					
					writeInteger(this.glu_f, dos, oos);
					
					writeInteger(this.pres_f, dos, oos);
					
					writeInteger(this.cfc_f, dos, oos);
					
					writeInteger(this.non_availcd, dos, oos);
					
						writeDate(this.non_availdt, dos, oos);
					
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
       			    	oos.writeObject(this.udfs);
					
						writeString(this.udfs_uomcd, dos, oos);
					
						writeString(this.unit_dose_uomcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_8) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row8) outputs:(vmp_row_del)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_7 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vtmid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"basiscd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"basis_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmchangecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"comprodcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"pres_statcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"sug_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"glu_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"pres_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"cfc_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"non_availcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"non_availdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"df_indcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"udfs\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"udfs_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"unit_dose_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\"";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row8.vpid = null;
							} else {
	                         		
        	row8.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row8.vpiddt = null;
							} else {
										
			row8.vpiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 2);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row8.vpidprev = null;
							} else {
	                         		
        	row8.vpidprev = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row8.vtmid = null;
							} else {
	                         		
        	row8.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row8.invalid = null;
							} else {
		                          
            row8.invalid = rs_tDBInput_7.getShort(5);
            if(rs_tDBInput_7.wasNull()){
                    row8.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row8.nm = null;
							} else {
	                         		
        	row8.nm = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row8.abbrevnm = null;
							} else {
	                         		
        	row8.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row8.basiscd = null;
							} else {
		                          
            row8.basiscd = rs_tDBInput_7.getLong(8);
            if(rs_tDBInput_7.wasNull()){
                    row8.basiscd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row8.nmdt = null;
							} else {
										
			row8.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 9);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								row8.nmprev = null;
							} else {
	                         		
        	row8.nmprev = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								row8.basis_prevcd = null;
							} else {
		                          
            row8.basis_prevcd = rs_tDBInput_7.getLong(11);
            if(rs_tDBInput_7.wasNull()){
                    row8.basis_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 12) {
								row8.nmchangecd = null;
							} else {
		                          
            row8.nmchangecd = rs_tDBInput_7.getLong(12);
            if(rs_tDBInput_7.wasNull()){
                    row8.nmchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 13) {
								row8.comprodcd = null;
							} else {
		                          
            row8.comprodcd = rs_tDBInput_7.getLong(13);
            if(rs_tDBInput_7.wasNull()){
                    row8.comprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 14) {
								row8.pres_statcd = null;
							} else {
		                          
            row8.pres_statcd = rs_tDBInput_7.getLong(14);
            if(rs_tDBInput_7.wasNull()){
                    row8.pres_statcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 15) {
								row8.sug_f = null;
							} else {
		                          
            row8.sug_f = rs_tDBInput_7.getInt(15);
            if(rs_tDBInput_7.wasNull()){
                    row8.sug_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 16) {
								row8.glu_f = null;
							} else {
		                          
            row8.glu_f = rs_tDBInput_7.getInt(16);
            if(rs_tDBInput_7.wasNull()){
                    row8.glu_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 17) {
								row8.pres_f = null;
							} else {
		                          
            row8.pres_f = rs_tDBInput_7.getInt(17);
            if(rs_tDBInput_7.wasNull()){
                    row8.pres_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 18) {
								row8.cfc_f = null;
							} else {
		                          
            row8.cfc_f = rs_tDBInput_7.getInt(18);
            if(rs_tDBInput_7.wasNull()){
                    row8.cfc_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 19) {
								row8.non_availcd = null;
							} else {
		                          
            row8.non_availcd = rs_tDBInput_7.getInt(19);
            if(rs_tDBInput_7.wasNull()){
                    row8.non_availcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 20) {
								row8.non_availdt = null;
							} else {
										
			row8.non_availdt = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 20);
		                    }
							if(colQtyInRs_tDBInput_7 < 21) {
								row8.df_indcd = null;
							} else {
		                          
            row8.df_indcd = rs_tDBInput_7.getLong(21);
            if(rs_tDBInput_7.wasNull()){
                    row8.df_indcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 22) {
								row8.udfs = null;
							} else {
		                          
            row8.udfs = rs_tDBInput_7.getBigDecimal(22);
            if(rs_tDBInput_7.wasNull()){
                    row8.udfs = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 23) {
								row8.udfs_uomcd = null;
							} else {
	                         		
        	row8.udfs_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_7, 23, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 24) {
								row8.unit_dose_uomcd = null;
							} else {
	                         		
        	row8.unit_dose_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_7, 24, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 25) {
								row8.col_val_hash = null;
							} else {
		                          
            row8.col_val_hash = rs_tDBInput_7.getObject(25);
            if(rs_tDBInput_7.wasNull()){
                    row8.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.vpid = row8.vpid;
				
				row8_HashRow.vpiddt = row8.vpiddt;
				
				row8_HashRow.vpidprev = row8.vpidprev;
				
				row8_HashRow.vtmid = row8.vtmid;
				
				row8_HashRow.invalid = row8.invalid;
				
				row8_HashRow.nm = row8.nm;
				
				row8_HashRow.abbrevnm = row8.abbrevnm;
				
				row8_HashRow.basiscd = row8.basiscd;
				
				row8_HashRow.nmdt = row8.nmdt;
				
				row8_HashRow.nmprev = row8.nmprev;
				
				row8_HashRow.basis_prevcd = row8.basis_prevcd;
				
				row8_HashRow.nmchangecd = row8.nmchangecd;
				
				row8_HashRow.comprodcd = row8.comprodcd;
				
				row8_HashRow.pres_statcd = row8.pres_statcd;
				
				row8_HashRow.sug_f = row8.sug_f;
				
				row8_HashRow.glu_f = row8.glu_f;
				
				row8_HashRow.pres_f = row8.pres_f;
				
				row8_HashRow.cfc_f = row8.cfc_f;
				
				row8_HashRow.non_availcd = row8.non_availcd;
				
				row8_HashRow.non_availdt = row8.non_availdt;
				
				row8_HashRow.df_indcd = row8.df_indcd;
				
				row8_HashRow.udfs = row8.udfs;
				
				row8_HashRow.udfs_uomcd = row8.udfs_uomcd;
				
				row8_HashRow.unit_dose_uomcd = row8.unit_dose_uomcd;
				
				row8_HashRow.col_val_hash = row8.col_val_hash;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vtm_insert_rowStruct implements routines.system.IPersistableRow<vtm_insert_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vtm_insert_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_13Struct implements routines.system.IPersistableRow<after_tDBInput_13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_10Process(globalMap);

		row9Struct row9 = new row9Struct();
vtm_insert_rowStruct vtm_insert_row = new vtm_insert_rowStruct();
row19Struct row19 = new row19Struct();






	
	/**
	 * [tLogRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_7", false);
		start_Hash.put("tLogRow_7", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tLogRow_7 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
		java.io.PrintStream consoleOut_tLogRow_7 = null;	

 		StringBuilder strBuffer_tLogRow_7 = null;
		int nb_line_tLogRow_7 = 0;
///////////////////////    			



 



/**
 * [tLogRow_7 begin ] stop
 */



	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vtm_insert_row");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = context.dmd_db_schema;
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_8 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_8 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_8 = context.dmd_db_password; 

    String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;

    conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8,dbUser_tDBOutput_8,dbPwd_tDBOutput_8);
	
	resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
        conn_tDBOutput_8.setAutoCommit(false);
        int commitEvery_tDBOutput_8 = 10000;
        int commitCounter_tDBOutput_8 = 0;


   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
vtm_insert_rowStruct vtm_insert_row_tmp = new vtm_insert_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_13 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\"";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row9.vtmid = null;
							} else {
	                         		
        	row9.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_13, 1, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row9.invalid = null;
							} else {
		                          
            row9.invalid = rs_tDBInput_13.getShort(2);
            if(rs_tDBInput_13.wasNull()){
                    row9.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row9.nm = null;
							} else {
	                         		
        	row9.nm = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								row9.abbrevnm = null;
							} else {
	                         		
        	row9.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_13, 4, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								row9.vtmidprev = null;
							} else {
	                         		
        	row9.vtmidprev = routines.system.JDBCUtil.getString(rs_tDBInput_13, 5, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 6) {
								row9.vtmiddt = null;
							} else {
										
			row9.vtmiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 6);
		                    }
							if(colQtyInRs_tDBInput_13 < 7) {
								row9.col_val_hash = null;
							} else {
		                          
            row9.col_val_hash = rs_tDBInput_13.getObject(7);
            if(rs_tDBInput_13.wasNull()){
                    row9.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row10HashKey.vtmid = row9.vtmid ;
                        		    		
                        		    		    row10HashKey.col_val_hash = row9.col_val_hash ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.vtmid = '" + row10HashKey.vtmid + "', row10.col_val_hash = '" + row10HashKey.col_val_hash + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

vtm_insert_row = null;

if(!rejectedInnerJoin_tMap_5 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vtm_insert_row'
// # Filter conditions 
if( rejectedInnerJoin_tMap_5 ) {
vtm_insert_row_tmp.dmd_id = row9.vtmid;
vtm_insert_row_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vtm_insert_row_tmp.dmd_entity_name = "dmd_vtm";
vtm_insert_row_tmp.row_action = "i";
vtm_insert_row = vtm_insert_row_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "vtm_insert_row"
if(vtm_insert_row != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vtm_insert_row");
					}
					



            row19 = null;
        whetherReject_tDBOutput_8 = false;
                    if(vtm_insert_row.dmd_id == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(1, vtm_insert_row.dmd_id);
}

                    if(vtm_insert_row.sync_process_id == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(2, vtm_insert_row.sync_process_id);
}

                    if(vtm_insert_row.dmd_entity_name == null) {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(3, vtm_insert_row.dmd_entity_name);
}

                    if(vtm_insert_row.row_action == null) {
pstmt_tDBOutput_8.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(4, vtm_insert_row.row_action);
}

			
    		pstmt_tDBOutput_8.addBatch();
    		nb_line_tDBOutput_8++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		  
            if(!whetherReject_tDBOutput_8) {
                            row19 = new row19Struct();
                                row19.dmd_id = vtm_insert_row.dmd_id;
                                row19.sync_process_id = vtm_insert_row.sync_process_id;
                                row19.dmd_entity_name = vtm_insert_row.dmd_entity_name;
                                row19.row_action = vtm_insert_row.row_action;
            }
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    		if (ne_tDBOutput_8 != null) {
				    			throw(sqle_tDBOutput_8);
				    		}else{
				            	throw(e_tDBOutput_8);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_8++;
                if(commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
                if ((batchSize_tDBOutput_8 > 0) && (batchSizeCounter_tDBOutput_8 > 0)) {
                try {
                		int countSum_tDBOutput_8 = 0;
                		    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
            	    	
            	    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
            	    	
                batchSizeCounter_tDBOutput_8 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_8){
			    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
			    	String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
					}else{
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}
			    	
			    		if (ne_tDBOutput_8 != null) {
			    			throw(sqle_tDBOutput_8);
			    		}else{
			            	throw(e_tDBOutput_8);
			            }
			    	
				}
            }
                	conn_tDBOutput_8.commit();
                	
                	commitCounter_tDBOutput_8=0;
                }

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tLogRow_7 main ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_7 = new StringBuilder();




   				
	    		if(row19.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row19.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row19.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row19.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row19.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row19.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row19.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row19.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_7 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_7);
                    }
                    consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
                    consoleOut_tLogRow_7.flush();
                    nb_line_tLogRow_7++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_7++;

/**
 * [tLogRow_7 main ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "vtm_insert_row"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    		if (ne_tDBOutput_8 != null) {
	    			throw(sqle_tDBOutput_8);
	    		}else{
	            	throw(e_tDBOutput_8);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);
			
			conn_tDBOutput_8.commit();
			
		
    	conn_tDBOutput_8 .close();
    	
    	resourceMap.put("finish_tDBOutput_8", true);
    	

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vtm_insert_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */

	
	/**
	 * [tLogRow_7 end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	


//////
//////
globalMap.put("tLogRow_7_NB_LINE",nb_line_tLogRow_7);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tLogRow_7", true);
end_Hash.put("tLogRow_7", System.currentTimeMillis());




/**
 * [tLogRow_7 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_8") == null){
            java.sql.Connection ctn_tDBOutput_8 = null;
            if((ctn_tDBOutput_8 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_8")) != null){
                try {
                    ctn_tDBOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_8) {
                    String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :" + sqlEx_tDBOutput_8.getMessage();
                    System.err.println(errorMessage_tDBOutput_8);
                }
            }
        }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */

	
	/**
	 * [tLogRow_7 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vtmid == null) ? 0 : this.vtmid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.vtmid == null) {
							if (other.vtmid != null)
								return false;
						
						} else if (!this.vtmid.equals(other.vtmid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.vtmid = this.vtmid;
	            other.invalid = this.invalid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.vtmidprev = this.vtmidprev;
	            other.vtmiddt = this.vtmiddt;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.vtmid = this.vtmid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
						this.vtmidprev = readString(dis,ois);
					
						this.vtmiddt = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						writeString(this.vtmidprev, dos, oos);
					
						writeDate(this.vtmiddt, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vtmid, other.vtmid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_13) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_5 - inputs:(row9,row10) outputs:(vtm_insert_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_10 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"vtmid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"invalid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"nm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"abbrevnm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"vtmidprev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"vtmiddt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\"";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row10.vtmid = null;
							} else {
	                         		
        	row10.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row10.invalid = null;
							} else {
		                          
            row10.invalid = rs_tDBInput_10.getShort(2);
            if(rs_tDBInput_10.wasNull()){
                    row10.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row10.nm = null;
							} else {
	                         		
        	row10.nm = routines.system.JDBCUtil.getString(rs_tDBInput_10, 3, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row10.abbrevnm = null;
							} else {
	                         		
        	row10.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_10, 4, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 5) {
								row10.vtmidprev = null;
							} else {
	                         		
        	row10.vtmidprev = routines.system.JDBCUtil.getString(rs_tDBInput_10, 5, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 6) {
								row10.vtmiddt = null;
							} else {
										
			row10.vtmiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 6);
		                    }
							if(colQtyInRs_tDBInput_10 < 7) {
								row10.col_val_hash = null;
							} else {
		                          
            row10.col_val_hash = rs_tDBInput_10.getObject(7);
            if(rs_tDBInput_10.wasNull()){
                    row10.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.vtmid = row10.vtmid;
				
				row10_HashRow.invalid = row10.invalid;
				
				row10_HashRow.nm = row10.nm;
				
				row10_HashRow.abbrevnm = row10.abbrevnm;
				
				row10_HashRow.vtmidprev = row10.vtmidprev;
				
				row10_HashRow.vtmiddt = row10.vtmiddt;
				
				row10_HashRow.col_val_hash = row10.col_val_hash;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vtm_delete_rowStruct implements routines.system.IPersistableRow<vtm_delete_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vtm_delete_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_9Struct implements routines.system.IPersistableRow<after_tDBInput_9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_11Process(globalMap);

		row11Struct row11 = new row11Struct();
vtm_delete_rowStruct vtm_delete_row = new vtm_delete_rowStruct();
row21Struct row21 = new row21Struct();






	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tLogRow_9 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
		java.io.PrintStream consoleOut_tLogRow_9 = null;	

 		StringBuilder strBuffer_tLogRow_9 = null;
		int nb_line_tLogRow_9 = 0;
///////////////////////    			



 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vtm_delete_row");
					}
				
		int tos_count_tDBOutput_9 = 0;
		





String dbschema_tDBOutput_9 = null;
	dbschema_tDBOutput_9 = context.dmd_db_schema;
	

String tableName_tDBOutput_9 = null;
if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
	tableName_tDBOutput_9 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;

boolean whetherReject_tDBOutput_9 = false;

java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_9 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_9 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_9 = context.dmd_db_password; 

    String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;

    conn_tDBOutput_9 = java.sql.DriverManager.getConnection(url_tDBOutput_9,dbUser_tDBOutput_9,dbPwd_tDBOutput_9);
	
	resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
        conn_tDBOutput_9.setAutoCommit(false);
        int commitEvery_tDBOutput_9 = 10000;
        int commitCounter_tDBOutput_9 = 0;


   int batchSize_tDBOutput_9 = 10000;
   int batchSizeCounter_tDBOutput_9=0;

int count_tDBOutput_9=0;
	    String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
	    resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
	    

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
vtm_delete_rowStruct vtm_delete_row_tmp = new vtm_delete_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_9 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"vtmid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"invalid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"nm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"abbrevnm\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"vtmidprev\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"vtmiddt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vtm\"";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row11.vtmid = null;
							} else {
	                         		
        	row11.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row11.invalid = null;
							} else {
		                          
            row11.invalid = rs_tDBInput_9.getShort(2);
            if(rs_tDBInput_9.wasNull()){
                    row11.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row11.nm = null;
							} else {
	                         		
        	row11.nm = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row11.abbrevnm = null;
							} else {
	                         		
        	row11.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row11.vtmidprev = null;
							} else {
	                         		
        	row11.vtmidprev = routines.system.JDBCUtil.getString(rs_tDBInput_9, 5, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								row11.vtmiddt = null;
							} else {
										
			row11.vtmiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 6);
		                    }
							if(colQtyInRs_tDBInput_9 < 7) {
								row11.col_val_hash = null;
							} else {
		                          
            row11.col_val_hash = rs_tDBInput_9.getObject(7);
            if(rs_tDBInput_9.wasNull()){
                    row11.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row12HashKey.vtmid = row11.vtmid ;
                        		    		
                        		    		    row12HashKey.col_val_hash = row11.col_val_hash ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.vtmid = '" + row12HashKey.vtmid + "', row12.col_val_hash = '" + row12HashKey.col_val_hash + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

vtm_delete_row = null;

if(!rejectedInnerJoin_tMap_6 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vtm_delete_row'
// # Filter conditions 
if( rejectedInnerJoin_tMap_6 ) {
vtm_delete_row_tmp.dmd_id = row11.vtmid;
vtm_delete_row_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vtm_delete_row_tmp.dmd_entity_name = "dmd_vtm";
vtm_delete_row_tmp.row_action = "d";
vtm_delete_row = vtm_delete_row_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "vtm_delete_row"
if(vtm_delete_row != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vtm_delete_row");
					}
					



            row21 = null;
        whetherReject_tDBOutput_9 = false;
                    if(vtm_delete_row.dmd_id == null) {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(1, vtm_delete_row.dmd_id);
}

                    if(vtm_delete_row.sync_process_id == null) {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(2, vtm_delete_row.sync_process_id);
}

                    if(vtm_delete_row.dmd_entity_name == null) {
pstmt_tDBOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(3, vtm_delete_row.dmd_entity_name);
}

                    if(vtm_delete_row.row_action == null) {
pstmt_tDBOutput_9.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(4, vtm_delete_row.row_action);
}

			
    		pstmt_tDBOutput_9.addBatch();
    		nb_line_tDBOutput_9++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_9++;
    		  
            if(!whetherReject_tDBOutput_9) {
                            row21 = new row21Struct();
                                row21.dmd_id = vtm_delete_row.dmd_id;
                                row21.sync_process_id = vtm_delete_row.sync_process_id;
                                row21.dmd_entity_name = vtm_delete_row.dmd_entity_name;
                                row21.row_action = vtm_delete_row.row_action;
            }
    			if ((batchSize_tDBOutput_9 > 0) && (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
                try {
						int countSum_tDBOutput_9 = 0;
						    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
				    	
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
            	    	batchSizeCounter_tDBOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_9){
				    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
				    	String errormessage_tDBOutput_9;
						if (ne_tDBOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
							errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
						}else{
							errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
						}
				    	
				    	int countSum_tDBOutput_9 = 0;
						for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
						
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
				    	System.err.println(errormessage_tDBOutput_9);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_9++;
                if(commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
                if ((batchSize_tDBOutput_9 > 0) && (batchSizeCounter_tDBOutput_9 > 0)) {
                try {
                		int countSum_tDBOutput_9 = 0;
                		    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
            	    	
            	    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
            	    	
                batchSizeCounter_tDBOutput_9 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_9){
			    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
			    	String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
					}else{
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}
			    	
			    	int countSum_tDBOutput_9 = 0;
					for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
					
			    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
			    	
			    	System.err.println(errormessage_tDBOutput_9);
			    	
				}
            }
                	conn_tDBOutput_9.commit();
                	
                	commitCounter_tDBOutput_9=0;
                }

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_9 = new StringBuilder();




   				
	    		if(row21.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row21.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row21.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row21.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row21.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row21.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row21.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row21.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_9);
                    }
                    consoleOut_tLogRow_9.println(strBuffer_tLogRow_9.toString());
                    consoleOut_tLogRow_9.flush();
                    nb_line_tLogRow_9++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "vtm_delete_row"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



	    try {
				int countSum_tDBOutput_9 = 0;
				if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {
						
					for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_9){
	    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
	    	String errormessage_tDBOutput_9;
			if (ne_tDBOutput_9 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
				errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
			}else{
				errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
			}
	    	
	    	int countSum_tDBOutput_9 = 0;
			for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
				countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
			}
			
	    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
	    	
	    	System.err.println(errormessage_tDBOutput_9);
	    	
		}
	    
        if(pstmt_tDBOutput_9 != null) {
        		
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);
			
			conn_tDBOutput_9.commit();
			
		
    	conn_tDBOutput_9 .close();
    	
    	resourceMap.put("finish_tDBOutput_9", true);
    	

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vtm_delete_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */

	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	


//////
//////
globalMap.put("tLogRow_9_NB_LINE",nb_line_tLogRow_9);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_9") == null){
            java.sql.Connection ctn_tDBOutput_9 = null;
            if((ctn_tDBOutput_9 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_9")) != null){
                try {
                    ctn_tDBOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_9) {
                    String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :" + sqlEx_tDBOutput_9.getMessage();
                    System.err.println(errorMessage_tDBOutput_9);
                }
            }
        }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */

	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vtmid == null) ? 0 : this.vtmid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.vtmid == null) {
							if (other.vtmid != null)
								return false;
						
						} else if (!this.vtmid.equals(other.vtmid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.vtmid = this.vtmid;
	            other.invalid = this.invalid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.vtmidprev = this.vtmidprev;
	            other.vtmiddt = this.vtmiddt;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.vtmid = this.vtmid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
						this.vtmidprev = readString(dis,ois);
					
						this.vtmiddt = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						writeString(this.vtmidprev, dos, oos);
					
						writeDate(this.vtmiddt, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vtmid, other.vtmid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_9) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_6 - inputs:(row11,row12) outputs:(vtm_delete_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_11 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\"";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row12.vtmid = null;
							} else {
	                         		
        	row12.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 1, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row12.invalid = null;
							} else {
		                          
            row12.invalid = rs_tDBInput_11.getShort(2);
            if(rs_tDBInput_11.wasNull()){
                    row12.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row12.nm = null;
							} else {
	                         		
        	row12.nm = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row12.abbrevnm = null;
							} else {
	                         		
        	row12.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row12.vtmidprev = null;
							} else {
	                         		
        	row12.vtmidprev = routines.system.JDBCUtil.getString(rs_tDBInput_11, 5, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 6) {
								row12.vtmiddt = null;
							} else {
										
			row12.vtmiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 6);
		                    }
							if(colQtyInRs_tDBInput_11 < 7) {
								row12.col_val_hash = null;
							} else {
		                          
            row12.col_val_hash = rs_tDBInput_11.getObject(7);
            if(rs_tDBInput_11.wasNull()){
                    row12.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.vtmid = row12.vtmid;
				
				row12_HashRow.invalid = row12.invalid;
				
				row12_HashRow.nm = row12.nm;
				
				row12_HashRow.abbrevnm = row12.abbrevnm;
				
				row12_HashRow.vtmidprev = row12.vtmidprev;
				
				row12_HashRow.vtmiddt = row12.vtmiddt;
				
				row12_HashRow.col_val_hash = row12.col_val_hash;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class controldrug_insStruct implements routines.system.IPersistableRow<controldrug_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(controldrug_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_14Struct implements routines.system.IPersistableRow<after_tDBInput_14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_12Process(globalMap);

		row22Struct row22 = new row22Struct();
controldrug_insStruct controldrug_ins = new controldrug_insStruct();
row29Struct row29 = new row29Struct();






	
	/**
	 * [tLogRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_12", false);
		start_Hash.put("tLogRow_12", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tLogRow_12 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_12 = "|";
		java.io.PrintStream consoleOut_tLogRow_12 = null;	

 		StringBuilder strBuffer_tLogRow_12 = null;
		int nb_line_tLogRow_12 = 0;
///////////////////////    			



 



/**
 * [tLogRow_12 begin ] stop
 */



	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"controldrug_ins");
					}
				
		int tos_count_tDBOutput_11 = 0;
		





String dbschema_tDBOutput_11 = null;
	dbschema_tDBOutput_11 = context.dmd_db_schema;
	

String tableName_tDBOutput_11 = null;
if(dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
	tableName_tDBOutput_11 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;
int rejectedCount_tDBOutput_11=0;

boolean whetherReject_tDBOutput_11 = false;

java.sql.Connection conn_tDBOutput_11 = null;
String dbUser_tDBOutput_11 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_11 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_11 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_11 = context.dmd_db_password; 

    String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;

    conn_tDBOutput_11 = java.sql.DriverManager.getConnection(url_tDBOutput_11,dbUser_tDBOutput_11,dbPwd_tDBOutput_11);
	
	resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
        conn_tDBOutput_11.setAutoCommit(false);
        int commitEvery_tDBOutput_11 = 10000;
        int commitCounter_tDBOutput_11 = 0;


   int batchSize_tDBOutput_11 = 10000;
   int batchSizeCounter_tDBOutput_11=0;

int count_tDBOutput_11=0;
	    String insert_tDBOutput_11 = "INSERT INTO \"" + tableName_tDBOutput_11 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
	    resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
	    

 



/**
 * [tDBOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
controldrug_insStruct controldrug_ins_tmp = new controldrug_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_14 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"catcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"catdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"cat_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\"";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row22.vpid = null;
							} else {
	                         		
        	row22.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_14, 1, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row22.catcd = null;
							} else {
		                          
            row22.catcd = rs_tDBInput_14.getLong(2);
            if(rs_tDBInput_14.wasNull()){
                    row22.catcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row22.catdt = null;
							} else {
										
			row22.catdt = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 3);
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								row22.cat_prevcd = null;
							} else {
		                          
            row22.cat_prevcd = rs_tDBInput_14.getLong(4);
            if(rs_tDBInput_14.wasNull()){
                    row22.cat_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 5) {
								row22.col_val_hash = null;
							} else {
		                          
            row22.col_val_hash = rs_tDBInput_14.getObject(5);
            if(rs_tDBInput_14.wasNull()){
                    row22.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row23HashKey.vpid = row22.vpid ;
                        		    		
                        		    		    row23HashKey.col_val_hash = row22.col_val_hash ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.vpid = '" + row23HashKey.vpid + "', row23.col_val_hash = '" + row23HashKey.col_val_hash + "'");
								} // G 071
							

							row23Struct row23 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

controldrug_ins = null;

if(!rejectedInnerJoin_tMap_7 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'controldrug_ins'
// # Filter conditions 
if( rejectedInnerJoin_tMap_7 ) {
controldrug_ins_tmp.dmd_id = row22.vpid ;
controldrug_ins_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
controldrug_ins_tmp.dmd_entity_name = "dmd_vmp_controldrug";
controldrug_ins_tmp.row_action = "i";
controldrug_ins = controldrug_ins_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "controldrug_ins"
if(controldrug_ins != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"controldrug_ins");
					}
					



            row29 = null;
        whetherReject_tDBOutput_11 = false;
                    if(controldrug_ins.dmd_id == null) {
pstmt_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(1, controldrug_ins.dmd_id);
}

                    if(controldrug_ins.sync_process_id == null) {
pstmt_tDBOutput_11.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(2, controldrug_ins.sync_process_id);
}

                    if(controldrug_ins.dmd_entity_name == null) {
pstmt_tDBOutput_11.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(3, controldrug_ins.dmd_entity_name);
}

                    if(controldrug_ins.row_action == null) {
pstmt_tDBOutput_11.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(4, controldrug_ins.row_action);
}

			
    		pstmt_tDBOutput_11.addBatch();
    		nb_line_tDBOutput_11++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_11++;
    		  
            if(!whetherReject_tDBOutput_11) {
                            row29 = new row29Struct();
                                row29.dmd_id = controldrug_ins.dmd_id;
                                row29.sync_process_id = controldrug_ins.sync_process_id;
                                row29.dmd_entity_name = controldrug_ins.dmd_entity_name;
                                row29.row_action = controldrug_ins.row_action;
            }
    			if ((batchSize_tDBOutput_11 > 0) && (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
                try {
						int countSum_tDBOutput_11 = 0;
						    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
				    	
				    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
            	    	batchSizeCounter_tDBOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_11){
				    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
				    	String errormessage_tDBOutput_11;
						if (ne_tDBOutput_11 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
							errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
						}else{
							errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
						}
				    	
				    	int countSum_tDBOutput_11 = 0;
						for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
						
				    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
				    	System.err.println(errormessage_tDBOutput_11);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_11++;
                if(commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {
                if ((batchSize_tDBOutput_11 > 0) && (batchSizeCounter_tDBOutput_11 > 0)) {
                try {
                		int countSum_tDBOutput_11 = 0;
                		    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
            	    	
            	    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
            	    	
                batchSizeCounter_tDBOutput_11 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_11){
			    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
			    	String errormessage_tDBOutput_11;
					if (ne_tDBOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
						errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
					}else{
						errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
					}
			    	
			    	int countSum_tDBOutput_11 = 0;
					for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					
			    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
			    	
			    	System.err.println(errormessage_tDBOutput_11);
			    	
				}
            }
                	conn_tDBOutput_11.commit();
                	
                	commitCounter_tDBOutput_11=0;
                }

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tLogRow_12 main ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_12 = new StringBuilder();




   				
	    		if(row29.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row29.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row29.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row29.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row29.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row29.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row29.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row29.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_12);
                    }
                    consoleOut_tLogRow_12.println(strBuffer_tLogRow_12.toString());
                    consoleOut_tLogRow_12.flush();
                    nb_line_tLogRow_12++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_12++;

/**
 * [tLogRow_12 main ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "controldrug_ins"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



	    try {
				int countSum_tDBOutput_11 = 0;
				if (pstmt_tDBOutput_11 != null && batchSizeCounter_tDBOutput_11 > 0) {
						
					for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_11){
	    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
	    	String errormessage_tDBOutput_11;
			if (ne_tDBOutput_11 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
				errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
			}else{
				errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
			}
	    	
	    	int countSum_tDBOutput_11 = 0;
			for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
				countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
			}
			
	    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
	    	
	    	System.err.println(errormessage_tDBOutput_11);
	    	
		}
	    
        if(pstmt_tDBOutput_11 != null) {
        		
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);
			
			conn_tDBOutput_11.commit();
			
		
    	conn_tDBOutput_11 .close();
    	
    	resourceMap.put("finish_tDBOutput_11", true);
    	

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"controldrug_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */

	
	/**
	 * [tLogRow_12 end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	


//////
//////
globalMap.put("tLogRow_12_NB_LINE",nb_line_tLogRow_12);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tLogRow_12", true);
end_Hash.put("tLogRow_12", System.currentTimeMillis());




/**
 * [tLogRow_12 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_11") == null){
            java.sql.Connection ctn_tDBOutput_11 = null;
            if((ctn_tDBOutput_11 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_11")) != null){
                try {
                    ctn_tDBOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_11) {
                    String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :" + sqlEx_tDBOutput_11.getMessage();
                    System.err.println(errorMessage_tDBOutput_11);
                }
            }
        }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */

	
	/**
	 * [tLogRow_12 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.vpid = this.vpid;
	            other.catcd = this.catcd;
	            other.catdt = this.catdt;
	            other.cat_prevcd = this.cat_prevcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
						this.catdt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
						writeDate(this.catdt, dos, oos);
					
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tDBInput_12 - inputs:(after_tDBInput_14) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_7 - inputs:(row22,row23) outputs:(controldrug_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_12 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"catcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"catdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"cat_prevcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\"";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row23.vpid = null;
							} else {
	                         		
        	row23.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_12, 1, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row23.catcd = null;
							} else {
		                          
            row23.catcd = rs_tDBInput_12.getLong(2);
            if(rs_tDBInput_12.wasNull()){
                    row23.catcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row23.catdt = null;
							} else {
										
			row23.catdt = routines.system.JDBCUtil.getDate(rs_tDBInput_12, 3);
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row23.cat_prevcd = null;
							} else {
		                          
            row23.cat_prevcd = rs_tDBInput_12.getLong(4);
            if(rs_tDBInput_12.wasNull()){
                    row23.cat_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 5) {
								row23.col_val_hash = null;
							} else {
		                          
            row23.col_val_hash = rs_tDBInput_12.getObject(5);
            if(rs_tDBInput_12.wasNull()){
                    row23.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.vpid = row23.vpid;
				
				row23_HashRow.catcd = row23.catcd;
				
				row23_HashRow.catdt = row23.catdt;
				
				row23_HashRow.cat_prevcd = row23.cat_prevcd;
				
				row23_HashRow.col_val_hash = row23.col_val_hash;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_controldrug_delStruct implements routines.system.IPersistableRow<vmp_controldrug_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_controldrug_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_15Struct implements routines.system.IPersistableRow<after_tDBInput_15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_16Process(globalMap);

		row24Struct row24 = new row24Struct();
vmp_controldrug_delStruct vmp_controldrug_del = new vmp_controldrug_delStruct();
row26Struct row26 = new row26Struct();






	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tLogRow_10 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
		java.io.PrintStream consoleOut_tLogRow_10 = null;	

 		StringBuilder strBuffer_tLogRow_10 = null;
		int nb_line_tLogRow_10 = 0;
///////////////////////    			



 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tDBOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_12", false);
		start_Hash.put("tDBOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_controldrug_del");
					}
				
		int tos_count_tDBOutput_12 = 0;
		





String dbschema_tDBOutput_12 = null;
	dbschema_tDBOutput_12 = context.dmd_db_schema;
	

String tableName_tDBOutput_12 = null;
if(dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
	tableName_tDBOutput_12 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_12 = 0;
int nb_line_update_tDBOutput_12 = 0;
int nb_line_inserted_tDBOutput_12 = 0;
int nb_line_deleted_tDBOutput_12 = 0;
int nb_line_rejected_tDBOutput_12 = 0;

int deletedCount_tDBOutput_12=0;
int updatedCount_tDBOutput_12=0;
int insertedCount_tDBOutput_12=0;
int rejectedCount_tDBOutput_12=0;

boolean whetherReject_tDBOutput_12 = false;

java.sql.Connection conn_tDBOutput_12 = null;
String dbUser_tDBOutput_12 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_12 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_12 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_12 = context.dmd_db_password; 

    String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;

    conn_tDBOutput_12 = java.sql.DriverManager.getConnection(url_tDBOutput_12,dbUser_tDBOutput_12,dbPwd_tDBOutput_12);
	
	resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);
        conn_tDBOutput_12.setAutoCommit(false);
        int commitEvery_tDBOutput_12 = 10000;
        int commitCounter_tDBOutput_12 = 0;


   int batchSize_tDBOutput_12 = 10000;
   int batchSizeCounter_tDBOutput_12=0;

int count_tDBOutput_12=0;
	    String insert_tDBOutput_12 = "INSERT INTO \"" + tableName_tDBOutput_12 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
	    resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);
	    

 



/**
 * [tDBOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_controldrug_delStruct vmp_controldrug_del_tmp = new vmp_controldrug_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_15 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
				String url_tDBInput_15 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				conn_tDBInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"catcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"catdt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"cat_prevcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_controldrug\"";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row24.vpid = null;
							} else {
	                         		
        	row24.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_15, 1, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								row24.catcd = null;
							} else {
		                          
            row24.catcd = rs_tDBInput_15.getLong(2);
            if(rs_tDBInput_15.wasNull()){
                    row24.catcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								row24.catdt = null;
							} else {
										
			row24.catdt = routines.system.JDBCUtil.getDate(rs_tDBInput_15, 3);
		                    }
							if(colQtyInRs_tDBInput_15 < 4) {
								row24.cat_prevcd = null;
							} else {
		                          
            row24.cat_prevcd = rs_tDBInput_15.getLong(4);
            if(rs_tDBInput_15.wasNull()){
                    row24.cat_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 5) {
								row24.col_val_hash = null;
							} else {
		                          
            row24.col_val_hash = rs_tDBInput_15.getObject(5);
            if(rs_tDBInput_15.wasNull()){
                    row24.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row25HashKey.vpid = row24.vpid ;
                        		    		
                        		    		    row25HashKey.col_val_hash = row24.col_val_hash ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.vpid = '" + row25HashKey.vpid + "', row25.col_val_hash = '" + row25HashKey.col_val_hash + "'");
								} // G 071
							

							row25Struct row25 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

vmp_controldrug_del = null;

if(!rejectedInnerJoin_tMap_8 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vmp_controldrug_del'
// # Filter conditions 
if( rejectedInnerJoin_tMap_8 ) {
vmp_controldrug_del_tmp.dmd_id = row24.vpid ;
vmp_controldrug_del_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vmp_controldrug_del_tmp.dmd_entity_name = "dmd_vmp_controldrug";
vmp_controldrug_del_tmp.row_action = "d";
vmp_controldrug_del = vmp_controldrug_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "vmp_controldrug_del"
if(vmp_controldrug_del != null) { 



	
	/**
	 * [tDBOutput_12 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_controldrug_del");
					}
					



            row26 = null;
        whetherReject_tDBOutput_12 = false;
                    if(vmp_controldrug_del.dmd_id == null) {
pstmt_tDBOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(1, vmp_controldrug_del.dmd_id);
}

                    if(vmp_controldrug_del.sync_process_id == null) {
pstmt_tDBOutput_12.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(2, vmp_controldrug_del.sync_process_id);
}

                    if(vmp_controldrug_del.dmd_entity_name == null) {
pstmt_tDBOutput_12.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(3, vmp_controldrug_del.dmd_entity_name);
}

                    if(vmp_controldrug_del.row_action == null) {
pstmt_tDBOutput_12.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(4, vmp_controldrug_del.row_action);
}

			
    		pstmt_tDBOutput_12.addBatch();
    		nb_line_tDBOutput_12++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_12++;
    		  
            if(!whetherReject_tDBOutput_12) {
                            row26 = new row26Struct();
                                row26.dmd_id = vmp_controldrug_del.dmd_id;
                                row26.sync_process_id = vmp_controldrug_del.sync_process_id;
                                row26.dmd_entity_name = vmp_controldrug_del.dmd_entity_name;
                                row26.row_action = vmp_controldrug_del.row_action;
            }
    			if ((batchSize_tDBOutput_12 > 0) && (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12)) {
                try {
						int countSum_tDBOutput_12 = 0;
						    
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
				    	
				    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
				    	
            	    	batchSizeCounter_tDBOutput_12 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_12){
				    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
				    	String errormessage_tDBOutput_12;
						if (ne_tDBOutput_12 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
							errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
						}else{
							errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
						}
				    	
				    	int countSum_tDBOutput_12 = 0;
						for(int countEach_tDBOutput_12: e_tDBOutput_12.getUpdateCounts()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
						
				    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
				    	
				    	System.err.println(errormessage_tDBOutput_12);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_12++;
                if(commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {
                if ((batchSize_tDBOutput_12 > 0) && (batchSizeCounter_tDBOutput_12 > 0)) {
                try {
                		int countSum_tDBOutput_12 = 0;
                		    
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
            	    	
            	    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
            	    	
                batchSizeCounter_tDBOutput_12 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_12){
			    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
			    	String errormessage_tDBOutput_12;
					if (ne_tDBOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
						errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
					}else{
						errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
					}
			    	
			    	int countSum_tDBOutput_12 = 0;
					for(int countEach_tDBOutput_12: e_tDBOutput_12.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
					
			    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
			    	
			    	System.err.println(errormessage_tDBOutput_12);
			    	
				}
            }
                	conn_tDBOutput_12.commit();
                	
                	commitCounter_tDBOutput_12=0;
                }

 


	tos_count_tDBOutput_12++;

/**
 * [tDBOutput_12 main ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_10 = new StringBuilder();




   				
	    		if(row26.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row26.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row26.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row26.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row26.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row26.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row26.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row26.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
                    }
                    consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
                    consoleOut_tLogRow_10.flush();
                    nb_line_tLogRow_10++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tDBOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_end ] stop
 */

} // End of branch "vmp_controldrug_del"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
		
			conn_tDBInput_15.commit();
			
		
			conn_tDBInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_12 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



	    try {
				int countSum_tDBOutput_12 = 0;
				if (pstmt_tDBOutput_12 != null && batchSizeCounter_tDBOutput_12 > 0) {
						
					for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_12){
	    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
	    	String errormessage_tDBOutput_12;
			if (ne_tDBOutput_12 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
				errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
			}else{
				errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
			}
	    	
	    	int countSum_tDBOutput_12 = 0;
			for(int countEach_tDBOutput_12: e_tDBOutput_12.getUpdateCounts()) {
				countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
			}
			
	    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
	    	
	    	System.err.println(errormessage_tDBOutput_12);
	    	
		}
	    
        if(pstmt_tDBOutput_12 != null) {
        		
            pstmt_tDBOutput_12.close();
            resourceMap.remove("pstmt_tDBOutput_12");
        }
    resourceMap.put("statementClosed_tDBOutput_12", true);
			
			conn_tDBOutput_12.commit();
			
		
    	conn_tDBOutput_12 .close();
    	
    	resourceMap.put("finish_tDBOutput_12", true);
    	

	nb_line_deleted_tDBOutput_12=nb_line_deleted_tDBOutput_12+ deletedCount_tDBOutput_12;
	nb_line_update_tDBOutput_12=nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
	nb_line_inserted_tDBOutput_12=nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
	nb_line_rejected_tDBOutput_12=nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;
	
        globalMap.put("tDBOutput_12_NB_LINE",nb_line_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_UPDATED",nb_line_update_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_DELETED",nb_line_deleted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_controldrug_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_12", true);
end_Hash.put("tDBOutput_12", System.currentTimeMillis());




/**
 * [tDBOutput_12 end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	


//////
//////
globalMap.put("tLogRow_10_NB_LINE",nb_line_tLogRow_10);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
                if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_12")) != null) {
                    pstmtToClose_tDBOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_12") == null){
            java.sql.Connection ctn_tDBOutput_12 = null;
            if((ctn_tDBOutput_12 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_12")) != null){
                try {
                    ctn_tDBOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_12) {
                    String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :" + sqlEx_tDBOutput_12.getMessage();
                    System.err.println(errorMessage_tDBOutput_12);
                }
            }
        }
    }
 



/**
 * [tDBOutput_12 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.vpid = this.vpid;
	            other.catcd = this.catcd;
	            other.catdt = this.catdt;
	            other.cat_prevcd = this.cat_prevcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
						this.catdt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
						writeDate(this.catdt, dos, oos);
					
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tDBInput_16 - inputs:(after_tDBInput_15) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_8 - inputs:(row24,row25) outputs:(vmp_controldrug_del)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_16 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
				String url_tDBInput_16 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
				conn_tDBInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"catcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"catdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"cat_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\"";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								row25.vpid = null;
							} else {
	                         		
        	row25.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_16, 1, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 2) {
								row25.catcd = null;
							} else {
		                          
            row25.catcd = rs_tDBInput_16.getLong(2);
            if(rs_tDBInput_16.wasNull()){
                    row25.catcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 3) {
								row25.catdt = null;
							} else {
										
			row25.catdt = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 3);
		                    }
							if(colQtyInRs_tDBInput_16 < 4) {
								row25.cat_prevcd = null;
							} else {
		                          
            row25.cat_prevcd = rs_tDBInput_16.getLong(4);
            if(rs_tDBInput_16.wasNull()){
                    row25.cat_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 5) {
								row25.col_val_hash = null;
							} else {
		                          
            row25.col_val_hash = rs_tDBInput_16.getObject(5);
            if(rs_tDBInput_16.wasNull()){
                    row25.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.vpid = row25.vpid;
				
				row25_HashRow.catcd = row25.catcd;
				
				row25_HashRow.catdt = row25.catdt;
				
				row25_HashRow.cat_prevcd = row25.cat_prevcd;
				
				row25_HashRow.col_val_hash = row25.col_val_hash;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
	if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
		
			conn_tDBInput_16.commit();
			
		
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_drugform_insStruct implements routines.system.IPersistableRow<vmp_drugform_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_drugform_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_17Struct implements routines.system.IPersistableRow<after_tDBInput_17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_18Process(globalMap);

		row27Struct row27 = new row27Struct();
vmp_drugform_insStruct vmp_drugform_ins = new vmp_drugform_insStruct();
row31Struct row31 = new row31Struct();






	
	/**
	 * [tLogRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_15", false);
		start_Hash.put("tLogRow_15", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tLogRow_15 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
		java.io.PrintStream consoleOut_tLogRow_15 = null;	

 		StringBuilder strBuffer_tLogRow_15 = null;
		int nb_line_tLogRow_15 = 0;
///////////////////////    			



 



/**
 * [tLogRow_15 begin ] stop
 */



	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_drugform_ins");
					}
				
		int tos_count_tDBOutput_13 = 0;
		





String dbschema_tDBOutput_13 = null;
	dbschema_tDBOutput_13 = context.dmd_db_schema;
	

String tableName_tDBOutput_13 = null;
if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
	tableName_tDBOutput_13 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;

boolean whetherReject_tDBOutput_13 = false;

java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_13 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_13 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_13 = context.dmd_db_password; 

    String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;

    conn_tDBOutput_13 = java.sql.DriverManager.getConnection(url_tDBOutput_13,dbUser_tDBOutput_13,dbPwd_tDBOutput_13);
	
	resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
        conn_tDBOutput_13.setAutoCommit(false);
        int commitEvery_tDBOutput_13 = 10000;
        int commitCounter_tDBOutput_13 = 0;


   int batchSize_tDBOutput_13 = 10000;
   int batchSizeCounter_tDBOutput_13=0;

int count_tDBOutput_13=0;
	    String insert_tDBOutput_13 = "INSERT INTO \"" + tableName_tDBOutput_13 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
	    resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
	    

 



/**
 * [tDBOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_drugform_insStruct vmp_drugform_ins_tmp = new vmp_drugform_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tDBInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_17", false);
		start_Hash.put("tDBInput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_17";

	
		int tos_count_tDBInput_17 = 0;
		
	
    
	
		    int nb_line_tDBInput_17 = 0;
		    java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_17 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;
				
				String url_tDBInput_17 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17,dbUser_tDBInput_17,dbPwd_tDBInput_17);
		        
				conn_tDBInput_17.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

		    String dbquery_tDBInput_17 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"formcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\"";
			

            	globalMap.put("tDBInput_17_QUERY",dbquery_tDBInput_17);
		    java.sql.ResultSet rs_tDBInput_17 = null;

		    try {
		    	rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
		    	int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

		    String tmpContent_tDBInput_17 = null;
		    
		    
		    while (rs_tDBInput_17.next()) {
		        nb_line_tDBInput_17++;
		        
							if(colQtyInRs_tDBInput_17 < 1) {
								row27.vpid = null;
							} else {
	                         		
        	row27.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_17, 1, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 2) {
								row27.formcd = null;
							} else {
	                         		
        	row27.formcd = routines.system.JDBCUtil.getString(rs_tDBInput_17, 2, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 3) {
								row27.col_val_hash = null;
							} else {
		                          
            row27.col_val_hash = rs_tDBInput_17.getObject(3);
            if(rs_tDBInput_17.wasNull()){
                    row27.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_17 begin ] stop
 */
	
	/**
	 * [tDBInput_17 main ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 


	tos_count_tDBInput_17++;

/**
 * [tDBInput_17 main ] stop
 */
	
	/**
	 * [tDBInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row28HashKey.vpid = row27.vpid ;
                        		    		
                        		    		    row28HashKey.col_val_hash = row27.col_val_hash ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.vpid = '" + row28HashKey.vpid + "', row28.col_val_hash = '" + row28HashKey.col_val_hash + "'");
								} // G 071
							

							row28Struct row28 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

vmp_drugform_ins = null;

if(!rejectedInnerJoin_tMap_9 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vmp_drugform_ins'
// # Filter conditions 
if( rejectedInnerJoin_tMap_9 ) {
vmp_drugform_ins_tmp.dmd_id = row27.vpid ;
vmp_drugform_ins_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vmp_drugform_ins_tmp.dmd_entity_name = "dmd_vmp_drugform";
vmp_drugform_ins_tmp.row_action = "i";
vmp_drugform_ins = vmp_drugform_ins_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "vmp_drugform_ins"
if(vmp_drugform_ins != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_drugform_ins");
					}
					



            row31 = null;
        whetherReject_tDBOutput_13 = false;
                    if(vmp_drugform_ins.dmd_id == null) {
pstmt_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(1, vmp_drugform_ins.dmd_id);
}

                    if(vmp_drugform_ins.sync_process_id == null) {
pstmt_tDBOutput_13.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(2, vmp_drugform_ins.sync_process_id);
}

                    if(vmp_drugform_ins.dmd_entity_name == null) {
pstmt_tDBOutput_13.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(3, vmp_drugform_ins.dmd_entity_name);
}

                    if(vmp_drugform_ins.row_action == null) {
pstmt_tDBOutput_13.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(4, vmp_drugform_ins.row_action);
}

			
    		pstmt_tDBOutput_13.addBatch();
    		nb_line_tDBOutput_13++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_13++;
    		  
            if(!whetherReject_tDBOutput_13) {
                            row31 = new row31Struct();
                                row31.dmd_id = vmp_drugform_ins.dmd_id;
                                row31.sync_process_id = vmp_drugform_ins.sync_process_id;
                                row31.dmd_entity_name = vmp_drugform_ins.dmd_entity_name;
                                row31.row_action = vmp_drugform_ins.row_action;
            }
    			if ((batchSize_tDBOutput_13 > 0) && (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
                try {
						int countSum_tDBOutput_13 = 0;
						    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
				    	
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
            	    	batchSizeCounter_tDBOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_13){
				    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
				    	String errormessage_tDBOutput_13;
						if (ne_tDBOutput_13 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
							errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
						}else{
							errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
						}
				    	
				    	int countSum_tDBOutput_13 = 0;
						for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
						
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
				    	System.err.println(errormessage_tDBOutput_13);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_13++;
                if(commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {
                if ((batchSize_tDBOutput_13 > 0) && (batchSizeCounter_tDBOutput_13 > 0)) {
                try {
                		int countSum_tDBOutput_13 = 0;
                		    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
            	    	
            	    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
            	    	
                batchSizeCounter_tDBOutput_13 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_13){
			    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
			    	String errormessage_tDBOutput_13;
					if (ne_tDBOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
						errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
					}else{
						errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
					}
			    	
			    	int countSum_tDBOutput_13 = 0;
					for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
					
			    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
			    	
			    	System.err.println(errormessage_tDBOutput_13);
			    	
				}
            }
                	conn_tDBOutput_13.commit();
                	
                	commitCounter_tDBOutput_13=0;
                }

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tLogRow_15 main ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_15 = new StringBuilder();




   				
	    		if(row31.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row31.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row31.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row31.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row31.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row31.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row31.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row31.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_15 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_15);
                    }
                    consoleOut_tLogRow_15.println(strBuffer_tLogRow_15.toString());
                    consoleOut_tLogRow_15.flush();
                    nb_line_tLogRow_15++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_15++;

/**
 * [tLogRow_15 main ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "vmp_drugform_ins"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_17 end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

	}
}finally{
	if (rs_tDBInput_17 != null) {
		rs_tDBInput_17.close();
	}
	if (stmt_tDBInput_17 != null) {
		stmt_tDBInput_17.close();
	}
	if(conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {
		
			conn_tDBInput_17.commit();
			
		
			conn_tDBInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_17_NB_LINE",nb_line_tDBInput_17);
 

ok_Hash.put("tDBInput_17", true);
end_Hash.put("tDBInput_17", System.currentTimeMillis());




/**
 * [tDBInput_17 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



	    try {
				int countSum_tDBOutput_13 = 0;
				if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {
						
					for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_13){
	    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
	    	String errormessage_tDBOutput_13;
			if (ne_tDBOutput_13 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
				errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
			}else{
				errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
			}
	    	
	    	int countSum_tDBOutput_13 = 0;
			for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
				countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
			}
			
	    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
	    	
	    	System.err.println(errormessage_tDBOutput_13);
	    	
		}
	    
        if(pstmt_tDBOutput_13 != null) {
        		
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);
			
			conn_tDBOutput_13.commit();
			
		
    	conn_tDBOutput_13 .close();
    	
    	resourceMap.put("finish_tDBOutput_13", true);
    	

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_drugform_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());




/**
 * [tDBOutput_13 end ] stop
 */

	
	/**
	 * [tLogRow_15 end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	


//////
//////
globalMap.put("tLogRow_15_NB_LINE",nb_line_tLogRow_15);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tLogRow_15", true);
end_Hash.put("tLogRow_15", System.currentTimeMillis());




/**
 * [tLogRow_15 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row28"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_13") == null){
            java.sql.Connection ctn_tDBOutput_13 = null;
            if((ctn_tDBOutput_13 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_13")) != null){
                try {
                    ctn_tDBOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_13) {
                    String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :" + sqlEx_tDBOutput_13.getMessage();
                    System.err.println(errorMessage_tDBOutput_13);
                }
            }
        }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */

	
	/**
	 * [tLogRow_15 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.vpid = this.vpid;
	            other.formcd = this.formcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.formcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.formcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tAdvancedHash_row28 = 0;
		

			   		// connection name:row28
			   		// source node:tDBInput_18 - inputs:(after_tDBInput_17) outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_9 - inputs:(row27,row28) outputs:(vmp_drugform_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tDBInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_18", false);
		start_Hash.put("tDBInput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_18";

	
		int tos_count_tDBInput_18 = 0;
		
	
    
	
		    int nb_line_tDBInput_18 = 0;
		    java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_18 = java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_18 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;
				
				String url_tDBInput_18 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_18 = java.sql.DriverManager.getConnection(url_tDBInput_18,dbUser_tDBInput_18,dbPwd_tDBInput_18);
		        
				conn_tDBInput_18.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();

		    String dbquery_tDBInput_18 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\".\"formcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\"";
			

            	globalMap.put("tDBInput_18_QUERY",dbquery_tDBInput_18);
		    java.sql.ResultSet rs_tDBInput_18 = null;

		    try {
		    	rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
		    	int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

		    String tmpContent_tDBInput_18 = null;
		    
		    
		    while (rs_tDBInput_18.next()) {
		        nb_line_tDBInput_18++;
		        
							if(colQtyInRs_tDBInput_18 < 1) {
								row28.vpid = null;
							} else {
	                         		
        	row28.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_18, 1, false);
		                    }
							if(colQtyInRs_tDBInput_18 < 2) {
								row28.formcd = null;
							} else {
	                         		
        	row28.formcd = routines.system.JDBCUtil.getString(rs_tDBInput_18, 2, false);
		                    }
							if(colQtyInRs_tDBInput_18 < 3) {
								row28.col_val_hash = null;
							} else {
		                          
            row28.col_val_hash = rs_tDBInput_18.getObject(3);
            if(rs_tDBInput_18.wasNull()){
                    row28.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_18 begin ] stop
 */
	
	/**
	 * [tDBInput_18 main ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 


	tos_count_tDBInput_18++;

/**
 * [tDBInput_18 main ] stop
 */
	
	/**
	 * [tDBInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.vpid = row28.vpid;
				
				row28_HashRow.formcd = row28.formcd;
				
				row28_HashRow.col_val_hash = row28.col_val_hash;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_18 end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

	}
}finally{
	if (rs_tDBInput_18 != null) {
		rs_tDBInput_18.close();
	}
	if (stmt_tDBInput_18 != null) {
		stmt_tDBInput_18.close();
	}
	if(conn_tDBInput_18 != null && !conn_tDBInput_18.isClosed()) {
		
			conn_tDBInput_18.commit();
			
		
			conn_tDBInput_18.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_18_NB_LINE",nb_line_tDBInput_18);
 

ok_Hash.put("tDBInput_18", true);
end_Hash.put("tDBInput_18", System.currentTimeMillis());




/**
 * [tDBInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

tHash_Lookup_row28.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class drugform_delStruct implements routines.system.IPersistableRow<drugform_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(drugform_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_20Struct implements routines.system.IPersistableRow<after_tDBInput_20Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_19Process(globalMap);

		row33Struct row33 = new row33Struct();
drugform_delStruct drugform_del = new drugform_delStruct();
row35Struct row35 = new row35Struct();






	
	/**
	 * [tLogRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_17", false);
		start_Hash.put("tLogRow_17", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tLogRow_17 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_17 = "|";
		java.io.PrintStream consoleOut_tLogRow_17 = null;	

 		StringBuilder strBuffer_tLogRow_17 = null;
		int nb_line_tLogRow_17 = 0;
///////////////////////    			



 



/**
 * [tLogRow_17 begin ] stop
 */



	
	/**
	 * [tDBOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_15", false);
		start_Hash.put("tDBOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"drugform_del");
					}
				
		int tos_count_tDBOutput_15 = 0;
		





String dbschema_tDBOutput_15 = null;
	dbschema_tDBOutput_15 = context.dmd_db_schema;
	

String tableName_tDBOutput_15 = null;
if(dbschema_tDBOutput_15 == null || dbschema_tDBOutput_15.trim().length() == 0) {
	tableName_tDBOutput_15 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_15 = 0;
int nb_line_update_tDBOutput_15 = 0;
int nb_line_inserted_tDBOutput_15 = 0;
int nb_line_deleted_tDBOutput_15 = 0;
int nb_line_rejected_tDBOutput_15 = 0;

int deletedCount_tDBOutput_15=0;
int updatedCount_tDBOutput_15=0;
int insertedCount_tDBOutput_15=0;
int rejectedCount_tDBOutput_15=0;

boolean whetherReject_tDBOutput_15 = false;

java.sql.Connection conn_tDBOutput_15 = null;
String dbUser_tDBOutput_15 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_15 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_15 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_15 = context.dmd_db_password; 

    String dbPwd_tDBOutput_15 = decryptedPassword_tDBOutput_15;

    conn_tDBOutput_15 = java.sql.DriverManager.getConnection(url_tDBOutput_15,dbUser_tDBOutput_15,dbPwd_tDBOutput_15);
	
	resourceMap.put("conn_tDBOutput_15", conn_tDBOutput_15);
        conn_tDBOutput_15.setAutoCommit(false);
        int commitEvery_tDBOutput_15 = 10000;
        int commitCounter_tDBOutput_15 = 0;


   int batchSize_tDBOutput_15 = 10000;
   int batchSizeCounter_tDBOutput_15=0;

int count_tDBOutput_15=0;
	    String insert_tDBOutput_15 = "INSERT INTO \"" + tableName_tDBOutput_15 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15.prepareStatement(insert_tDBOutput_15);
	    resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);
	    

 



/**
 * [tDBOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
drugform_delStruct drugform_del_tmp = new drugform_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_20", false);
		start_Hash.put("tDBInput_20", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_20";

	
		int tos_count_tDBInput_20 = 0;
		
	
    
	
		    int nb_line_tDBInput_20 = 0;
		    java.sql.Connection conn_tDBInput_20 = null;
				String driverClass_tDBInput_20 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_20 = java.lang.Class.forName(driverClass_tDBInput_20);
				String dbUser_tDBInput_20 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_20 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_20 = decryptedPassword_tDBInput_20;
				
				String url_tDBInput_20 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_20 = java.sql.DriverManager.getConnection(url_tDBInput_20,dbUser_tDBInput_20,dbPwd_tDBInput_20);
		        
				conn_tDBInput_20.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_20 = conn_tDBInput_20.createStatement();

		    String dbquery_tDBInput_20 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\".\"formcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugform\"";
			

            	globalMap.put("tDBInput_20_QUERY",dbquery_tDBInput_20);
		    java.sql.ResultSet rs_tDBInput_20 = null;

		    try {
		    	rs_tDBInput_20 = stmt_tDBInput_20.executeQuery(dbquery_tDBInput_20);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_20 = rs_tDBInput_20.getMetaData();
		    	int colQtyInRs_tDBInput_20 = rsmd_tDBInput_20.getColumnCount();

		    String tmpContent_tDBInput_20 = null;
		    
		    
		    while (rs_tDBInput_20.next()) {
		        nb_line_tDBInput_20++;
		        
							if(colQtyInRs_tDBInput_20 < 1) {
								row33.vpid = null;
							} else {
	                         		
        	row33.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_20, 1, false);
		                    }
							if(colQtyInRs_tDBInput_20 < 2) {
								row33.formcd = null;
							} else {
	                         		
        	row33.formcd = routines.system.JDBCUtil.getString(rs_tDBInput_20, 2, false);
		                    }
							if(colQtyInRs_tDBInput_20 < 3) {
								row33.col_val_hash = null;
							} else {
		                          
            row33.col_val_hash = rs_tDBInput_20.getObject(3);
            if(rs_tDBInput_20.wasNull()){
                    row33.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_20 begin ] stop
 */
	
	/**
	 * [tDBInput_20 main ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 


	tos_count_tDBInput_20++;

/**
 * [tDBInput_20 main ] stop
 */
	
	/**
	 * [tDBInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row34HashKey.vpid = row33.vpid ;
                        		    		
                        		    		    row34HashKey.col_val_hash = row33.col_val_hash ;
                        		    		

								
		                        	row34HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row34.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_10 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row34 != null && tHash_Lookup_row34.getCount(row34HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.vpid = '" + row34HashKey.vpid + "', row34.col_val_hash = '" + row34HashKey.col_val_hash + "'");
								} // G 071
							

							row34Struct row34 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								 
							
							
								if (tHash_Lookup_row34 !=null && tHash_Lookup_row34.hasNext()) { // G 099
								
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							
							
								} // G 099
							
							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

drugform_del = null;

if(!rejectedInnerJoin_tMap_10 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'drugform_del'
// # Filter conditions 
if( rejectedInnerJoin_tMap_10 ) {
drugform_del_tmp.dmd_id = row33.vpid ;
drugform_del_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
drugform_del_tmp.dmd_entity_name = "dmd_vmp_drugform";
drugform_del_tmp.row_action = "d";
drugform_del = drugform_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "drugform_del"
if(drugform_del != null) { 



	
	/**
	 * [tDBOutput_15 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"drugform_del");
					}
					



            row35 = null;
        whetherReject_tDBOutput_15 = false;
                    if(drugform_del.dmd_id == null) {
pstmt_tDBOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(1, drugform_del.dmd_id);
}

                    if(drugform_del.sync_process_id == null) {
pstmt_tDBOutput_15.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(2, drugform_del.sync_process_id);
}

                    if(drugform_del.dmd_entity_name == null) {
pstmt_tDBOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(3, drugform_del.dmd_entity_name);
}

                    if(drugform_del.row_action == null) {
pstmt_tDBOutput_15.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(4, drugform_del.row_action);
}

			
    		pstmt_tDBOutput_15.addBatch();
    		nb_line_tDBOutput_15++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_15++;
    		  
            if(!whetherReject_tDBOutput_15) {
                            row35 = new row35Struct();
                                row35.dmd_id = drugform_del.dmd_id;
                                row35.sync_process_id = drugform_del.sync_process_id;
                                row35.dmd_entity_name = drugform_del.dmd_entity_name;
                                row35.row_action = drugform_del.row_action;
            }
    			if ((batchSize_tDBOutput_15 > 0) && (batchSize_tDBOutput_15 <= batchSizeCounter_tDBOutput_15)) {
                try {
						int countSum_tDBOutput_15 = 0;
						    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
				    	
				    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
            	    	batchSizeCounter_tDBOutput_15 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_15){
				    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
				    	String errormessage_tDBOutput_15;
						if (ne_tDBOutput_15 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
							errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
						}else{
							errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
						}
				    	
				    	int countSum_tDBOutput_15 = 0;
						for(int countEach_tDBOutput_15: e_tDBOutput_15.getUpdateCounts()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
						
				    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
				    	System.err.println(errormessage_tDBOutput_15);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_15++;
                if(commitEvery_tDBOutput_15 <= commitCounter_tDBOutput_15) {
                if ((batchSize_tDBOutput_15 > 0) && (batchSizeCounter_tDBOutput_15 > 0)) {
                try {
                		int countSum_tDBOutput_15 = 0;
                		    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
            	    	
            	    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
            	    	
                batchSizeCounter_tDBOutput_15 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_15){
			    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
			    	String errormessage_tDBOutput_15;
					if (ne_tDBOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
						errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
					}else{
						errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
					}
			    	
			    	int countSum_tDBOutput_15 = 0;
					for(int countEach_tDBOutput_15: e_tDBOutput_15.getUpdateCounts()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}
					
			    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
			    	
			    	System.err.println(errormessage_tDBOutput_15);
			    	
				}
            }
                	conn_tDBOutput_15.commit();
                	
                	commitCounter_tDBOutput_15=0;
                }

 


	tos_count_tDBOutput_15++;

/**
 * [tDBOutput_15 main ] stop
 */
	
	/**
	 * [tDBOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tLogRow_17 main ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_17 = new StringBuilder();




   				
	    		if(row35.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row35.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row35.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row35.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row35.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row35.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row35.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row35.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_17 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_17);
                    }
                    consoleOut_tLogRow_17.println(strBuffer_tLogRow_17.toString());
                    consoleOut_tLogRow_17.flush();
                    nb_line_tLogRow_17++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_17++;

/**
 * [tLogRow_17 main ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tDBOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_end ] stop
 */

} // End of branch "drugform_del"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_20 end ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

	}
}finally{
	if (rs_tDBInput_20 != null) {
		rs_tDBInput_20.close();
	}
	if (stmt_tDBInput_20 != null) {
		stmt_tDBInput_20.close();
	}
	if(conn_tDBInput_20 != null && !conn_tDBInput_20.isClosed()) {
		
			conn_tDBInput_20.commit();
			
		
			conn_tDBInput_20.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_20_NB_LINE",nb_line_tDBInput_20);
 

ok_Hash.put("tDBInput_20", true);
end_Hash.put("tDBInput_20", System.currentTimeMillis());




/**
 * [tDBInput_20 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_15 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



	    try {
				int countSum_tDBOutput_15 = 0;
				if (pstmt_tDBOutput_15 != null && batchSizeCounter_tDBOutput_15 > 0) {
						
					for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_15){
	    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
	    	String errormessage_tDBOutput_15;
			if (ne_tDBOutput_15 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
				errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
			}else{
				errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
			}
	    	
	    	int countSum_tDBOutput_15 = 0;
			for(int countEach_tDBOutput_15: e_tDBOutput_15.getUpdateCounts()) {
				countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
			}
			
	    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
	    	
	    	System.err.println(errormessage_tDBOutput_15);
	    	
		}
	    
        if(pstmt_tDBOutput_15 != null) {
        		
            pstmt_tDBOutput_15.close();
            resourceMap.remove("pstmt_tDBOutput_15");
        }
    resourceMap.put("statementClosed_tDBOutput_15", true);
			
			conn_tDBOutput_15.commit();
			
		
    	conn_tDBOutput_15 .close();
    	
    	resourceMap.put("finish_tDBOutput_15", true);
    	

	nb_line_deleted_tDBOutput_15=nb_line_deleted_tDBOutput_15+ deletedCount_tDBOutput_15;
	nb_line_update_tDBOutput_15=nb_line_update_tDBOutput_15 + updatedCount_tDBOutput_15;
	nb_line_inserted_tDBOutput_15=nb_line_inserted_tDBOutput_15 + insertedCount_tDBOutput_15;
	nb_line_rejected_tDBOutput_15=nb_line_rejected_tDBOutput_15 + rejectedCount_tDBOutput_15;
	
        globalMap.put("tDBOutput_15_NB_LINE",nb_line_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_UPDATED",nb_line_update_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_DELETED",nb_line_deleted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_15);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"drugform_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_15", true);
end_Hash.put("tDBOutput_15", System.currentTimeMillis());




/**
 * [tDBOutput_15 end ] stop
 */

	
	/**
	 * [tLogRow_17 end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	


//////
//////
globalMap.put("tLogRow_17_NB_LINE",nb_line_tLogRow_17);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tLogRow_17", true);
end_Hash.put("tLogRow_17", System.currentTimeMillis());




/**
 * [tLogRow_17 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_20 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
                if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_15")) != null) {
                    pstmtToClose_tDBOutput_15.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_15") == null){
            java.sql.Connection ctn_tDBOutput_15 = null;
            if((ctn_tDBOutput_15 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_15")) != null){
                try {
                    ctn_tDBOutput_15.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_15) {
                    String errorMessage_tDBOutput_15 = "failed to close the connection in tDBOutput_15 :" + sqlEx_tDBOutput_15.getMessage();
                    System.err.println(errorMessage_tDBOutput_15);
                }
            }
        }
    }
 



/**
 * [tDBOutput_15 finally ] stop
 */

	
	/**
	 * [tLogRow_17 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row34Struct other = (row34Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row34Struct other) {

		other.vpid = this.vpid;
	            other.formcd = this.formcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row34Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.formcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.formcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tAdvancedHash_row34 = 0;
		

			   		// connection name:row34
			   		// source node:tDBInput_19 - inputs:(after_tDBInput_20) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_10 - inputs:(row33,row34) outputs:(drugform_del)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tDBInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_19", false);
		start_Hash.put("tDBInput_19", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_19";

	
		int tos_count_tDBInput_19 = 0;
		
	
    
	
		    int nb_line_tDBInput_19 = 0;
		    java.sql.Connection conn_tDBInput_19 = null;
				String driverClass_tDBInput_19 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_19 = java.lang.Class.forName(driverClass_tDBInput_19);
				String dbUser_tDBInput_19 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_19 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_19 = decryptedPassword_tDBInput_19;
				
				String url_tDBInput_19 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_19 = java.sql.DriverManager.getConnection(url_tDBInput_19,dbUser_tDBInput_19,dbPwd_tDBInput_19);
		        
				conn_tDBInput_19.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_19 = conn_tDBInput_19.createStatement();

		    String dbquery_tDBInput_19 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"formcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\"";
			

            	globalMap.put("tDBInput_19_QUERY",dbquery_tDBInput_19);
		    java.sql.ResultSet rs_tDBInput_19 = null;

		    try {
		    	rs_tDBInput_19 = stmt_tDBInput_19.executeQuery(dbquery_tDBInput_19);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_19 = rs_tDBInput_19.getMetaData();
		    	int colQtyInRs_tDBInput_19 = rsmd_tDBInput_19.getColumnCount();

		    String tmpContent_tDBInput_19 = null;
		    
		    
		    while (rs_tDBInput_19.next()) {
		        nb_line_tDBInput_19++;
		        
							if(colQtyInRs_tDBInput_19 < 1) {
								row34.vpid = null;
							} else {
	                         		
        	row34.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_19, 1, false);
		                    }
							if(colQtyInRs_tDBInput_19 < 2) {
								row34.formcd = null;
							} else {
	                         		
        	row34.formcd = routines.system.JDBCUtil.getString(rs_tDBInput_19, 2, false);
		                    }
							if(colQtyInRs_tDBInput_19 < 3) {
								row34.col_val_hash = null;
							} else {
		                          
            row34.col_val_hash = rs_tDBInput_19.getObject(3);
            if(rs_tDBInput_19.wasNull()){
                    row34.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_19 begin ] stop
 */
	
	/**
	 * [tDBInput_19 main ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 


	tos_count_tDBInput_19++;

/**
 * [tDBInput_19 main ] stop
 */
	
	/**
	 * [tDBInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 



/**
 * [tDBInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.vpid = row34.vpid;
				
				row34_HashRow.formcd = row34.formcd;
				
				row34_HashRow.col_val_hash = row34.col_val_hash;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 



/**
 * [tDBInput_19 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_19 end ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

	}
}finally{
	if (rs_tDBInput_19 != null) {
		rs_tDBInput_19.close();
	}
	if (stmt_tDBInput_19 != null) {
		stmt_tDBInput_19.close();
	}
	if(conn_tDBInput_19 != null && !conn_tDBInput_19.isClosed()) {
		
			conn_tDBInput_19.commit();
			
		
			conn_tDBInput_19.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_19_NB_LINE",nb_line_tDBInput_19);
 

ok_Hash.put("tDBInput_19", true);
end_Hash.put("tDBInput_19", System.currentTimeMillis());




/**
 * [tDBInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

tHash_Lookup_row34.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_19 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 



/**
 * [tDBInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class drugroute_insStruct implements routines.system.IPersistableRow<drugroute_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(drugroute_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_22Struct implements routines.system.IPersistableRow<after_tDBInput_22Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_21Process(globalMap);

		row36Struct row36 = new row36Struct();
drugroute_insStruct drugroute_ins = new drugroute_insStruct();
row38Struct row38 = new row38Struct();






	
	/**
	 * [tLogRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_19", false);
		start_Hash.put("tLogRow_19", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tLogRow_19 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_19 = "|";
		java.io.PrintStream consoleOut_tLogRow_19 = null;	

 		StringBuilder strBuffer_tLogRow_19 = null;
		int nb_line_tLogRow_19 = 0;
///////////////////////    			



 



/**
 * [tLogRow_19 begin ] stop
 */



	
	/**
	 * [tDBOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_16", false);
		start_Hash.put("tDBOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"drugroute_ins");
					}
				
		int tos_count_tDBOutput_16 = 0;
		





String dbschema_tDBOutput_16 = null;
	dbschema_tDBOutput_16 = context.dmd_db_schema;
	

String tableName_tDBOutput_16 = null;
if(dbschema_tDBOutput_16 == null || dbschema_tDBOutput_16.trim().length() == 0) {
	tableName_tDBOutput_16 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_16 = dbschema_tDBOutput_16 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_16 = 0;
int nb_line_update_tDBOutput_16 = 0;
int nb_line_inserted_tDBOutput_16 = 0;
int nb_line_deleted_tDBOutput_16 = 0;
int nb_line_rejected_tDBOutput_16 = 0;

int deletedCount_tDBOutput_16=0;
int updatedCount_tDBOutput_16=0;
int insertedCount_tDBOutput_16=0;
int rejectedCount_tDBOutput_16=0;

boolean whetherReject_tDBOutput_16 = false;

java.sql.Connection conn_tDBOutput_16 = null;
String dbUser_tDBOutput_16 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_16 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_16 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_16 = context.dmd_db_password; 

    String dbPwd_tDBOutput_16 = decryptedPassword_tDBOutput_16;

    conn_tDBOutput_16 = java.sql.DriverManager.getConnection(url_tDBOutput_16,dbUser_tDBOutput_16,dbPwd_tDBOutput_16);
	
	resourceMap.put("conn_tDBOutput_16", conn_tDBOutput_16);
        conn_tDBOutput_16.setAutoCommit(false);
        int commitEvery_tDBOutput_16 = 10000;
        int commitCounter_tDBOutput_16 = 0;


   int batchSize_tDBOutput_16 = 10000;
   int batchSizeCounter_tDBOutput_16=0;

int count_tDBOutput_16=0;
	    String insert_tDBOutput_16 = "INSERT INTO \"" + tableName_tDBOutput_16 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_16 = conn_tDBOutput_16.prepareStatement(insert_tDBOutput_16);
	    resourceMap.put("pstmt_tDBOutput_16", pstmt_tDBOutput_16);
	    

 



/**
 * [tDBOutput_16 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
					globalMap.get( "tHash_Lookup_row37" ))
					;					
					
	

row37Struct row37HashKey = new row37Struct();
row37Struct row37Default = new row37Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
drugroute_insStruct drugroute_ins_tmp = new drugroute_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tDBInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_22", false);
		start_Hash.put("tDBInput_22", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_22";

	
		int tos_count_tDBInput_22 = 0;
		
	
    
	
		    int nb_line_tDBInput_22 = 0;
		    java.sql.Connection conn_tDBInput_22 = null;
				String driverClass_tDBInput_22 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_22 = java.lang.Class.forName(driverClass_tDBInput_22);
				String dbUser_tDBInput_22 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_22 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_22 = decryptedPassword_tDBInput_22;
				
				String url_tDBInput_22 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_22 = java.sql.DriverManager.getConnection(url_tDBInput_22,dbUser_tDBInput_22,dbPwd_tDBInput_22);
		        
				conn_tDBInput_22.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_22 = conn_tDBInput_22.createStatement();

		    String dbquery_tDBInput_22 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"routecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\"";
			

            	globalMap.put("tDBInput_22_QUERY",dbquery_tDBInput_22);
		    java.sql.ResultSet rs_tDBInput_22 = null;

		    try {
		    	rs_tDBInput_22 = stmt_tDBInput_22.executeQuery(dbquery_tDBInput_22);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_22 = rs_tDBInput_22.getMetaData();
		    	int colQtyInRs_tDBInput_22 = rsmd_tDBInput_22.getColumnCount();

		    String tmpContent_tDBInput_22 = null;
		    
		    
		    while (rs_tDBInput_22.next()) {
		        nb_line_tDBInput_22++;
		        
							if(colQtyInRs_tDBInput_22 < 1) {
								row36.vpid = null;
							} else {
	                         		
        	row36.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_22, 1, false);
		                    }
							if(colQtyInRs_tDBInput_22 < 2) {
								row36.routecd = null;
							} else {
	                         		
        	row36.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_22, 2, false);
		                    }
							if(colQtyInRs_tDBInput_22 < 3) {
								row36.col_val_hash = null;
							} else {
		                          
            row36.col_val_hash = rs_tDBInput_22.getObject(3);
            if(rs_tDBInput_22.wasNull()){
                    row36.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_22 begin ] stop
 */
	
	/**
	 * [tDBInput_22 main ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 


	tos_count_tDBInput_22++;

/**
 * [tDBInput_22 main ] stop
 */
	
	/**
	 * [tDBInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 



/**
 * [tDBInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row37" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow37 = false;
       		  	    	
       		  	    	
 							row37Struct row37ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row37HashKey.vpid = row36.vpid ;
                        		    		
                        		    		    row37HashKey.col_val_hash = row36.col_val_hash ;
                        		    		

								
		                        	row37HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row37.lookup( row37HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row37.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row37 != null && tHash_Lookup_row37.getCount(row37HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row37' and it contains more one result from keys :  row37.vpid = '" + row37HashKey.vpid + "', row37.col_val_hash = '" + row37HashKey.col_val_hash + "'");
								} // G 071
							

							row37Struct row37 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row37Struct fromLookup_row37 = null;
							row37 = row37Default;
										 
							
								 
							
							
								if (tHash_Lookup_row37 !=null && tHash_Lookup_row37.hasNext()) { // G 099
								
							
								
								fromLookup_row37 = tHash_Lookup_row37.next();

							
							
								} // G 099
							
							

							if(fromLookup_row37 != null) {
								row37 = fromLookup_row37;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

drugroute_ins = null;

if(!rejectedInnerJoin_tMap_11 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'drugroute_ins'
// # Filter conditions 
if( rejectedInnerJoin_tMap_11 ) {
drugroute_ins_tmp.dmd_id = row36.vpid ;
drugroute_ins_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
drugroute_ins_tmp.dmd_entity_name = "dmd_vmp_drugroute";
drugroute_ins_tmp.row_action = "i";
drugroute_ins = drugroute_ins_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "drugroute_ins"
if(drugroute_ins != null) { 



	
	/**
	 * [tDBOutput_16 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"drugroute_ins");
					}
					



            row38 = null;
        whetherReject_tDBOutput_16 = false;
                    if(drugroute_ins.dmd_id == null) {
pstmt_tDBOutput_16.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(1, drugroute_ins.dmd_id);
}

                    if(drugroute_ins.sync_process_id == null) {
pstmt_tDBOutput_16.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(2, drugroute_ins.sync_process_id);
}

                    if(drugroute_ins.dmd_entity_name == null) {
pstmt_tDBOutput_16.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(3, drugroute_ins.dmd_entity_name);
}

                    if(drugroute_ins.row_action == null) {
pstmt_tDBOutput_16.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(4, drugroute_ins.row_action);
}

			
    		pstmt_tDBOutput_16.addBatch();
    		nb_line_tDBOutput_16++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_16++;
    		  
            if(!whetherReject_tDBOutput_16) {
                            row38 = new row38Struct();
                                row38.dmd_id = drugroute_ins.dmd_id;
                                row38.sync_process_id = drugroute_ins.sync_process_id;
                                row38.dmd_entity_name = drugroute_ins.dmd_entity_name;
                                row38.row_action = drugroute_ins.row_action;
            }
    			if ((batchSize_tDBOutput_16 > 0) && (batchSize_tDBOutput_16 <= batchSizeCounter_tDBOutput_16)) {
                try {
						int countSum_tDBOutput_16 = 0;
						    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
				    	
				    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
            	    	batchSizeCounter_tDBOutput_16 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_16){
				    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
				    	String errormessage_tDBOutput_16;
						if (ne_tDBOutput_16 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
							errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
						}else{
							errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
						}
				    	
				    	int countSum_tDBOutput_16 = 0;
						for(int countEach_tDBOutput_16: e_tDBOutput_16.getUpdateCounts()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
						
				    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
				    	System.err.println(errormessage_tDBOutput_16);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_16++;
                if(commitEvery_tDBOutput_16 <= commitCounter_tDBOutput_16) {
                if ((batchSize_tDBOutput_16 > 0) && (batchSizeCounter_tDBOutput_16 > 0)) {
                try {
                		int countSum_tDBOutput_16 = 0;
                		    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
            	    	
            	    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
            	    	
                batchSizeCounter_tDBOutput_16 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_16){
			    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
			    	String errormessage_tDBOutput_16;
					if (ne_tDBOutput_16 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
						errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
					}else{
						errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
					}
			    	
			    	int countSum_tDBOutput_16 = 0;
					for(int countEach_tDBOutput_16: e_tDBOutput_16.getUpdateCounts()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}
					
			    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
			    	
			    	System.err.println(errormessage_tDBOutput_16);
			    	
				}
            }
                	conn_tDBOutput_16.commit();
                	
                	commitCounter_tDBOutput_16=0;
                }

 


	tos_count_tDBOutput_16++;

/**
 * [tDBOutput_16 main ] stop
 */
	
	/**
	 * [tDBOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_begin ] stop
 */
// Start of branch "row38"
if(row38 != null) { 



	
	/**
	 * [tLogRow_19 main ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row38");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_19 = new StringBuilder();




   				
	    		if(row38.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row38.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row38.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row38.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row38.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row38.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row38.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row38.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_19 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_19 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_19);
                    }
                    consoleOut_tLogRow_19.println(strBuffer_tLogRow_19.toString());
                    consoleOut_tLogRow_19.flush();
                    nb_line_tLogRow_19++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_19++;

/**
 * [tLogRow_19 main ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_end ] stop
 */

} // End of branch "row38"




	
	/**
	 * [tDBOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_end ] stop
 */

} // End of branch "drugroute_ins"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 



/**
 * [tDBInput_22 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_22 end ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

	}
}finally{
	if (rs_tDBInput_22 != null) {
		rs_tDBInput_22.close();
	}
	if (stmt_tDBInput_22 != null) {
		stmt_tDBInput_22.close();
	}
	if(conn_tDBInput_22 != null && !conn_tDBInput_22.isClosed()) {
		
			conn_tDBInput_22.commit();
			
		
			conn_tDBInput_22.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_22_NB_LINE",nb_line_tDBInput_22);
 

ok_Hash.put("tDBInput_22", true);
end_Hash.put("tDBInput_22", System.currentTimeMillis());




/**
 * [tDBInput_22 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row37 != null) {
						tHash_Lookup_row37.endGet();
					}
					globalMap.remove( "tHash_Lookup_row37" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_16 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



	    try {
				int countSum_tDBOutput_16 = 0;
				if (pstmt_tDBOutput_16 != null && batchSizeCounter_tDBOutput_16 > 0) {
						
					for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_16){
	    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
	    	String errormessage_tDBOutput_16;
			if (ne_tDBOutput_16 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
				errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
			}else{
				errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
			}
	    	
	    	int countSum_tDBOutput_16 = 0;
			for(int countEach_tDBOutput_16: e_tDBOutput_16.getUpdateCounts()) {
				countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
			}
			
	    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
	    	
	    	System.err.println(errormessage_tDBOutput_16);
	    	
		}
	    
        if(pstmt_tDBOutput_16 != null) {
        		
            pstmt_tDBOutput_16.close();
            resourceMap.remove("pstmt_tDBOutput_16");
        }
    resourceMap.put("statementClosed_tDBOutput_16", true);
			
			conn_tDBOutput_16.commit();
			
		
    	conn_tDBOutput_16 .close();
    	
    	resourceMap.put("finish_tDBOutput_16", true);
    	

	nb_line_deleted_tDBOutput_16=nb_line_deleted_tDBOutput_16+ deletedCount_tDBOutput_16;
	nb_line_update_tDBOutput_16=nb_line_update_tDBOutput_16 + updatedCount_tDBOutput_16;
	nb_line_inserted_tDBOutput_16=nb_line_inserted_tDBOutput_16 + insertedCount_tDBOutput_16;
	nb_line_rejected_tDBOutput_16=nb_line_rejected_tDBOutput_16 + rejectedCount_tDBOutput_16;
	
        globalMap.put("tDBOutput_16_NB_LINE",nb_line_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_UPDATED",nb_line_update_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_DELETED",nb_line_deleted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_16);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"drugroute_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_16", true);
end_Hash.put("tDBOutput_16", System.currentTimeMillis());




/**
 * [tDBOutput_16 end ] stop
 */

	
	/**
	 * [tLogRow_19 end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	


//////
//////
globalMap.put("tLogRow_19_NB_LINE",nb_line_tLogRow_19);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tLogRow_19", true);
end_Hash.put("tLogRow_19", System.currentTimeMillis());




/**
 * [tLogRow_19 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row37"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_22 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 



/**
 * [tDBInput_22 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_16 = null;
                if ((pstmtToClose_tDBOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_16")) != null) {
                    pstmtToClose_tDBOutput_16.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_16") == null){
            java.sql.Connection ctn_tDBOutput_16 = null;
            if((ctn_tDBOutput_16 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_16")) != null){
                try {
                    ctn_tDBOutput_16.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_16) {
                    String errorMessage_tDBOutput_16 = "failed to close the connection in tDBOutput_16 :" + sqlEx_tDBOutput_16.getMessage();
                    System.err.println(errorMessage_tDBOutput_16);
                }
            }
        }
    }
 



/**
 * [tDBOutput_16 finally ] stop
 */

	
	/**
	 * [tLogRow_19 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableComparableLookupRow<row37Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row37Struct other = (row37Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row37Struct other) {

		other.vpid = this.vpid;
	            other.routecd = this.routecd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row37Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.routecd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.routecd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();




	
	/**
	 * [tAdvancedHash_row37 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row37", false);
		start_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row37";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tAdvancedHash_row37 = 0;
		

			   		// connection name:row37
			   		// source node:tDBInput_21 - inputs:(after_tDBInput_22) outputs:(row37,row37) | target node:tAdvancedHash_row37 - inputs:(row37) outputs:()
			   		// linked node: tMap_11 - inputs:(row36,row37) outputs:(drugroute_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row37 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row37Struct>getLookup(matchingModeEnum_row37);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row37", tHash_Lookup_row37);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row37 begin ] stop
 */



	
	/**
	 * [tDBInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_21", false);
		start_Hash.put("tDBInput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_21";

	
		int tos_count_tDBInput_21 = 0;
		
	
    
	
		    int nb_line_tDBInput_21 = 0;
		    java.sql.Connection conn_tDBInput_21 = null;
				String driverClass_tDBInput_21 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_21 = java.lang.Class.forName(driverClass_tDBInput_21);
				String dbUser_tDBInput_21 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_21 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_21 = decryptedPassword_tDBInput_21;
				
				String url_tDBInput_21 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_21 = java.sql.DriverManager.getConnection(url_tDBInput_21,dbUser_tDBInput_21,dbPwd_tDBInput_21);
		        
				conn_tDBInput_21.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_21 = conn_tDBInput_21.createStatement();

		    String dbquery_tDBInput_21 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\".\"routecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\"";
			

            	globalMap.put("tDBInput_21_QUERY",dbquery_tDBInput_21);
		    java.sql.ResultSet rs_tDBInput_21 = null;

		    try {
		    	rs_tDBInput_21 = stmt_tDBInput_21.executeQuery(dbquery_tDBInput_21);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_21 = rs_tDBInput_21.getMetaData();
		    	int colQtyInRs_tDBInput_21 = rsmd_tDBInput_21.getColumnCount();

		    String tmpContent_tDBInput_21 = null;
		    
		    
		    while (rs_tDBInput_21.next()) {
		        nb_line_tDBInput_21++;
		        
							if(colQtyInRs_tDBInput_21 < 1) {
								row37.vpid = null;
							} else {
	                         		
        	row37.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_21, 1, false);
		                    }
							if(colQtyInRs_tDBInput_21 < 2) {
								row37.routecd = null;
							} else {
	                         		
        	row37.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_21, 2, false);
		                    }
							if(colQtyInRs_tDBInput_21 < 3) {
								row37.col_val_hash = null;
							} else {
		                          
            row37.col_val_hash = rs_tDBInput_21.getObject(3);
            if(rs_tDBInput_21.wasNull()){
                    row37.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_21 begin ] stop
 */
	
	/**
	 * [tDBInput_21 main ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 


	tos_count_tDBInput_21++;

/**
 * [tDBInput_21 main ] stop
 */
	
	/**
	 * [tDBInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 



/**
 * [tDBInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					


			   
			   

					row37Struct row37_HashRow = new row37Struct();
		   	   	   
				
				row37_HashRow.vpid = row37.vpid;
				
				row37_HashRow.routecd = row37.routecd;
				
				row37_HashRow.col_val_hash = row37.col_val_hash;
				
			tHash_Lookup_row37.put(row37_HashRow);
			
            




 


	tos_count_tAdvancedHash_row37++;

/**
 * [tAdvancedHash_row37 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

 



/**
 * [tAdvancedHash_row37 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row37 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

 



/**
 * [tAdvancedHash_row37 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 



/**
 * [tDBInput_21 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_21 end ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

	}
}finally{
	if (rs_tDBInput_21 != null) {
		rs_tDBInput_21.close();
	}
	if (stmt_tDBInput_21 != null) {
		stmt_tDBInput_21.close();
	}
	if(conn_tDBInput_21 != null && !conn_tDBInput_21.isClosed()) {
		
			conn_tDBInput_21.commit();
			
		
			conn_tDBInput_21.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_21_NB_LINE",nb_line_tDBInput_21);
 

ok_Hash.put("tDBInput_21", true);
end_Hash.put("tDBInput_21", System.currentTimeMillis());




/**
 * [tDBInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

tHash_Lookup_row37.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row37", true);
end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());




/**
 * [tAdvancedHash_row37 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 



/**
 * [tDBInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

 



/**
 * [tAdvancedHash_row37 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_route_delStruct implements routines.system.IPersistableRow<vmp_route_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_route_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_24Struct implements routines.system.IPersistableRow<after_tDBInput_24Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_23Process(globalMap);

		row40Struct row40 = new row40Struct();
vmp_route_delStruct vmp_route_del = new vmp_route_delStruct();
row42Struct row42 = new row42Struct();






	
	/**
	 * [tLogRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_21", false);
		start_Hash.put("tLogRow_21", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tLogRow_21 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_21 = "|";
		java.io.PrintStream consoleOut_tLogRow_21 = null;	

 		StringBuilder strBuffer_tLogRow_21 = null;
		int nb_line_tLogRow_21 = 0;
///////////////////////    			



 



/**
 * [tLogRow_21 begin ] stop
 */



	
	/**
	 * [tDBOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_18", false);
		start_Hash.put("tDBOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_route_del");
					}
				
		int tos_count_tDBOutput_18 = 0;
		





String dbschema_tDBOutput_18 = null;
	dbschema_tDBOutput_18 = context.dmd_db_schema;
	

String tableName_tDBOutput_18 = null;
if(dbschema_tDBOutput_18 == null || dbschema_tDBOutput_18.trim().length() == 0) {
	tableName_tDBOutput_18 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_18 = dbschema_tDBOutput_18 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_18 = 0;
int nb_line_update_tDBOutput_18 = 0;
int nb_line_inserted_tDBOutput_18 = 0;
int nb_line_deleted_tDBOutput_18 = 0;
int nb_line_rejected_tDBOutput_18 = 0;

int deletedCount_tDBOutput_18=0;
int updatedCount_tDBOutput_18=0;
int insertedCount_tDBOutput_18=0;
int rejectedCount_tDBOutput_18=0;

boolean whetherReject_tDBOutput_18 = false;

java.sql.Connection conn_tDBOutput_18 = null;
String dbUser_tDBOutput_18 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_18 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_18 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_18 = context.dmd_db_password; 

    String dbPwd_tDBOutput_18 = decryptedPassword_tDBOutput_18;

    conn_tDBOutput_18 = java.sql.DriverManager.getConnection(url_tDBOutput_18,dbUser_tDBOutput_18,dbPwd_tDBOutput_18);
	
	resourceMap.put("conn_tDBOutput_18", conn_tDBOutput_18);
        conn_tDBOutput_18.setAutoCommit(false);
        int commitEvery_tDBOutput_18 = 10000;
        int commitCounter_tDBOutput_18 = 0;


   int batchSize_tDBOutput_18 = 10000;
   int batchSizeCounter_tDBOutput_18=0;

int count_tDBOutput_18=0;
	    String insert_tDBOutput_18 = "INSERT INTO \"" + tableName_tDBOutput_18 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_18 = conn_tDBOutput_18.prepareStatement(insert_tDBOutput_18);
	    resourceMap.put("pstmt_tDBOutput_18", pstmt_tDBOutput_18);
	    

 



/**
 * [tDBOutput_18 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
					globalMap.get( "tHash_Lookup_row41" ))
					;					
					
	

row41Struct row41HashKey = new row41Struct();
row41Struct row41Default = new row41Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_route_delStruct vmp_route_del_tmp = new vmp_route_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tDBInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_24", false);
		start_Hash.put("tDBInput_24", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_24";

	
		int tos_count_tDBInput_24 = 0;
		
	
    
	
		    int nb_line_tDBInput_24 = 0;
		    java.sql.Connection conn_tDBInput_24 = null;
				String driverClass_tDBInput_24 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_24 = java.lang.Class.forName(driverClass_tDBInput_24);
				String dbUser_tDBInput_24 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_24 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_24 = decryptedPassword_tDBInput_24;
				
				String url_tDBInput_24 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_24 = java.sql.DriverManager.getConnection(url_tDBInput_24,dbUser_tDBInput_24,dbPwd_tDBInput_24);
		        
				conn_tDBInput_24.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_24 = conn_tDBInput_24.createStatement();

		    String dbquery_tDBInput_24 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\".\"routecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_drugroute\"";
			

            	globalMap.put("tDBInput_24_QUERY",dbquery_tDBInput_24);
		    java.sql.ResultSet rs_tDBInput_24 = null;

		    try {
		    	rs_tDBInput_24 = stmt_tDBInput_24.executeQuery(dbquery_tDBInput_24);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_24 = rs_tDBInput_24.getMetaData();
		    	int colQtyInRs_tDBInput_24 = rsmd_tDBInput_24.getColumnCount();

		    String tmpContent_tDBInput_24 = null;
		    
		    
		    while (rs_tDBInput_24.next()) {
		        nb_line_tDBInput_24++;
		        
							if(colQtyInRs_tDBInput_24 < 1) {
								row40.vpid = null;
							} else {
	                         		
        	row40.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_24, 1, false);
		                    }
							if(colQtyInRs_tDBInput_24 < 2) {
								row40.routecd = null;
							} else {
	                         		
        	row40.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_24, 2, false);
		                    }
							if(colQtyInRs_tDBInput_24 < 3) {
								row40.col_val_hash = null;
							} else {
		                          
            row40.col_val_hash = rs_tDBInput_24.getObject(3);
            if(rs_tDBInput_24.wasNull()){
                    row40.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_24 begin ] stop
 */
	
	/**
	 * [tDBInput_24 main ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 


	tos_count_tDBInput_24++;

/**
 * [tDBInput_24 main ] stop
 */
	
	/**
	 * [tDBInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 



/**
 * [tDBInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row40");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row41" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow41 = false;
       		  	    	
       		  	    	
 							row41Struct row41ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    row41HashKey.vpid = row40.vpid ;
                        		    		
                        		    		    row41HashKey.col_val_hash = row40.col_val_hash ;
                        		    		

								
		                        	row41HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row41.lookup( row41HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row41.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_12 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row41 != null && tHash_Lookup_row41.getCount(row41HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row41' and it contains more one result from keys :  row41.vpid = '" + row41HashKey.vpid + "', row41.col_val_hash = '" + row41HashKey.col_val_hash + "'");
								} // G 071
							

							row41Struct row41 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row41Struct fromLookup_row41 = null;
							row41 = row41Default;
										 
							
								 
							
							
								if (tHash_Lookup_row41 !=null && tHash_Lookup_row41.hasNext()) { // G 099
								
							
								
								fromLookup_row41 = tHash_Lookup_row41.next();

							
							
								} // G 099
							
							

							if(fromLookup_row41 != null) {
								row41 = fromLookup_row41;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

vmp_route_del = null;

if(!rejectedInnerJoin_tMap_12 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vmp_route_del'
// # Filter conditions 
if( rejectedInnerJoin_tMap_12 ) {
vmp_route_del_tmp.dmd_id = row40.vpid ;
vmp_route_del_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vmp_route_del_tmp.dmd_entity_name = "dmd_vmp_drugroute";
vmp_route_del_tmp.row_action = "d";
vmp_route_del = vmp_route_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "vmp_route_del"
if(vmp_route_del != null) { 



	
	/**
	 * [tDBOutput_18 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_route_del");
					}
					



            row42 = null;
        whetherReject_tDBOutput_18 = false;
                    if(vmp_route_del.dmd_id == null) {
pstmt_tDBOutput_18.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(1, vmp_route_del.dmd_id);
}

                    if(vmp_route_del.sync_process_id == null) {
pstmt_tDBOutput_18.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(2, vmp_route_del.sync_process_id);
}

                    if(vmp_route_del.dmd_entity_name == null) {
pstmt_tDBOutput_18.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(3, vmp_route_del.dmd_entity_name);
}

                    if(vmp_route_del.row_action == null) {
pstmt_tDBOutput_18.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(4, vmp_route_del.row_action);
}

			
    		pstmt_tDBOutput_18.addBatch();
    		nb_line_tDBOutput_18++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_18++;
    		  
            if(!whetherReject_tDBOutput_18) {
                            row42 = new row42Struct();
                                row42.dmd_id = vmp_route_del.dmd_id;
                                row42.sync_process_id = vmp_route_del.sync_process_id;
                                row42.dmd_entity_name = vmp_route_del.dmd_entity_name;
                                row42.row_action = vmp_route_del.row_action;
            }
    			if ((batchSize_tDBOutput_18 > 0) && (batchSize_tDBOutput_18 <= batchSizeCounter_tDBOutput_18)) {
                try {
						int countSum_tDBOutput_18 = 0;
						    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
				    	
				    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
            	    	batchSizeCounter_tDBOutput_18 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_18){
				    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
				    	String errormessage_tDBOutput_18;
						if (ne_tDBOutput_18 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
							errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
						}else{
							errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
						}
				    	
				    	int countSum_tDBOutput_18 = 0;
						for(int countEach_tDBOutput_18: e_tDBOutput_18.getUpdateCounts()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
						
				    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
				    	System.err.println(errormessage_tDBOutput_18);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_18++;
                if(commitEvery_tDBOutput_18 <= commitCounter_tDBOutput_18) {
                if ((batchSize_tDBOutput_18 > 0) && (batchSizeCounter_tDBOutput_18 > 0)) {
                try {
                		int countSum_tDBOutput_18 = 0;
                		    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
            	    	
            	    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
            	    	
                batchSizeCounter_tDBOutput_18 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_18){
			    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
			    	String errormessage_tDBOutput_18;
					if (ne_tDBOutput_18 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
						errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
					}else{
						errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
					}
			    	
			    	int countSum_tDBOutput_18 = 0;
					for(int countEach_tDBOutput_18: e_tDBOutput_18.getUpdateCounts()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}
					
			    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
			    	
			    	System.err.println(errormessage_tDBOutput_18);
			    	
				}
            }
                	conn_tDBOutput_18.commit();
                	
                	commitCounter_tDBOutput_18=0;
                }

 


	tos_count_tDBOutput_18++;

/**
 * [tDBOutput_18 main ] stop
 */
	
	/**
	 * [tDBOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_begin ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tLogRow_21 main ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_21 = new StringBuilder();




   				
	    		if(row42.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row42.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row42.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row42.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row42.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row42.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row42.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row42.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_21 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_21 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_21);
                    }
                    consoleOut_tLogRow_21.println(strBuffer_tLogRow_21.toString());
                    consoleOut_tLogRow_21.flush();
                    nb_line_tLogRow_21++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_21++;

/**
 * [tLogRow_21 main ] stop
 */
	
	/**
	 * [tLogRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tDBOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_end ] stop
 */

} // End of branch "vmp_route_del"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 



/**
 * [tDBInput_24 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_24 end ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

	}
}finally{
	if (rs_tDBInput_24 != null) {
		rs_tDBInput_24.close();
	}
	if (stmt_tDBInput_24 != null) {
		stmt_tDBInput_24.close();
	}
	if(conn_tDBInput_24 != null && !conn_tDBInput_24.isClosed()) {
		
			conn_tDBInput_24.commit();
			
		
			conn_tDBInput_24.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_24_NB_LINE",nb_line_tDBInput_24);
 

ok_Hash.put("tDBInput_24", true);
end_Hash.put("tDBInput_24", System.currentTimeMillis());




/**
 * [tDBInput_24 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row41 != null) {
						tHash_Lookup_row41.endGet();
					}
					globalMap.remove( "tHash_Lookup_row41" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_18 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



	    try {
				int countSum_tDBOutput_18 = 0;
				if (pstmt_tDBOutput_18 != null && batchSizeCounter_tDBOutput_18 > 0) {
						
					for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_18){
	    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
	    	String errormessage_tDBOutput_18;
			if (ne_tDBOutput_18 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
				errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
			}else{
				errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
			}
	    	
	    	int countSum_tDBOutput_18 = 0;
			for(int countEach_tDBOutput_18: e_tDBOutput_18.getUpdateCounts()) {
				countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
			}
			
	    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
	    	
	    	System.err.println(errormessage_tDBOutput_18);
	    	
		}
	    
        if(pstmt_tDBOutput_18 != null) {
        		
            pstmt_tDBOutput_18.close();
            resourceMap.remove("pstmt_tDBOutput_18");
        }
    resourceMap.put("statementClosed_tDBOutput_18", true);
			
			conn_tDBOutput_18.commit();
			
		
    	conn_tDBOutput_18 .close();
    	
    	resourceMap.put("finish_tDBOutput_18", true);
    	

	nb_line_deleted_tDBOutput_18=nb_line_deleted_tDBOutput_18+ deletedCount_tDBOutput_18;
	nb_line_update_tDBOutput_18=nb_line_update_tDBOutput_18 + updatedCount_tDBOutput_18;
	nb_line_inserted_tDBOutput_18=nb_line_inserted_tDBOutput_18 + insertedCount_tDBOutput_18;
	nb_line_rejected_tDBOutput_18=nb_line_rejected_tDBOutput_18 + rejectedCount_tDBOutput_18;
	
        globalMap.put("tDBOutput_18_NB_LINE",nb_line_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_UPDATED",nb_line_update_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_DELETED",nb_line_deleted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_18);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_route_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_18", true);
end_Hash.put("tDBOutput_18", System.currentTimeMillis());




/**
 * [tDBOutput_18 end ] stop
 */

	
	/**
	 * [tLogRow_21 end ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	


//////
//////
globalMap.put("tLogRow_21_NB_LINE",nb_line_tLogRow_21);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tLogRow_21", true);
end_Hash.put("tLogRow_21", System.currentTimeMillis());




/**
 * [tLogRow_21 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row41"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_24 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 



/**
 * [tDBInput_24 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_18 = null;
                if ((pstmtToClose_tDBOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_18")) != null) {
                    pstmtToClose_tDBOutput_18.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_18") == null){
            java.sql.Connection ctn_tDBOutput_18 = null;
            if((ctn_tDBOutput_18 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_18")) != null){
                try {
                    ctn_tDBOutput_18.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_18) {
                    String errorMessage_tDBOutput_18 = "failed to close the connection in tDBOutput_18 :" + sqlEx_tDBOutput_18.getMessage();
                    System.err.println(errorMessage_tDBOutput_18);
                }
            }
        }
    }
 



/**
 * [tDBOutput_18 finally ] stop
 */

	
	/**
	 * [tLogRow_21 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableComparableLookupRow<row41Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row41Struct other = (row41Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row41Struct other) {

		other.vpid = this.vpid;
	            other.routecd = this.routecd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row41Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.routecd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.routecd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tAdvancedHash_row41 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row41", false);
		start_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row41";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tAdvancedHash_row41 = 0;
		

			   		// connection name:row41
			   		// source node:tDBInput_23 - inputs:(after_tDBInput_24) outputs:(row41,row41) | target node:tAdvancedHash_row41 - inputs:(row41) outputs:()
			   		// linked node: tMap_12 - inputs:(row40,row41) outputs:(vmp_route_del)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row41 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row41Struct>getLookup(matchingModeEnum_row41);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row41", tHash_Lookup_row41);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row41 begin ] stop
 */



	
	/**
	 * [tDBInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_23", false);
		start_Hash.put("tDBInput_23", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_23";

	
		int tos_count_tDBInput_23 = 0;
		
	
    
	
		    int nb_line_tDBInput_23 = 0;
		    java.sql.Connection conn_tDBInput_23 = null;
				String driverClass_tDBInput_23 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_23 = java.lang.Class.forName(driverClass_tDBInput_23);
				String dbUser_tDBInput_23 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_23 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_23 = decryptedPassword_tDBInput_23;
				
				String url_tDBInput_23 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_23 = java.sql.DriverManager.getConnection(url_tDBInput_23,dbUser_tDBInput_23,dbPwd_tDBInput_23);
		        
				conn_tDBInput_23.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_23 = conn_tDBInput_23.createStatement();

		    String dbquery_tDBInput_23 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"routecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\"";
			

            	globalMap.put("tDBInput_23_QUERY",dbquery_tDBInput_23);
		    java.sql.ResultSet rs_tDBInput_23 = null;

		    try {
		    	rs_tDBInput_23 = stmt_tDBInput_23.executeQuery(dbquery_tDBInput_23);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_23 = rs_tDBInput_23.getMetaData();
		    	int colQtyInRs_tDBInput_23 = rsmd_tDBInput_23.getColumnCount();

		    String tmpContent_tDBInput_23 = null;
		    
		    
		    while (rs_tDBInput_23.next()) {
		        nb_line_tDBInput_23++;
		        
							if(colQtyInRs_tDBInput_23 < 1) {
								row41.vpid = null;
							} else {
	                         		
        	row41.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_23, 1, false);
		                    }
							if(colQtyInRs_tDBInput_23 < 2) {
								row41.routecd = null;
							} else {
	                         		
        	row41.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_23, 2, false);
		                    }
							if(colQtyInRs_tDBInput_23 < 3) {
								row41.col_val_hash = null;
							} else {
		                          
            row41.col_val_hash = rs_tDBInput_23.getObject(3);
            if(rs_tDBInput_23.wasNull()){
                    row41.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_23 begin ] stop
 */
	
	/**
	 * [tDBInput_23 main ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 


	tos_count_tDBInput_23++;

/**
 * [tDBInput_23 main ] stop
 */
	
	/**
	 * [tDBInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 



/**
 * [tDBInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					


			   
			   

					row41Struct row41_HashRow = new row41Struct();
		   	   	   
				
				row41_HashRow.vpid = row41.vpid;
				
				row41_HashRow.routecd = row41.routecd;
				
				row41_HashRow.col_val_hash = row41.col_val_hash;
				
			tHash_Lookup_row41.put(row41_HashRow);
			
            




 


	tos_count_tAdvancedHash_row41++;

/**
 * [tAdvancedHash_row41 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

 



/**
 * [tAdvancedHash_row41 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row41 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

 



/**
 * [tAdvancedHash_row41 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 



/**
 * [tDBInput_23 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_23 end ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

	}
}finally{
	if (rs_tDBInput_23 != null) {
		rs_tDBInput_23.close();
	}
	if (stmt_tDBInput_23 != null) {
		stmt_tDBInput_23.close();
	}
	if(conn_tDBInput_23 != null && !conn_tDBInput_23.isClosed()) {
		
			conn_tDBInput_23.commit();
			
		
			conn_tDBInput_23.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_23_NB_LINE",nb_line_tDBInput_23);
 

ok_Hash.put("tDBInput_23", true);
end_Hash.put("tDBInput_23", System.currentTimeMillis());




/**
 * [tDBInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

tHash_Lookup_row41.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row41", true);
end_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());




/**
 * [tAdvancedHash_row41 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_23 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 



/**
 * [tDBInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

 



/**
 * [tAdvancedHash_row41 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_ingredient_insStruct implements routines.system.IPersistableRow<vmp_ingredient_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_ingredient_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_26Struct implements routines.system.IPersistableRow<after_tDBInput_26Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_25Process(globalMap);

		row43Struct row43 = new row43Struct();
vmp_ingredient_insStruct vmp_ingredient_ins = new vmp_ingredient_insStruct();
row45Struct row45 = new row45Struct();






	
	/**
	 * [tLogRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_22", false);
		start_Hash.put("tLogRow_22", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tLogRow_22 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_22 = "|";
		java.io.PrintStream consoleOut_tLogRow_22 = null;	

 		StringBuilder strBuffer_tLogRow_22 = null;
		int nb_line_tLogRow_22 = 0;
///////////////////////    			



 



/**
 * [tLogRow_22 begin ] stop
 */



	
	/**
	 * [tDBOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_19", false);
		start_Hash.put("tDBOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_ingredient_ins");
					}
				
		int tos_count_tDBOutput_19 = 0;
		





String dbschema_tDBOutput_19 = null;
	dbschema_tDBOutput_19 = context.dmd_db_schema;
	

String tableName_tDBOutput_19 = null;
if(dbschema_tDBOutput_19 == null || dbschema_tDBOutput_19.trim().length() == 0) {
	tableName_tDBOutput_19 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_19 = dbschema_tDBOutput_19 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_19 = 0;
int nb_line_update_tDBOutput_19 = 0;
int nb_line_inserted_tDBOutput_19 = 0;
int nb_line_deleted_tDBOutput_19 = 0;
int nb_line_rejected_tDBOutput_19 = 0;

int deletedCount_tDBOutput_19=0;
int updatedCount_tDBOutput_19=0;
int insertedCount_tDBOutput_19=0;
int rejectedCount_tDBOutput_19=0;

boolean whetherReject_tDBOutput_19 = false;

java.sql.Connection conn_tDBOutput_19 = null;
String dbUser_tDBOutput_19 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_19 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_19 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_19 = context.dmd_db_password; 

    String dbPwd_tDBOutput_19 = decryptedPassword_tDBOutput_19;

    conn_tDBOutput_19 = java.sql.DriverManager.getConnection(url_tDBOutput_19,dbUser_tDBOutput_19,dbPwd_tDBOutput_19);
	
	resourceMap.put("conn_tDBOutput_19", conn_tDBOutput_19);
        conn_tDBOutput_19.setAutoCommit(false);
        int commitEvery_tDBOutput_19 = 10000;
        int commitCounter_tDBOutput_19 = 0;


   int batchSize_tDBOutput_19 = 10000;
   int batchSizeCounter_tDBOutput_19=0;

int count_tDBOutput_19=0;
	    String insert_tDBOutput_19 = "INSERT INTO \"" + tableName_tDBOutput_19 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_19 = conn_tDBOutput_19.prepareStatement(insert_tDBOutput_19);
	    resourceMap.put("pstmt_tDBOutput_19", pstmt_tDBOutput_19);
	    

 



/**
 * [tDBOutput_19 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
					globalMap.get( "tHash_Lookup_row44" ))
					;					
					
	

row44Struct row44HashKey = new row44Struct();
row44Struct row44Default = new row44Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_ingredient_insStruct vmp_ingredient_ins_tmp = new vmp_ingredient_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tDBInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_26", false);
		start_Hash.put("tDBInput_26", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_26";

	
		int tos_count_tDBInput_26 = 0;
		
	
    
	
		    int nb_line_tDBInput_26 = 0;
		    java.sql.Connection conn_tDBInput_26 = null;
				String driverClass_tDBInput_26 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_26 = java.lang.Class.forName(driverClass_tDBInput_26);
				String dbUser_tDBInput_26 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_26 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_26 = decryptedPassword_tDBInput_26;
				
				String url_tDBInput_26 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_26 = java.sql.DriverManager.getConnection(url_tDBInput_26,dbUser_tDBInput_26,dbPwd_tDBInput_26);
		        
				conn_tDBInput_26.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_26 = conn_tDBInput_26.createStatement();

		    String dbquery_tDBInput_26 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"basis_strntcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"bs_subid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_val\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_val\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\"";
			

            	globalMap.put("tDBInput_26_QUERY",dbquery_tDBInput_26);
		    java.sql.ResultSet rs_tDBInput_26 = null;

		    try {
		    	rs_tDBInput_26 = stmt_tDBInput_26.executeQuery(dbquery_tDBInput_26);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_26 = rs_tDBInput_26.getMetaData();
		    	int colQtyInRs_tDBInput_26 = rsmd_tDBInput_26.getColumnCount();

		    String tmpContent_tDBInput_26 = null;
		    
		    
		    while (rs_tDBInput_26.next()) {
		        nb_line_tDBInput_26++;
		        
							if(colQtyInRs_tDBInput_26 < 1) {
								row43.vpid = null;
							} else {
	                         		
        	row43.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_26, 1, false);
		                    }
							if(colQtyInRs_tDBInput_26 < 2) {
								row43.isid = null;
							} else {
	                         		
        	row43.isid = routines.system.JDBCUtil.getString(rs_tDBInput_26, 2, false);
		                    }
							if(colQtyInRs_tDBInput_26 < 3) {
								row43.basis_strntcd = null;
							} else {
		                          
            row43.basis_strntcd = rs_tDBInput_26.getLong(3);
            if(rs_tDBInput_26.wasNull()){
                    row43.basis_strntcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_26 < 4) {
								row43.bs_subid = null;
							} else {
	                         		
        	row43.bs_subid = routines.system.JDBCUtil.getString(rs_tDBInput_26, 4, false);
		                    }
							if(colQtyInRs_tDBInput_26 < 5) {
								row43.strnt_nmrtr_val = null;
							} else {
		                          
            row43.strnt_nmrtr_val = rs_tDBInput_26.getBigDecimal(5);
            if(rs_tDBInput_26.wasNull()){
                    row43.strnt_nmrtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_26 < 6) {
								row43.strnt_nmrtr_uomcd = null;
							} else {
	                         		
        	row43.strnt_nmrtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_26, 6, false);
		                    }
							if(colQtyInRs_tDBInput_26 < 7) {
								row43.strnt_dnmtr_val = null;
							} else {
		                          
            row43.strnt_dnmtr_val = rs_tDBInput_26.getBigDecimal(7);
            if(rs_tDBInput_26.wasNull()){
                    row43.strnt_dnmtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_26 < 8) {
								row43.strnt_dnmtr_uomcd = null;
							} else {
	                         		
        	row43.strnt_dnmtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_26, 8, false);
		                    }
							if(colQtyInRs_tDBInput_26 < 9) {
								row43.col_val_hash = null;
							} else {
		                          
            row43.col_val_hash = rs_tDBInput_26.getObject(9);
            if(rs_tDBInput_26.wasNull()){
                    row43.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_26 begin ] stop
 */
	
	/**
	 * [tDBInput_26 main ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 


	tos_count_tDBInput_26++;

/**
 * [tDBInput_26 main ] stop
 */
	
	/**
	 * [tDBInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 



/**
 * [tDBInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row44" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow44 = false;
       		  	    	
       		  	    	
 							row44Struct row44ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		    row44HashKey.vpid = row43.vpid ;
                        		    		
                        		    		    row44HashKey.col_val_hash = row43.col_val_hash ;
                        		    		

								
		                        	row44HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row44.lookup( row44HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row44.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_13 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row44 != null && tHash_Lookup_row44.getCount(row44HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row44' and it contains more one result from keys :  row44.vpid = '" + row44HashKey.vpid + "', row44.col_val_hash = '" + row44HashKey.col_val_hash + "'");
								} // G 071
							

							row44Struct row44 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row44Struct fromLookup_row44 = null;
							row44 = row44Default;
										 
							
								 
							
							
								if (tHash_Lookup_row44 !=null && tHash_Lookup_row44.hasNext()) { // G 099
								
							
								
								fromLookup_row44 = tHash_Lookup_row44.next();

							
							
								} // G 099
							
							

							if(fromLookup_row44 != null) {
								row44 = fromLookup_row44;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

vmp_ingredient_ins = null;

if(!rejectedInnerJoin_tMap_13 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'vmp_ingredient_ins'
// # Filter conditions 
if( rejectedInnerJoin_tMap_13 ) {
vmp_ingredient_ins_tmp.dmd_id = row43.vpid ;
vmp_ingredient_ins_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
vmp_ingredient_ins_tmp.dmd_entity_name = "dmd_vmp_ingredient";
vmp_ingredient_ins_tmp.row_action = "i";
vmp_ingredient_ins = vmp_ingredient_ins_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "vmp_ingredient_ins"
if(vmp_ingredient_ins != null) { 



	
	/**
	 * [tDBOutput_19 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_ingredient_ins");
					}
					



            row45 = null;
        whetherReject_tDBOutput_19 = false;
                    if(vmp_ingredient_ins.dmd_id == null) {
pstmt_tDBOutput_19.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(1, vmp_ingredient_ins.dmd_id);
}

                    if(vmp_ingredient_ins.sync_process_id == null) {
pstmt_tDBOutput_19.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(2, vmp_ingredient_ins.sync_process_id);
}

                    if(vmp_ingredient_ins.dmd_entity_name == null) {
pstmt_tDBOutput_19.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(3, vmp_ingredient_ins.dmd_entity_name);
}

                    if(vmp_ingredient_ins.row_action == null) {
pstmt_tDBOutput_19.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(4, vmp_ingredient_ins.row_action);
}

			
    		pstmt_tDBOutput_19.addBatch();
    		nb_line_tDBOutput_19++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_19++;
    		  
            if(!whetherReject_tDBOutput_19) {
                            row45 = new row45Struct();
                                row45.dmd_id = vmp_ingredient_ins.dmd_id;
                                row45.sync_process_id = vmp_ingredient_ins.sync_process_id;
                                row45.dmd_entity_name = vmp_ingredient_ins.dmd_entity_name;
                                row45.row_action = vmp_ingredient_ins.row_action;
            }
    			if ((batchSize_tDBOutput_19 > 0) && (batchSize_tDBOutput_19 <= batchSizeCounter_tDBOutput_19)) {
                try {
						int countSum_tDBOutput_19 = 0;
						    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
				    	
				    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
            	    	batchSizeCounter_tDBOutput_19 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_19){
				    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
				    	String errormessage_tDBOutput_19;
						if (ne_tDBOutput_19 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
							errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
						}else{
							errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
						}
				    	
				    	int countSum_tDBOutput_19 = 0;
						for(int countEach_tDBOutput_19: e_tDBOutput_19.getUpdateCounts()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
						
				    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
				    	System.err.println(errormessage_tDBOutput_19);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_19++;
                if(commitEvery_tDBOutput_19 <= commitCounter_tDBOutput_19) {
                if ((batchSize_tDBOutput_19 > 0) && (batchSizeCounter_tDBOutput_19 > 0)) {
                try {
                		int countSum_tDBOutput_19 = 0;
                		    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
            	    	
            	    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
            	    	
                batchSizeCounter_tDBOutput_19 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_19){
			    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
			    	String errormessage_tDBOutput_19;
					if (ne_tDBOutput_19 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
						errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
					}else{
						errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
					}
			    	
			    	int countSum_tDBOutput_19 = 0;
					for(int countEach_tDBOutput_19: e_tDBOutput_19.getUpdateCounts()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}
					
			    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
			    	
			    	System.err.println(errormessage_tDBOutput_19);
			    	
				}
            }
                	conn_tDBOutput_19.commit();
                	
                	commitCounter_tDBOutput_19=0;
                }

 


	tos_count_tDBOutput_19++;

/**
 * [tDBOutput_19 main ] stop
 */
	
	/**
	 * [tDBOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_begin ] stop
 */
// Start of branch "row45"
if(row45 != null) { 



	
	/**
	 * [tLogRow_22 main ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row45");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_22 = new StringBuilder();




   				
	    		if(row45.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row45.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row45.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row45.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row45.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row45.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row45.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row45.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_22 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_22 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_22);
                    }
                    consoleOut_tLogRow_22.println(strBuffer_tLogRow_22.toString());
                    consoleOut_tLogRow_22.flush();
                    nb_line_tLogRow_22++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_22++;

/**
 * [tLogRow_22 main ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_end ] stop
 */

} // End of branch "row45"




	
	/**
	 * [tDBOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_end ] stop
 */

} // End of branch "vmp_ingredient_ins"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 



/**
 * [tDBInput_26 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_26 end ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

	}
}finally{
	if (rs_tDBInput_26 != null) {
		rs_tDBInput_26.close();
	}
	if (stmt_tDBInput_26 != null) {
		stmt_tDBInput_26.close();
	}
	if(conn_tDBInput_26 != null && !conn_tDBInput_26.isClosed()) {
		
			conn_tDBInput_26.commit();
			
		
			conn_tDBInput_26.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_26_NB_LINE",nb_line_tDBInput_26);
 

ok_Hash.put("tDBInput_26", true);
end_Hash.put("tDBInput_26", System.currentTimeMillis());




/**
 * [tDBInput_26 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row44 != null) {
						tHash_Lookup_row44.endGet();
					}
					globalMap.remove( "tHash_Lookup_row44" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tDBOutput_19 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



	    try {
				int countSum_tDBOutput_19 = 0;
				if (pstmt_tDBOutput_19 != null && batchSizeCounter_tDBOutput_19 > 0) {
						
					for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_19){
	    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
	    	String errormessage_tDBOutput_19;
			if (ne_tDBOutput_19 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
				errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
			}else{
				errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
			}
	    	
	    	int countSum_tDBOutput_19 = 0;
			for(int countEach_tDBOutput_19: e_tDBOutput_19.getUpdateCounts()) {
				countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
			}
			
	    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
	    	
	    	System.err.println(errormessage_tDBOutput_19);
	    	
		}
	    
        if(pstmt_tDBOutput_19 != null) {
        		
            pstmt_tDBOutput_19.close();
            resourceMap.remove("pstmt_tDBOutput_19");
        }
    resourceMap.put("statementClosed_tDBOutput_19", true);
			
			conn_tDBOutput_19.commit();
			
		
    	conn_tDBOutput_19 .close();
    	
    	resourceMap.put("finish_tDBOutput_19", true);
    	

	nb_line_deleted_tDBOutput_19=nb_line_deleted_tDBOutput_19+ deletedCount_tDBOutput_19;
	nb_line_update_tDBOutput_19=nb_line_update_tDBOutput_19 + updatedCount_tDBOutput_19;
	nb_line_inserted_tDBOutput_19=nb_line_inserted_tDBOutput_19 + insertedCount_tDBOutput_19;
	nb_line_rejected_tDBOutput_19=nb_line_rejected_tDBOutput_19 + rejectedCount_tDBOutput_19;
	
        globalMap.put("tDBOutput_19_NB_LINE",nb_line_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_UPDATED",nb_line_update_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_DELETED",nb_line_deleted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_19);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_ingredient_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_19", true);
end_Hash.put("tDBOutput_19", System.currentTimeMillis());




/**
 * [tDBOutput_19 end ] stop
 */

	
	/**
	 * [tLogRow_22 end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	


//////
//////
globalMap.put("tLogRow_22_NB_LINE",nb_line_tLogRow_22);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tLogRow_22", true);
end_Hash.put("tLogRow_22", System.currentTimeMillis());




/**
 * [tLogRow_22 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row44"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_26 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 



/**
 * [tDBInput_26 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tDBOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_19 = null;
                if ((pstmtToClose_tDBOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_19")) != null) {
                    pstmtToClose_tDBOutput_19.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_19") == null){
            java.sql.Connection ctn_tDBOutput_19 = null;
            if((ctn_tDBOutput_19 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_19")) != null){
                try {
                    ctn_tDBOutput_19.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_19) {
                    String errorMessage_tDBOutput_19 = "failed to close the connection in tDBOutput_19 :" + sqlEx_tDBOutput_19.getMessage();
                    System.err.println(errorMessage_tDBOutput_19);
                }
            }
        }
    }
 



/**
 * [tDBOutput_19 finally ] stop
 */

	
	/**
	 * [tLogRow_22 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_26_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.vpid = this.vpid;
	            other.isid = this.isid;
	            other.basis_strntcd = this.basis_strntcd;
	            other.bs_subid = this.bs_subid;
	            other.strnt_nmrtr_val = this.strnt_nmrtr_val;
	            other.strnt_nmrtr_uomcd = this.strnt_nmrtr_uomcd;
	            other.strnt_dnmtr_val = this.strnt_dnmtr_val;
	            other.strnt_dnmtr_uomcd = this.strnt_dnmtr_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.isid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
						this.bs_subid = readString(dis,ois);
					
       			    	this.strnt_nmrtr_val = (BigDecimal) ois.readObject();
					
						this.strnt_nmrtr_uomcd = readString(dis,ois);
					
       			    	this.strnt_dnmtr_val = (BigDecimal) ois.readObject();
					
						this.strnt_dnmtr_uomcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.isid, dos, oos);
					
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
						writeString(this.bs_subid, dos, oos);
					
       			    	oos.writeObject(this.strnt_nmrtr_val);
					
						writeString(this.strnt_nmrtr_uomcd, dos, oos);
					
       			    	oos.writeObject(this.strnt_dnmtr_val);
					
						writeString(this.strnt_dnmtr_uomcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tAdvancedHash_row44 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row44", false);
		start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row44";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tAdvancedHash_row44 = 0;
		

			   		// connection name:row44
			   		// source node:tDBInput_25 - inputs:(after_tDBInput_26) outputs:(row44,row44) | target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
			   		// linked node: tMap_13 - inputs:(row43,row44) outputs:(vmp_ingredient_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row44Struct>getLookup(matchingModeEnum_row44);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row44 begin ] stop
 */



	
	/**
	 * [tDBInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_25", false);
		start_Hash.put("tDBInput_25", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_25";

	
		int tos_count_tDBInput_25 = 0;
		
	
    
	
		    int nb_line_tDBInput_25 = 0;
		    java.sql.Connection conn_tDBInput_25 = null;
				String driverClass_tDBInput_25 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_25 = java.lang.Class.forName(driverClass_tDBInput_25);
				String dbUser_tDBInput_25 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_25 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_25 = decryptedPassword_tDBInput_25;
				
				String url_tDBInput_25 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_25 = java.sql.DriverManager.getConnection(url_tDBInput_25,dbUser_tDBInput_25,dbPwd_tDBInput_25);
		        
				conn_tDBInput_25.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_25 = conn_tDBInput_25.createStatement();

		    String dbquery_tDBInput_25 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"isid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"basis_strntcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"bs_subid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_val\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_val\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\"";
			

            	globalMap.put("tDBInput_25_QUERY",dbquery_tDBInput_25);
		    java.sql.ResultSet rs_tDBInput_25 = null;

		    try {
		    	rs_tDBInput_25 = stmt_tDBInput_25.executeQuery(dbquery_tDBInput_25);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_25 = rs_tDBInput_25.getMetaData();
		    	int colQtyInRs_tDBInput_25 = rsmd_tDBInput_25.getColumnCount();

		    String tmpContent_tDBInput_25 = null;
		    
		    
		    while (rs_tDBInput_25.next()) {
		        nb_line_tDBInput_25++;
		        
							if(colQtyInRs_tDBInput_25 < 1) {
								row44.vpid = null;
							} else {
	                         		
        	row44.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_25, 1, false);
		                    }
							if(colQtyInRs_tDBInput_25 < 2) {
								row44.isid = null;
							} else {
	                         		
        	row44.isid = routines.system.JDBCUtil.getString(rs_tDBInput_25, 2, false);
		                    }
							if(colQtyInRs_tDBInput_25 < 3) {
								row44.basis_strntcd = null;
							} else {
		                          
            row44.basis_strntcd = rs_tDBInput_25.getLong(3);
            if(rs_tDBInput_25.wasNull()){
                    row44.basis_strntcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_25 < 4) {
								row44.bs_subid = null;
							} else {
	                         		
        	row44.bs_subid = routines.system.JDBCUtil.getString(rs_tDBInput_25, 4, false);
		                    }
							if(colQtyInRs_tDBInput_25 < 5) {
								row44.strnt_nmrtr_val = null;
							} else {
		                          
            row44.strnt_nmrtr_val = rs_tDBInput_25.getBigDecimal(5);
            if(rs_tDBInput_25.wasNull()){
                    row44.strnt_nmrtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_25 < 6) {
								row44.strnt_nmrtr_uomcd = null;
							} else {
	                         		
        	row44.strnt_nmrtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_25, 6, false);
		                    }
							if(colQtyInRs_tDBInput_25 < 7) {
								row44.strnt_dnmtr_val = null;
							} else {
		                          
            row44.strnt_dnmtr_val = rs_tDBInput_25.getBigDecimal(7);
            if(rs_tDBInput_25.wasNull()){
                    row44.strnt_dnmtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_25 < 8) {
								row44.strnt_dnmtr_uomcd = null;
							} else {
	                         		
        	row44.strnt_dnmtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_25, 8, false);
		                    }
							if(colQtyInRs_tDBInput_25 < 9) {
								row44.col_val_hash = null;
							} else {
		                          
            row44.col_val_hash = rs_tDBInput_25.getObject(9);
            if(rs_tDBInput_25.wasNull()){
                    row44.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_25 begin ] stop
 */
	
	/**
	 * [tDBInput_25 main ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 


	tos_count_tDBInput_25++;

/**
 * [tDBInput_25 main ] stop
 */
	
	/**
	 * [tDBInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 



/**
 * [tDBInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row44");
					}
					


			   
			   

					row44Struct row44_HashRow = new row44Struct();
		   	   	   
				
				row44_HashRow.vpid = row44.vpid;
				
				row44_HashRow.isid = row44.isid;
				
				row44_HashRow.basis_strntcd = row44.basis_strntcd;
				
				row44_HashRow.bs_subid = row44.bs_subid;
				
				row44_HashRow.strnt_nmrtr_val = row44.strnt_nmrtr_val;
				
				row44_HashRow.strnt_nmrtr_uomcd = row44.strnt_nmrtr_uomcd;
				
				row44_HashRow.strnt_dnmtr_val = row44.strnt_dnmtr_val;
				
				row44_HashRow.strnt_dnmtr_uomcd = row44.strnt_dnmtr_uomcd;
				
				row44_HashRow.col_val_hash = row44.col_val_hash;
				
			tHash_Lookup_row44.put(row44_HashRow);
			
            




 


	tos_count_tAdvancedHash_row44++;

/**
 * [tAdvancedHash_row44 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 



/**
 * [tDBInput_25 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_25 end ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

	}
}finally{
	if (rs_tDBInput_25 != null) {
		rs_tDBInput_25.close();
	}
	if (stmt_tDBInput_25 != null) {
		stmt_tDBInput_25.close();
	}
	if(conn_tDBInput_25 != null && !conn_tDBInput_25.isClosed()) {
		
			conn_tDBInput_25.commit();
			
		
			conn_tDBInput_25.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_25_NB_LINE",nb_line_tDBInput_25);
 

ok_Hash.put("tDBInput_25", true);
end_Hash.put("tDBInput_25", System.currentTimeMillis());




/**
 * [tDBInput_25 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

tHash_Lookup_row44.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row44", true);
end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());




/**
 * [tAdvancedHash_row44 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_25 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 



/**
 * [tDBInput_25 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ingredient_del_rowStruct implements routines.system.IPersistableRow<ingredient_del_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ingredient_del_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_28Struct implements routines.system.IPersistableRow<after_tDBInput_28Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_27Process(globalMap);

		row47Struct row47 = new row47Struct();
ingredient_del_rowStruct ingredient_del_row = new ingredient_del_rowStruct();
row49Struct row49 = new row49Struct();






	
	/**
	 * [tLogRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_27", false);
		start_Hash.put("tLogRow_27", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tLogRow_27 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_27 = "|";
		java.io.PrintStream consoleOut_tLogRow_27 = null;	

 		StringBuilder strBuffer_tLogRow_27 = null;
		int nb_line_tLogRow_27 = 0;
///////////////////////    			



 



/**
 * [tLogRow_27 begin ] stop
 */



	
	/**
	 * [tDBOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_21", false);
		start_Hash.put("tDBOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ingredient_del_row");
					}
				
		int tos_count_tDBOutput_21 = 0;
		





String dbschema_tDBOutput_21 = null;
	dbschema_tDBOutput_21 = context.dmd_db_schema;
	

String tableName_tDBOutput_21 = null;
if(dbschema_tDBOutput_21 == null || dbschema_tDBOutput_21.trim().length() == 0) {
	tableName_tDBOutput_21 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_21 = dbschema_tDBOutput_21 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_21 = 0;
int nb_line_update_tDBOutput_21 = 0;
int nb_line_inserted_tDBOutput_21 = 0;
int nb_line_deleted_tDBOutput_21 = 0;
int nb_line_rejected_tDBOutput_21 = 0;

int deletedCount_tDBOutput_21=0;
int updatedCount_tDBOutput_21=0;
int insertedCount_tDBOutput_21=0;
int rejectedCount_tDBOutput_21=0;

boolean whetherReject_tDBOutput_21 = false;

java.sql.Connection conn_tDBOutput_21 = null;
String dbUser_tDBOutput_21 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_21 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_21 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_21 = context.dmd_db_password; 

    String dbPwd_tDBOutput_21 = decryptedPassword_tDBOutput_21;

    conn_tDBOutput_21 = java.sql.DriverManager.getConnection(url_tDBOutput_21,dbUser_tDBOutput_21,dbPwd_tDBOutput_21);
	
	resourceMap.put("conn_tDBOutput_21", conn_tDBOutput_21);
        conn_tDBOutput_21.setAutoCommit(false);
        int commitEvery_tDBOutput_21 = 10000;
        int commitCounter_tDBOutput_21 = 0;


   int batchSize_tDBOutput_21 = 10000;
   int batchSizeCounter_tDBOutput_21=0;

int count_tDBOutput_21=0;
	    String insert_tDBOutput_21 = "INSERT INTO \"" + tableName_tDBOutput_21 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_21 = conn_tDBOutput_21.prepareStatement(insert_tDBOutput_21);
	    resourceMap.put("pstmt_tDBOutput_21", pstmt_tDBOutput_21);
	    

 



/**
 * [tDBOutput_21 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) 
					globalMap.get( "tHash_Lookup_row48" ))
					;					
					
	

row48Struct row48HashKey = new row48Struct();
row48Struct row48Default = new row48Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
ingredient_del_rowStruct ingredient_del_row_tmp = new ingredient_del_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tDBInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_28", false);
		start_Hash.put("tDBInput_28", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_28";

	
		int tos_count_tDBInput_28 = 0;
		
	
    
	
		    int nb_line_tDBInput_28 = 0;
		    java.sql.Connection conn_tDBInput_28 = null;
				String driverClass_tDBInput_28 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_28 = java.lang.Class.forName(driverClass_tDBInput_28);
				String dbUser_tDBInput_28 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_28 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_28 = decryptedPassword_tDBInput_28;
				
				String url_tDBInput_28 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_28 = java.sql.DriverManager.getConnection(url_tDBInput_28,dbUser_tDBInput_28,dbPwd_tDBInput_28);
		        
				conn_tDBInput_28.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_28 = conn_tDBInput_28.createStatement();

		    String dbquery_tDBInput_28 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"vpid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"isid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"basis_strntcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"bs_subid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_val\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_val\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_vmp_ingredient\"";
			

            	globalMap.put("tDBInput_28_QUERY",dbquery_tDBInput_28);
		    java.sql.ResultSet rs_tDBInput_28 = null;

		    try {
		    	rs_tDBInput_28 = stmt_tDBInput_28.executeQuery(dbquery_tDBInput_28);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_28 = rs_tDBInput_28.getMetaData();
		    	int colQtyInRs_tDBInput_28 = rsmd_tDBInput_28.getColumnCount();

		    String tmpContent_tDBInput_28 = null;
		    
		    
		    while (rs_tDBInput_28.next()) {
		        nb_line_tDBInput_28++;
		        
							if(colQtyInRs_tDBInput_28 < 1) {
								row47.vpid = null;
							} else {
	                         		
        	row47.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_28, 1, false);
		                    }
							if(colQtyInRs_tDBInput_28 < 2) {
								row47.isid = null;
							} else {
	                         		
        	row47.isid = routines.system.JDBCUtil.getString(rs_tDBInput_28, 2, false);
		                    }
							if(colQtyInRs_tDBInput_28 < 3) {
								row47.basis_strntcd = null;
							} else {
		                          
            row47.basis_strntcd = rs_tDBInput_28.getLong(3);
            if(rs_tDBInput_28.wasNull()){
                    row47.basis_strntcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_28 < 4) {
								row47.bs_subid = null;
							} else {
	                         		
        	row47.bs_subid = routines.system.JDBCUtil.getString(rs_tDBInput_28, 4, false);
		                    }
							if(colQtyInRs_tDBInput_28 < 5) {
								row47.strnt_nmrtr_val = null;
							} else {
		                          
            row47.strnt_nmrtr_val = rs_tDBInput_28.getBigDecimal(5);
            if(rs_tDBInput_28.wasNull()){
                    row47.strnt_nmrtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_28 < 6) {
								row47.strnt_nmrtr_uomcd = null;
							} else {
	                         		
        	row47.strnt_nmrtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_28, 6, false);
		                    }
							if(colQtyInRs_tDBInput_28 < 7) {
								row47.strnt_dnmtr_val = null;
							} else {
		                          
            row47.strnt_dnmtr_val = rs_tDBInput_28.getBigDecimal(7);
            if(rs_tDBInput_28.wasNull()){
                    row47.strnt_dnmtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_28 < 8) {
								row47.strnt_dnmtr_uomcd = null;
							} else {
	                         		
        	row47.strnt_dnmtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_28, 8, false);
		                    }
							if(colQtyInRs_tDBInput_28 < 9) {
								row47.col_val_hash = null;
							} else {
		                          
            row47.col_val_hash = rs_tDBInput_28.getObject(9);
            if(rs_tDBInput_28.wasNull()){
                    row47.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_28 begin ] stop
 */
	
	/**
	 * [tDBInput_28 main ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 


	tos_count_tDBInput_28++;

/**
 * [tDBInput_28 main ] stop
 */
	
	/**
	 * [tDBInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 



/**
 * [tDBInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row47");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row48" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow48 = false;
       		  	    	
       		  	    	
 							row48Struct row48ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row48HashKey.vpid = row47.vpid ;
                        		    		
                        		    		    row48HashKey.col_val_hash = row47.col_val_hash ;
                        		    		

								
		                        	row48HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row48.lookup( row48HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row48.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_14 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row48 != null && tHash_Lookup_row48.getCount(row48HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row48' and it contains more one result from keys :  row48.vpid = '" + row48HashKey.vpid + "', row48.col_val_hash = '" + row48HashKey.col_val_hash + "'");
								} // G 071
							

							row48Struct row48 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row48Struct fromLookup_row48 = null;
							row48 = row48Default;
										 
							
								 
							
							
								if (tHash_Lookup_row48 !=null && tHash_Lookup_row48.hasNext()) { // G 099
								
							
								
								fromLookup_row48 = tHash_Lookup_row48.next();

							
							
								} // G 099
							
							

							if(fromLookup_row48 != null) {
								row48 = fromLookup_row48;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

ingredient_del_row = null;

if(!rejectedInnerJoin_tMap_14 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'ingredient_del_row'
// # Filter conditions 
if( rejectedInnerJoin_tMap_14 ) {
ingredient_del_row_tmp.dmd_id = row47.vpid ;
ingredient_del_row_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
ingredient_del_row_tmp.dmd_entity_name = "dmd_vmp_ingredient";
ingredient_del_row_tmp.row_action = "d";
ingredient_del_row = ingredient_del_row_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "ingredient_del_row"
if(ingredient_del_row != null) { 



	
	/**
	 * [tDBOutput_21 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ingredient_del_row");
					}
					



            row49 = null;
        whetherReject_tDBOutput_21 = false;
                    if(ingredient_del_row.dmd_id == null) {
pstmt_tDBOutput_21.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(1, ingredient_del_row.dmd_id);
}

                    if(ingredient_del_row.sync_process_id == null) {
pstmt_tDBOutput_21.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(2, ingredient_del_row.sync_process_id);
}

                    if(ingredient_del_row.dmd_entity_name == null) {
pstmt_tDBOutput_21.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(3, ingredient_del_row.dmd_entity_name);
}

                    if(ingredient_del_row.row_action == null) {
pstmt_tDBOutput_21.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(4, ingredient_del_row.row_action);
}

			
    		pstmt_tDBOutput_21.addBatch();
    		nb_line_tDBOutput_21++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_21++;
    		  
            if(!whetherReject_tDBOutput_21) {
                            row49 = new row49Struct();
                                row49.dmd_id = ingredient_del_row.dmd_id;
                                row49.sync_process_id = ingredient_del_row.sync_process_id;
                                row49.dmd_entity_name = ingredient_del_row.dmd_entity_name;
                                row49.row_action = ingredient_del_row.row_action;
            }
    			if ((batchSize_tDBOutput_21 > 0) && (batchSize_tDBOutput_21 <= batchSizeCounter_tDBOutput_21)) {
                try {
						int countSum_tDBOutput_21 = 0;
						    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
				    	
				    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
            	    	batchSizeCounter_tDBOutput_21 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_21){
				    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
				    	String errormessage_tDBOutput_21;
						if (ne_tDBOutput_21 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
							errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
						}else{
							errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
						}
				    	
				    	int countSum_tDBOutput_21 = 0;
						for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
						
				    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
				    	System.err.println(errormessage_tDBOutput_21);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_21++;
                if(commitEvery_tDBOutput_21 <= commitCounter_tDBOutput_21) {
                if ((batchSize_tDBOutput_21 > 0) && (batchSizeCounter_tDBOutput_21 > 0)) {
                try {
                		int countSum_tDBOutput_21 = 0;
                		    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
            	    	
            	    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
            	    	
                batchSizeCounter_tDBOutput_21 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_21){
			    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
			    	String errormessage_tDBOutput_21;
					if (ne_tDBOutput_21 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
						errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
					}else{
						errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
					}
			    	
			    	int countSum_tDBOutput_21 = 0;
					for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
					
			    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
			    	
			    	System.err.println(errormessage_tDBOutput_21);
			    	
				}
            }
                	conn_tDBOutput_21.commit();
                	
                	commitCounter_tDBOutput_21=0;
                }

 


	tos_count_tDBOutput_21++;

/**
 * [tDBOutput_21 main ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_begin ] stop
 */
// Start of branch "row49"
if(row49 != null) { 



	
	/**
	 * [tLogRow_27 main ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row49");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_27 = new StringBuilder();




   				
	    		if(row49.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_27.append(
				                String.valueOf(row49.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_27.append("|");
    			


   				
	    		if(row49.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_27.append(
				                String.valueOf(row49.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_27.append("|");
    			


   				
	    		if(row49.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_27.append(
				                String.valueOf(row49.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_27.append("|");
    			


   				
	    		if(row49.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_27.append(
				                String.valueOf(row49.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_27 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_27 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_27);
                    }
                    consoleOut_tLogRow_27.println(strBuffer_tLogRow_27.toString());
                    consoleOut_tLogRow_27.flush();
                    nb_line_tLogRow_27++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_27++;

/**
 * [tLogRow_27 main ] stop
 */
	
	/**
	 * [tLogRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	

 



/**
 * [tLogRow_27 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	

 



/**
 * [tLogRow_27 process_data_end ] stop
 */

} // End of branch "row49"




	
	/**
	 * [tDBOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_end ] stop
 */

} // End of branch "ingredient_del_row"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 



/**
 * [tDBInput_28 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_28 end ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

	}
}finally{
	if (rs_tDBInput_28 != null) {
		rs_tDBInput_28.close();
	}
	if (stmt_tDBInput_28 != null) {
		stmt_tDBInput_28.close();
	}
	if(conn_tDBInput_28 != null && !conn_tDBInput_28.isClosed()) {
		
			conn_tDBInput_28.commit();
			
		
			conn_tDBInput_28.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_28_NB_LINE",nb_line_tDBInput_28);
 

ok_Hash.put("tDBInput_28", true);
end_Hash.put("tDBInput_28", System.currentTimeMillis());




/**
 * [tDBInput_28 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row48 != null) {
						tHash_Lookup_row48.endGet();
					}
					globalMap.remove( "tHash_Lookup_row48" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tDBOutput_21 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



	    try {
				int countSum_tDBOutput_21 = 0;
				if (pstmt_tDBOutput_21 != null && batchSizeCounter_tDBOutput_21 > 0) {
						
					for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_21){
	    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
	    	String errormessage_tDBOutput_21;
			if (ne_tDBOutput_21 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
				errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
			}else{
				errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
			}
	    	
	    	int countSum_tDBOutput_21 = 0;
			for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
				countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
			}
			
	    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
	    	
	    	System.err.println(errormessage_tDBOutput_21);
	    	
		}
	    
        if(pstmt_tDBOutput_21 != null) {
        		
            pstmt_tDBOutput_21.close();
            resourceMap.remove("pstmt_tDBOutput_21");
        }
    resourceMap.put("statementClosed_tDBOutput_21", true);
			
			conn_tDBOutput_21.commit();
			
		
    	conn_tDBOutput_21 .close();
    	
    	resourceMap.put("finish_tDBOutput_21", true);
    	

	nb_line_deleted_tDBOutput_21=nb_line_deleted_tDBOutput_21+ deletedCount_tDBOutput_21;
	nb_line_update_tDBOutput_21=nb_line_update_tDBOutput_21 + updatedCount_tDBOutput_21;
	nb_line_inserted_tDBOutput_21=nb_line_inserted_tDBOutput_21 + insertedCount_tDBOutput_21;
	nb_line_rejected_tDBOutput_21=nb_line_rejected_tDBOutput_21 + rejectedCount_tDBOutput_21;
	
        globalMap.put("tDBOutput_21_NB_LINE",nb_line_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_UPDATED",nb_line_update_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_DELETED",nb_line_deleted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_21);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ingredient_del_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_21", true);
end_Hash.put("tDBOutput_21", System.currentTimeMillis());




/**
 * [tDBOutput_21 end ] stop
 */

	
	/**
	 * [tLogRow_27 end ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	


//////
//////
globalMap.put("tLogRow_27_NB_LINE",nb_line_tLogRow_27);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tLogRow_27", true);
end_Hash.put("tLogRow_27", System.currentTimeMillis());




/**
 * [tLogRow_27 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row48"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_28 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 



/**
 * [tDBInput_28 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tDBOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_21 = null;
                if ((pstmtToClose_tDBOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_21")) != null) {
                    pstmtToClose_tDBOutput_21.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_21") == null){
            java.sql.Connection ctn_tDBOutput_21 = null;
            if((ctn_tDBOutput_21 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_21")) != null){
                try {
                    ctn_tDBOutput_21.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_21) {
                    String errorMessage_tDBOutput_21 = "failed to close the connection in tDBOutput_21 :" + sqlEx_tDBOutput_21.getMessage();
                    System.err.println(errorMessage_tDBOutput_21);
                }
            }
        }
    }
 



/**
 * [tDBOutput_21 finally ] stop
 */

	
	/**
	 * [tLogRow_27 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	

 



/**
 * [tLogRow_27 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableComparableLookupRow<row48Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row48Struct other = (row48Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row48Struct other) {

		other.vpid = this.vpid;
	            other.isid = this.isid;
	            other.basis_strntcd = this.basis_strntcd;
	            other.bs_subid = this.bs_subid;
	            other.strnt_nmrtr_val = this.strnt_nmrtr_val;
	            other.strnt_nmrtr_uomcd = this.strnt_nmrtr_uomcd;
	            other.strnt_dnmtr_val = this.strnt_dnmtr_val;
	            other.strnt_dnmtr_uomcd = this.strnt_dnmtr_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row48Struct other) {

		other.vpid = this.vpid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.isid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
						this.bs_subid = readString(dis,ois);
					
       			    	this.strnt_nmrtr_val = (BigDecimal) ois.readObject();
					
						this.strnt_nmrtr_uomcd = readString(dis,ois);
					
       			    	this.strnt_dnmtr_val = (BigDecimal) ois.readObject();
					
						this.strnt_dnmtr_uomcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.isid, dos, oos);
					
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
						writeString(this.bs_subid, dos, oos);
					
       			    	oos.writeObject(this.strnt_nmrtr_val);
					
						writeString(this.strnt_nmrtr_uomcd, dos, oos);
					
       			    	oos.writeObject(this.strnt_dnmtr_val);
					
						writeString(this.strnt_dnmtr_uomcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();




	
	/**
	 * [tAdvancedHash_row48 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row48", false);
		start_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row48";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tAdvancedHash_row48 = 0;
		

			   		// connection name:row48
			   		// source node:tDBInput_27 - inputs:(after_tDBInput_28) outputs:(row48,row48) | target node:tAdvancedHash_row48 - inputs:(row48) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48) outputs:(ingredient_del_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row48 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row48Struct>getLookup(matchingModeEnum_row48);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row48", tHash_Lookup_row48);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row48 begin ] stop
 */



	
	/**
	 * [tDBInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_27", false);
		start_Hash.put("tDBInput_27", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_27";

	
		int tos_count_tDBInput_27 = 0;
		
	
    
	
		    int nb_line_tDBInput_27 = 0;
		    java.sql.Connection conn_tDBInput_27 = null;
				String driverClass_tDBInput_27 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_27 = java.lang.Class.forName(driverClass_tDBInput_27);
				String dbUser_tDBInput_27 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_27 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_27 = decryptedPassword_tDBInput_27;
				
				String url_tDBInput_27 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_27 = java.sql.DriverManager.getConnection(url_tDBInput_27,dbUser_tDBInput_27,dbPwd_tDBInput_27);
		        
				conn_tDBInput_27.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_27 = conn_tDBInput_27.createStatement();

		    String dbquery_tDBInput_27 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"basis_strntcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"bs_subid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_val\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_val\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\"";
			

            	globalMap.put("tDBInput_27_QUERY",dbquery_tDBInput_27);
		    java.sql.ResultSet rs_tDBInput_27 = null;

		    try {
		    	rs_tDBInput_27 = stmt_tDBInput_27.executeQuery(dbquery_tDBInput_27);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_27 = rs_tDBInput_27.getMetaData();
		    	int colQtyInRs_tDBInput_27 = rsmd_tDBInput_27.getColumnCount();

		    String tmpContent_tDBInput_27 = null;
		    
		    
		    while (rs_tDBInput_27.next()) {
		        nb_line_tDBInput_27++;
		        
							if(colQtyInRs_tDBInput_27 < 1) {
								row48.vpid = null;
							} else {
	                         		
        	row48.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_27, 1, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 2) {
								row48.isid = null;
							} else {
	                         		
        	row48.isid = routines.system.JDBCUtil.getString(rs_tDBInput_27, 2, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 3) {
								row48.basis_strntcd = null;
							} else {
		                          
            row48.basis_strntcd = rs_tDBInput_27.getLong(3);
            if(rs_tDBInput_27.wasNull()){
                    row48.basis_strntcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_27 < 4) {
								row48.bs_subid = null;
							} else {
	                         		
        	row48.bs_subid = routines.system.JDBCUtil.getString(rs_tDBInput_27, 4, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 5) {
								row48.strnt_nmrtr_val = null;
							} else {
		                          
            row48.strnt_nmrtr_val = rs_tDBInput_27.getBigDecimal(5);
            if(rs_tDBInput_27.wasNull()){
                    row48.strnt_nmrtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_27 < 6) {
								row48.strnt_nmrtr_uomcd = null;
							} else {
	                         		
        	row48.strnt_nmrtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_27, 6, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 7) {
								row48.strnt_dnmtr_val = null;
							} else {
		                          
            row48.strnt_dnmtr_val = rs_tDBInput_27.getBigDecimal(7);
            if(rs_tDBInput_27.wasNull()){
                    row48.strnt_dnmtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_27 < 8) {
								row48.strnt_dnmtr_uomcd = null;
							} else {
	                         		
        	row48.strnt_dnmtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_27, 8, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 9) {
								row48.col_val_hash = null;
							} else {
		                          
            row48.col_val_hash = rs_tDBInput_27.getObject(9);
            if(rs_tDBInput_27.wasNull()){
                    row48.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_27 begin ] stop
 */
	
	/**
	 * [tDBInput_27 main ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 


	tos_count_tDBInput_27++;

/**
 * [tDBInput_27 main ] stop
 */
	
	/**
	 * [tDBInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row48 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					


			   
			   

					row48Struct row48_HashRow = new row48Struct();
		   	   	   
				
				row48_HashRow.vpid = row48.vpid;
				
				row48_HashRow.isid = row48.isid;
				
				row48_HashRow.basis_strntcd = row48.basis_strntcd;
				
				row48_HashRow.bs_subid = row48.bs_subid;
				
				row48_HashRow.strnt_nmrtr_val = row48.strnt_nmrtr_val;
				
				row48_HashRow.strnt_nmrtr_uomcd = row48.strnt_nmrtr_uomcd;
				
				row48_HashRow.strnt_dnmtr_val = row48.strnt_dnmtr_val;
				
				row48_HashRow.strnt_dnmtr_uomcd = row48.strnt_dnmtr_uomcd;
				
				row48_HashRow.col_val_hash = row48.col_val_hash;
				
			tHash_Lookup_row48.put(row48_HashRow);
			
            




 


	tos_count_tAdvancedHash_row48++;

/**
 * [tAdvancedHash_row48 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row48 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";

	

 



/**
 * [tAdvancedHash_row48 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row48 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";

	

 



/**
 * [tAdvancedHash_row48 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_27 end ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

	}
}finally{
	if (rs_tDBInput_27 != null) {
		rs_tDBInput_27.close();
	}
	if (stmt_tDBInput_27 != null) {
		stmt_tDBInput_27.close();
	}
	if(conn_tDBInput_27 != null && !conn_tDBInput_27.isClosed()) {
		
			conn_tDBInput_27.commit();
			
		
			conn_tDBInput_27.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_27_NB_LINE",nb_line_tDBInput_27);
 

ok_Hash.put("tDBInput_27", true);
end_Hash.put("tDBInput_27", System.currentTimeMillis());




/**
 * [tDBInput_27 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row48 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";

	

tHash_Lookup_row48.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row48", true);
end_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());




/**
 * [tAdvancedHash_row48 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_27 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row48 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";

	

 



/**
 * [tAdvancedHash_row48 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_drugroute_insStruct implements routines.system.IPersistableRow<amp_drugroute_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_drugroute_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_29Struct implements routines.system.IPersistableRow<after_tDBInput_29Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_30Process(globalMap);

		row50Struct row50 = new row50Struct();
amp_drugroute_insStruct amp_drugroute_ins = new amp_drugroute_insStruct();
row52Struct row52 = new row52Struct();






	
	/**
	 * [tLogRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_25", false);
		start_Hash.put("tLogRow_25", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tLogRow_25 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_25 = "|";
		java.io.PrintStream consoleOut_tLogRow_25 = null;	

 		StringBuilder strBuffer_tLogRow_25 = null;
		int nb_line_tLogRow_25 = 0;
///////////////////////    			



 



/**
 * [tLogRow_25 begin ] stop
 */



	
	/**
	 * [tDBOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_22", false);
		start_Hash.put("tDBOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_drugroute_ins");
					}
				
		int tos_count_tDBOutput_22 = 0;
		





String dbschema_tDBOutput_22 = null;
	dbschema_tDBOutput_22 = context.dmd_db_schema;
	

String tableName_tDBOutput_22 = null;
if(dbschema_tDBOutput_22 == null || dbschema_tDBOutput_22.trim().length() == 0) {
	tableName_tDBOutput_22 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_22 = dbschema_tDBOutput_22 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_22 = 0;
int nb_line_update_tDBOutput_22 = 0;
int nb_line_inserted_tDBOutput_22 = 0;
int nb_line_deleted_tDBOutput_22 = 0;
int nb_line_rejected_tDBOutput_22 = 0;

int deletedCount_tDBOutput_22=0;
int updatedCount_tDBOutput_22=0;
int insertedCount_tDBOutput_22=0;
int rejectedCount_tDBOutput_22=0;

boolean whetherReject_tDBOutput_22 = false;

java.sql.Connection conn_tDBOutput_22 = null;
String dbUser_tDBOutput_22 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_22 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_22 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_22 = context.dmd_db_password; 

    String dbPwd_tDBOutput_22 = decryptedPassword_tDBOutput_22;

    conn_tDBOutput_22 = java.sql.DriverManager.getConnection(url_tDBOutput_22,dbUser_tDBOutput_22,dbPwd_tDBOutput_22);
	
	resourceMap.put("conn_tDBOutput_22", conn_tDBOutput_22);
        conn_tDBOutput_22.setAutoCommit(false);
        int commitEvery_tDBOutput_22 = 10000;
        int commitCounter_tDBOutput_22 = 0;


   int batchSize_tDBOutput_22 = 10000;
   int batchSizeCounter_tDBOutput_22=0;

int count_tDBOutput_22=0;
	    String insert_tDBOutput_22 = "INSERT INTO \"" + tableName_tDBOutput_22 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_22 = conn_tDBOutput_22.prepareStatement(insert_tDBOutput_22);
	    resourceMap.put("pstmt_tDBOutput_22", pstmt_tDBOutput_22);
	    

 



/**
 * [tDBOutput_22 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) 
					globalMap.get( "tHash_Lookup_row51" ))
					;					
					
	

row51Struct row51HashKey = new row51Struct();
row51Struct row51Default = new row51Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_drugroute_insStruct amp_drugroute_ins_tmp = new amp_drugroute_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tDBInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_29", false);
		start_Hash.put("tDBInput_29", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_29";

	
		int tos_count_tDBInput_29 = 0;
		
	
    
	
		    int nb_line_tDBInput_29 = 0;
		    java.sql.Connection conn_tDBInput_29 = null;
				String driverClass_tDBInput_29 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_29 = java.lang.Class.forName(driverClass_tDBInput_29);
				String dbUser_tDBInput_29 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_29 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_29 = decryptedPassword_tDBInput_29;
				
				String url_tDBInput_29 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_29 = java.sql.DriverManager.getConnection(url_tDBInput_29,dbUser_tDBInput_29,dbPwd_tDBInput_29);
		        
				conn_tDBInput_29.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_29 = conn_tDBInput_29.createStatement();

		    String dbquery_tDBInput_29 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"routecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\"";
			

            	globalMap.put("tDBInput_29_QUERY",dbquery_tDBInput_29);
		    java.sql.ResultSet rs_tDBInput_29 = null;

		    try {
		    	rs_tDBInput_29 = stmt_tDBInput_29.executeQuery(dbquery_tDBInput_29);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_29 = rs_tDBInput_29.getMetaData();
		    	int colQtyInRs_tDBInput_29 = rsmd_tDBInput_29.getColumnCount();

		    String tmpContent_tDBInput_29 = null;
		    
		    
		    while (rs_tDBInput_29.next()) {
		        nb_line_tDBInput_29++;
		        
							if(colQtyInRs_tDBInput_29 < 1) {
								row50.apid = null;
							} else {
	                         		
        	row50.apid = routines.system.JDBCUtil.getString(rs_tDBInput_29, 1, false);
		                    }
							if(colQtyInRs_tDBInput_29 < 2) {
								row50.routecd = null;
							} else {
	                         		
        	row50.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_29, 2, false);
		                    }
							if(colQtyInRs_tDBInput_29 < 3) {
								row50.col_val_hash = null;
							} else {
		                          
            row50.col_val_hash = rs_tDBInput_29.getObject(3);
            if(rs_tDBInput_29.wasNull()){
                    row50.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_29 begin ] stop
 */
	
	/**
	 * [tDBInput_29 main ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 


	tos_count_tDBInput_29++;

/**
 * [tDBInput_29 main ] stop
 */
	
	/**
	 * [tDBInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 



/**
 * [tDBInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row50");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row51" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow51 = false;
       		  	    	
       		  	    	
 							row51Struct row51ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_15 = false;
								
                        		    		    row51HashKey.apid = row50.apid ;
                        		    		
                        		    		    row51HashKey.col_val_hash = row50.col_val_hash ;
                        		    		

								
		                        	row51HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row51.lookup( row51HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row51.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_15 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row51 != null && tHash_Lookup_row51.getCount(row51HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row51' and it contains more one result from keys :  row51.apid = '" + row51HashKey.apid + "', row51.col_val_hash = '" + row51HashKey.col_val_hash + "'");
								} // G 071
							

							row51Struct row51 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row51Struct fromLookup_row51 = null;
							row51 = row51Default;
										 
							
								 
							
							
								if (tHash_Lookup_row51 !=null && tHash_Lookup_row51.hasNext()) { // G 099
								
							
								
								fromLookup_row51 = tHash_Lookup_row51.next();

							
							
								} // G 099
							
							

							if(fromLookup_row51 != null) {
								row51 = fromLookup_row51;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

amp_drugroute_ins = null;

if(!rejectedInnerJoin_tMap_15 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'amp_drugroute_ins'
// # Filter conditions 
if( rejectedInnerJoin_tMap_15 ) {
amp_drugroute_ins_tmp.dmd_id = row50.apid ;
amp_drugroute_ins_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
amp_drugroute_ins_tmp.dmd_entity_name = "dmd_amp_drugroute";
amp_drugroute_ins_tmp.row_action = "i";
amp_drugroute_ins = amp_drugroute_ins_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "amp_drugroute_ins"
if(amp_drugroute_ins != null) { 



	
	/**
	 * [tDBOutput_22 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_drugroute_ins");
					}
					



            row52 = null;
        whetherReject_tDBOutput_22 = false;
                    if(amp_drugroute_ins.dmd_id == null) {
pstmt_tDBOutput_22.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(1, amp_drugroute_ins.dmd_id);
}

                    if(amp_drugroute_ins.sync_process_id == null) {
pstmt_tDBOutput_22.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(2, amp_drugroute_ins.sync_process_id);
}

                    if(amp_drugroute_ins.dmd_entity_name == null) {
pstmt_tDBOutput_22.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(3, amp_drugroute_ins.dmd_entity_name);
}

                    if(amp_drugroute_ins.row_action == null) {
pstmt_tDBOutput_22.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(4, amp_drugroute_ins.row_action);
}

			
    		pstmt_tDBOutput_22.addBatch();
    		nb_line_tDBOutput_22++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_22++;
    		  
            if(!whetherReject_tDBOutput_22) {
                            row52 = new row52Struct();
                                row52.dmd_id = amp_drugroute_ins.dmd_id;
                                row52.sync_process_id = amp_drugroute_ins.sync_process_id;
                                row52.dmd_entity_name = amp_drugroute_ins.dmd_entity_name;
                                row52.row_action = amp_drugroute_ins.row_action;
            }
    			if ((batchSize_tDBOutput_22 > 0) && (batchSize_tDBOutput_22 <= batchSizeCounter_tDBOutput_22)) {
                try {
						int countSum_tDBOutput_22 = 0;
						    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
				    	
				    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
				    	
            	    	batchSizeCounter_tDBOutput_22 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_22){
				    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
				    	String errormessage_tDBOutput_22;
						if (ne_tDBOutput_22 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
							errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
						}else{
							errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
						}
				    	
				    		if (ne_tDBOutput_22 != null) {
				    			throw(sqle_tDBOutput_22);
				    		}else{
				            	throw(e_tDBOutput_22);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_22++;
                if(commitEvery_tDBOutput_22 <= commitCounter_tDBOutput_22) {
                if ((batchSize_tDBOutput_22 > 0) && (batchSizeCounter_tDBOutput_22 > 0)) {
                try {
                		int countSum_tDBOutput_22 = 0;
                		    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
            	    	
            	    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
            	    	
                batchSizeCounter_tDBOutput_22 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_22){
			    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
			    	String errormessage_tDBOutput_22;
					if (ne_tDBOutput_22 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
						errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
					}else{
						errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
					}
			    	
			    		if (ne_tDBOutput_22 != null) {
			    			throw(sqle_tDBOutput_22);
			    		}else{
			            	throw(e_tDBOutput_22);
			            }
			    	
				}
            }
                	conn_tDBOutput_22.commit();
                	
                	commitCounter_tDBOutput_22=0;
                }

 


	tos_count_tDBOutput_22++;

/**
 * [tDBOutput_22 main ] stop
 */
	
	/**
	 * [tDBOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_begin ] stop
 */
// Start of branch "row52"
if(row52 != null) { 



	
	/**
	 * [tLogRow_25 main ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row52");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_25 = new StringBuilder();




   				
	    		if(row52.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row52.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row52.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row52.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row52.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row52.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row52.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row52.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_25 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_25 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_25);
                    }
                    consoleOut_tLogRow_25.println(strBuffer_tLogRow_25.toString());
                    consoleOut_tLogRow_25.flush();
                    nb_line_tLogRow_25++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_25++;

/**
 * [tLogRow_25 main ] stop
 */
	
	/**
	 * [tLogRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 process_data_end ] stop
 */

} // End of branch "row52"




	
	/**
	 * [tDBOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_end ] stop
 */

} // End of branch "amp_drugroute_ins"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 



/**
 * [tDBInput_29 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_29 end ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

	}
}finally{
	if (rs_tDBInput_29 != null) {
		rs_tDBInput_29.close();
	}
	if (stmt_tDBInput_29 != null) {
		stmt_tDBInput_29.close();
	}
	if(conn_tDBInput_29 != null && !conn_tDBInput_29.isClosed()) {
		
			conn_tDBInput_29.commit();
			
		
			conn_tDBInput_29.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_29_NB_LINE",nb_line_tDBInput_29);
 

ok_Hash.put("tDBInput_29", true);
end_Hash.put("tDBInput_29", System.currentTimeMillis());




/**
 * [tDBInput_29 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row51 != null) {
						tHash_Lookup_row51.endGet();
					}
					globalMap.remove( "tHash_Lookup_row51" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tDBOutput_22 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



	    try {
				int countSum_tDBOutput_22 = 0;
				if (pstmt_tDBOutput_22 != null && batchSizeCounter_tDBOutput_22 > 0) {
						
					for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
						countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_22){
	    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
	    	String errormessage_tDBOutput_22;
			if (ne_tDBOutput_22 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
				errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
			}else{
				errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
			}
	    	
	    		if (ne_tDBOutput_22 != null) {
	    			throw(sqle_tDBOutput_22);
	    		}else{
	            	throw(e_tDBOutput_22);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_22 != null) {
        		
            pstmt_tDBOutput_22.close();
            resourceMap.remove("pstmt_tDBOutput_22");
        }
    resourceMap.put("statementClosed_tDBOutput_22", true);
			
			conn_tDBOutput_22.commit();
			
		
    	conn_tDBOutput_22 .close();
    	
    	resourceMap.put("finish_tDBOutput_22", true);
    	

	nb_line_deleted_tDBOutput_22=nb_line_deleted_tDBOutput_22+ deletedCount_tDBOutput_22;
	nb_line_update_tDBOutput_22=nb_line_update_tDBOutput_22 + updatedCount_tDBOutput_22;
	nb_line_inserted_tDBOutput_22=nb_line_inserted_tDBOutput_22 + insertedCount_tDBOutput_22;
	nb_line_rejected_tDBOutput_22=nb_line_rejected_tDBOutput_22 + rejectedCount_tDBOutput_22;
	
        globalMap.put("tDBOutput_22_NB_LINE",nb_line_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_UPDATED",nb_line_update_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_DELETED",nb_line_deleted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_22);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_drugroute_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_22", true);
end_Hash.put("tDBOutput_22", System.currentTimeMillis());




/**
 * [tDBOutput_22 end ] stop
 */

	
	/**
	 * [tLogRow_25 end ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	


//////
//////
globalMap.put("tLogRow_25_NB_LINE",nb_line_tLogRow_25);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tLogRow_25", true);
end_Hash.put("tLogRow_25", System.currentTimeMillis());




/**
 * [tLogRow_25 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_15"
					     			globalMap.remove("tHash_Lookup_row51"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_29 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 



/**
 * [tDBInput_29 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tDBOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_22 = null;
                if ((pstmtToClose_tDBOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_22")) != null) {
                    pstmtToClose_tDBOutput_22.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_22") == null){
            java.sql.Connection ctn_tDBOutput_22 = null;
            if((ctn_tDBOutput_22 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_22")) != null){
                try {
                    ctn_tDBOutput_22.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_22) {
                    String errorMessage_tDBOutput_22 = "failed to close the connection in tDBOutput_22 :" + sqlEx_tDBOutput_22.getMessage();
                    System.err.println(errorMessage_tDBOutput_22);
                }
            }
        }
    }
 



/**
 * [tDBOutput_22 finally ] stop
 */

	
	/**
	 * [tLogRow_25 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableComparableLookupRow<row51Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row51Struct other = (row51Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row51Struct other) {

		other.apid = this.apid;
	            other.routecd = this.routecd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row51Struct other) {

		other.apid = this.apid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.routecd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.routecd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();




	
	/**
	 * [tAdvancedHash_row51 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row51", false);
		start_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row51";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tAdvancedHash_row51 = 0;
		

			   		// connection name:row51
			   		// source node:tDBInput_30 - inputs:(after_tDBInput_29) outputs:(row51,row51) | target node:tAdvancedHash_row51 - inputs:(row51) outputs:()
			   		// linked node: tMap_15 - inputs:(row50,row51) outputs:(amp_drugroute_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row51 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row51Struct>getLookup(matchingModeEnum_row51);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row51", tHash_Lookup_row51);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row51 begin ] stop
 */



	
	/**
	 * [tDBInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_30", false);
		start_Hash.put("tDBInput_30", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_30";

	
		int tos_count_tDBInput_30 = 0;
		
	
    
	
		    int nb_line_tDBInput_30 = 0;
		    java.sql.Connection conn_tDBInput_30 = null;
				String driverClass_tDBInput_30 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_30 = java.lang.Class.forName(driverClass_tDBInput_30);
				String dbUser_tDBInput_30 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_30 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_30 = decryptedPassword_tDBInput_30;
				
				String url_tDBInput_30 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_30 = java.sql.DriverManager.getConnection(url_tDBInput_30,dbUser_tDBInput_30,dbPwd_tDBInput_30);
		        
				conn_tDBInput_30.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_30 = conn_tDBInput_30.createStatement();

		    String dbquery_tDBInput_30 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\".\"apid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\".\"routecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\"";
			

            	globalMap.put("tDBInput_30_QUERY",dbquery_tDBInput_30);
		    java.sql.ResultSet rs_tDBInput_30 = null;

		    try {
		    	rs_tDBInput_30 = stmt_tDBInput_30.executeQuery(dbquery_tDBInput_30);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_30 = rs_tDBInput_30.getMetaData();
		    	int colQtyInRs_tDBInput_30 = rsmd_tDBInput_30.getColumnCount();

		    String tmpContent_tDBInput_30 = null;
		    
		    
		    while (rs_tDBInput_30.next()) {
		        nb_line_tDBInput_30++;
		        
							if(colQtyInRs_tDBInput_30 < 1) {
								row51.apid = null;
							} else {
	                         		
        	row51.apid = routines.system.JDBCUtil.getString(rs_tDBInput_30, 1, false);
		                    }
							if(colQtyInRs_tDBInput_30 < 2) {
								row51.routecd = null;
							} else {
	                         		
        	row51.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_30, 2, false);
		                    }
							if(colQtyInRs_tDBInput_30 < 3) {
								row51.col_val_hash = null;
							} else {
		                          
            row51.col_val_hash = rs_tDBInput_30.getObject(3);
            if(rs_tDBInput_30.wasNull()){
                    row51.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_30 begin ] stop
 */
	
	/**
	 * [tDBInput_30 main ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 


	tos_count_tDBInput_30++;

/**
 * [tDBInput_30 main ] stop
 */
	
	/**
	 * [tDBInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 



/**
 * [tDBInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row51 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row51");
					}
					


			   
			   

					row51Struct row51_HashRow = new row51Struct();
		   	   	   
				
				row51_HashRow.apid = row51.apid;
				
				row51_HashRow.routecd = row51.routecd;
				
				row51_HashRow.col_val_hash = row51.col_val_hash;
				
			tHash_Lookup_row51.put(row51_HashRow);
			
            




 


	tos_count_tAdvancedHash_row51++;

/**
 * [tAdvancedHash_row51 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row51 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";

	

 



/**
 * [tAdvancedHash_row51 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row51 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";

	

 



/**
 * [tAdvancedHash_row51 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 



/**
 * [tDBInput_30 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_30 end ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

	}
}finally{
	if (rs_tDBInput_30 != null) {
		rs_tDBInput_30.close();
	}
	if (stmt_tDBInput_30 != null) {
		stmt_tDBInput_30.close();
	}
	if(conn_tDBInput_30 != null && !conn_tDBInput_30.isClosed()) {
		
			conn_tDBInput_30.commit();
			
		
			conn_tDBInput_30.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_30_NB_LINE",nb_line_tDBInput_30);
 

ok_Hash.put("tDBInput_30", true);
end_Hash.put("tDBInput_30", System.currentTimeMillis());




/**
 * [tDBInput_30 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row51 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";

	

tHash_Lookup_row51.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row51", true);
end_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());




/**
 * [tAdvancedHash_row51 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_30 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 



/**
 * [tDBInput_30 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row51 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";

	

 



/**
 * [tAdvancedHash_row51 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_drugroute_delStruct implements routines.system.IPersistableRow<amp_drugroute_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_drugroute_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_32Struct implements routines.system.IPersistableRow<after_tDBInput_32Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_31Process(globalMap);

		row54Struct row54 = new row54Struct();
amp_drugroute_delStruct amp_drugroute_del = new amp_drugroute_delStruct();
row56Struct row56 = new row56Struct();






	
	/**
	 * [tLogRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_24", false);
		start_Hash.put("tLogRow_24", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tLogRow_24 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_24 = "|";
		java.io.PrintStream consoleOut_tLogRow_24 = null;	

 		StringBuilder strBuffer_tLogRow_24 = null;
		int nb_line_tLogRow_24 = 0;
///////////////////////    			



 



/**
 * [tLogRow_24 begin ] stop
 */



	
	/**
	 * [tDBOutput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_24", false);
		start_Hash.put("tDBOutput_24", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_drugroute_del");
					}
				
		int tos_count_tDBOutput_24 = 0;
		





String dbschema_tDBOutput_24 = null;
	dbschema_tDBOutput_24 = context.dmd_db_schema;
	

String tableName_tDBOutput_24 = null;
if(dbschema_tDBOutput_24 == null || dbschema_tDBOutput_24.trim().length() == 0) {
	tableName_tDBOutput_24 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_24 = dbschema_tDBOutput_24 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_24 = 0;
int nb_line_update_tDBOutput_24 = 0;
int nb_line_inserted_tDBOutput_24 = 0;
int nb_line_deleted_tDBOutput_24 = 0;
int nb_line_rejected_tDBOutput_24 = 0;

int deletedCount_tDBOutput_24=0;
int updatedCount_tDBOutput_24=0;
int insertedCount_tDBOutput_24=0;
int rejectedCount_tDBOutput_24=0;

boolean whetherReject_tDBOutput_24 = false;

java.sql.Connection conn_tDBOutput_24 = null;
String dbUser_tDBOutput_24 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_24 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_24 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_24 = context.dmd_db_password; 

    String dbPwd_tDBOutput_24 = decryptedPassword_tDBOutput_24;

    conn_tDBOutput_24 = java.sql.DriverManager.getConnection(url_tDBOutput_24,dbUser_tDBOutput_24,dbPwd_tDBOutput_24);
	
	resourceMap.put("conn_tDBOutput_24", conn_tDBOutput_24);
        conn_tDBOutput_24.setAutoCommit(false);
        int commitEvery_tDBOutput_24 = 10000;
        int commitCounter_tDBOutput_24 = 0;


   int batchSize_tDBOutput_24 = 10000;
   int batchSizeCounter_tDBOutput_24=0;

int count_tDBOutput_24=0;
	    String insert_tDBOutput_24 = "INSERT INTO \"" + tableName_tDBOutput_24 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_24 = conn_tDBOutput_24.prepareStatement(insert_tDBOutput_24);
	    resourceMap.put("pstmt_tDBOutput_24", pstmt_tDBOutput_24);
	    

 



/**
 * [tDBOutput_24 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct> tHash_Lookup_row55 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct>) 
					globalMap.get( "tHash_Lookup_row55" ))
					;					
					
	

row55Struct row55HashKey = new row55Struct();
row55Struct row55Default = new row55Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_drugroute_delStruct amp_drugroute_del_tmp = new amp_drugroute_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tDBInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_32", false);
		start_Hash.put("tDBInput_32", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_32";

	
		int tos_count_tDBInput_32 = 0;
		
	
    
	
		    int nb_line_tDBInput_32 = 0;
		    java.sql.Connection conn_tDBInput_32 = null;
				String driverClass_tDBInput_32 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_32 = java.lang.Class.forName(driverClass_tDBInput_32);
				String dbUser_tDBInput_32 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_32 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_32 = decryptedPassword_tDBInput_32;
				
				String url_tDBInput_32 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_32 = java.sql.DriverManager.getConnection(url_tDBInput_32,dbUser_tDBInput_32,dbPwd_tDBInput_32);
		        
				conn_tDBInput_32.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_32 = conn_tDBInput_32.createStatement();

		    String dbquery_tDBInput_32 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\".\"apid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\".\"routecd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_drugroute\"";
			

            	globalMap.put("tDBInput_32_QUERY",dbquery_tDBInput_32);
		    java.sql.ResultSet rs_tDBInput_32 = null;

		    try {
		    	rs_tDBInput_32 = stmt_tDBInput_32.executeQuery(dbquery_tDBInput_32);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_32 = rs_tDBInput_32.getMetaData();
		    	int colQtyInRs_tDBInput_32 = rsmd_tDBInput_32.getColumnCount();

		    String tmpContent_tDBInput_32 = null;
		    
		    
		    while (rs_tDBInput_32.next()) {
		        nb_line_tDBInput_32++;
		        
							if(colQtyInRs_tDBInput_32 < 1) {
								row54.apid = null;
							} else {
	                         		
        	row54.apid = routines.system.JDBCUtil.getString(rs_tDBInput_32, 1, false);
		                    }
							if(colQtyInRs_tDBInput_32 < 2) {
								row54.routecd = null;
							} else {
	                         		
        	row54.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_32, 2, false);
		                    }
							if(colQtyInRs_tDBInput_32 < 3) {
								row54.col_val_hash = null;
							} else {
		                          
            row54.col_val_hash = rs_tDBInput_32.getObject(3);
            if(rs_tDBInput_32.wasNull()){
                    row54.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_32 begin ] stop
 */
	
	/**
	 * [tDBInput_32 main ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 


	tos_count_tDBInput_32++;

/**
 * [tDBInput_32 main ] stop
 */
	
	/**
	 * [tDBInput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row54");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row55" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow55 = false;
       		  	    	
       		  	    	
 							row55Struct row55ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row55HashKey.apid = row54.apid ;
                        		    		
                        		    		    row55HashKey.col_val_hash = row54.col_val_hash ;
                        		    		

								
		                        	row55HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row55.lookup( row55HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row55.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_16 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row55 != null && tHash_Lookup_row55.getCount(row55HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row55' and it contains more one result from keys :  row55.apid = '" + row55HashKey.apid + "', row55.col_val_hash = '" + row55HashKey.col_val_hash + "'");
								} // G 071
							

							row55Struct row55 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row55Struct fromLookup_row55 = null;
							row55 = row55Default;
										 
							
								 
							
							
								if (tHash_Lookup_row55 !=null && tHash_Lookup_row55.hasNext()) { // G 099
								
							
								
								fromLookup_row55 = tHash_Lookup_row55.next();

							
							
								} // G 099
							
							

							if(fromLookup_row55 != null) {
								row55 = fromLookup_row55;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

amp_drugroute_del = null;

if(!rejectedInnerJoin_tMap_16 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'amp_drugroute_del'
// # Filter conditions 
if( rejectedInnerJoin_tMap_16 ) {
amp_drugroute_del_tmp.dmd_id = row54.apid ;
amp_drugroute_del_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
amp_drugroute_del_tmp.dmd_entity_name = "dmd_amp_drugroute";
amp_drugroute_del_tmp.row_action = "d";
amp_drugroute_del = amp_drugroute_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "amp_drugroute_del"
if(amp_drugroute_del != null) { 



	
	/**
	 * [tDBOutput_24 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_drugroute_del");
					}
					



            row56 = null;
        whetherReject_tDBOutput_24 = false;
                    if(amp_drugroute_del.dmd_id == null) {
pstmt_tDBOutput_24.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_24.setString(1, amp_drugroute_del.dmd_id);
}

                    if(amp_drugroute_del.sync_process_id == null) {
pstmt_tDBOutput_24.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_24.setString(2, amp_drugroute_del.sync_process_id);
}

                    if(amp_drugroute_del.dmd_entity_name == null) {
pstmt_tDBOutput_24.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_24.setString(3, amp_drugroute_del.dmd_entity_name);
}

                    if(amp_drugroute_del.row_action == null) {
pstmt_tDBOutput_24.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_24.setString(4, amp_drugroute_del.row_action);
}

			
    		pstmt_tDBOutput_24.addBatch();
    		nb_line_tDBOutput_24++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_24++;
    		  
            if(!whetherReject_tDBOutput_24) {
                            row56 = new row56Struct();
                                row56.dmd_id = amp_drugroute_del.dmd_id;
                                row56.sync_process_id = amp_drugroute_del.sync_process_id;
                                row56.dmd_entity_name = amp_drugroute_del.dmd_entity_name;
                                row56.row_action = amp_drugroute_del.row_action;
            }
    			if ((batchSize_tDBOutput_24 > 0) && (batchSize_tDBOutput_24 <= batchSizeCounter_tDBOutput_24)) {
                try {
						int countSum_tDBOutput_24 = 0;
						    
						for(int countEach_tDBOutput_24: pstmt_tDBOutput_24.executeBatch()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}
				    	
				    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
				    	
            	    	batchSizeCounter_tDBOutput_24 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_24){
				    	java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),sqle_tDBOutput_24=null;
				    	String errormessage_tDBOutput_24;
						if (ne_tDBOutput_24 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_24 = new java.sql.SQLException(e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(), ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
							errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
						}else{
							errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
						}
				    	
				    	int countSum_tDBOutput_24 = 0;
						for(int countEach_tDBOutput_24: e_tDBOutput_24.getUpdateCounts()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}
						
				    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
				    	
				    	System.err.println(errormessage_tDBOutput_24);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_24++;
                if(commitEvery_tDBOutput_24 <= commitCounter_tDBOutput_24) {
                if ((batchSize_tDBOutput_24 > 0) && (batchSizeCounter_tDBOutput_24 > 0)) {
                try {
                		int countSum_tDBOutput_24 = 0;
                		    
						for(int countEach_tDBOutput_24: pstmt_tDBOutput_24.executeBatch()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}
            	    	
            	    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
            	    	
                batchSizeCounter_tDBOutput_24 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_24){
			    	java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),sqle_tDBOutput_24=null;
			    	String errormessage_tDBOutput_24;
					if (ne_tDBOutput_24 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_24 = new java.sql.SQLException(e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(), ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
						errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
					}else{
						errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
					}
			    	
			    	int countSum_tDBOutput_24 = 0;
					for(int countEach_tDBOutput_24: e_tDBOutput_24.getUpdateCounts()) {
						countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
					}
					
			    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
			    	
			    	System.err.println(errormessage_tDBOutput_24);
			    	
				}
            }
                	conn_tDBOutput_24.commit();
                	
                	commitCounter_tDBOutput_24=0;
                }

 


	tos_count_tDBOutput_24++;

/**
 * [tDBOutput_24 main ] stop
 */
	
	/**
	 * [tDBOutput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	

 



/**
 * [tDBOutput_24 process_data_begin ] stop
 */
// Start of branch "row56"
if(row56 != null) { 



	
	/**
	 * [tLogRow_24 main ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row56");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_24 = new StringBuilder();




   				
	    		if(row56.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row56.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row56.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row56.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row56.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row56.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row56.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row56.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_24 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_24 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_24);
                    }
                    consoleOut_tLogRow_24.println(strBuffer_tLogRow_24.toString());
                    consoleOut_tLogRow_24.flush();
                    nb_line_tLogRow_24++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_24++;

/**
 * [tLogRow_24 main ] stop
 */
	
	/**
	 * [tLogRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 process_data_end ] stop
 */

} // End of branch "row56"




	
	/**
	 * [tDBOutput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	

 



/**
 * [tDBOutput_24 process_data_end ] stop
 */

} // End of branch "amp_drugroute_del"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_32 end ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

	}
}finally{
	if (rs_tDBInput_32 != null) {
		rs_tDBInput_32.close();
	}
	if (stmt_tDBInput_32 != null) {
		stmt_tDBInput_32.close();
	}
	if(conn_tDBInput_32 != null && !conn_tDBInput_32.isClosed()) {
		
			conn_tDBInput_32.commit();
			
		
			conn_tDBInput_32.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_32_NB_LINE",nb_line_tDBInput_32);
 

ok_Hash.put("tDBInput_32", true);
end_Hash.put("tDBInput_32", System.currentTimeMillis());




/**
 * [tDBInput_32 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row55 != null) {
						tHash_Lookup_row55.endGet();
					}
					globalMap.remove( "tHash_Lookup_row55" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tDBOutput_24 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	



	    try {
				int countSum_tDBOutput_24 = 0;
				if (pstmt_tDBOutput_24 != null && batchSizeCounter_tDBOutput_24 > 0) {
						
					for(int countEach_tDBOutput_24: pstmt_tDBOutput_24.executeBatch()) {
						countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_24){
	    	java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),sqle_tDBOutput_24=null;
	    	String errormessage_tDBOutput_24;
			if (ne_tDBOutput_24 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_24 = new java.sql.SQLException(e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(), ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
				errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
			}else{
				errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
			}
	    	
	    	int countSum_tDBOutput_24 = 0;
			for(int countEach_tDBOutput_24: e_tDBOutput_24.getUpdateCounts()) {
				countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
			}
			
	    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
	    	
	    	System.err.println(errormessage_tDBOutput_24);
	    	
		}
	    
        if(pstmt_tDBOutput_24 != null) {
        		
            pstmt_tDBOutput_24.close();
            resourceMap.remove("pstmt_tDBOutput_24");
        }
    resourceMap.put("statementClosed_tDBOutput_24", true);
			
			conn_tDBOutput_24.commit();
			
		
    	conn_tDBOutput_24 .close();
    	
    	resourceMap.put("finish_tDBOutput_24", true);
    	

	nb_line_deleted_tDBOutput_24=nb_line_deleted_tDBOutput_24+ deletedCount_tDBOutput_24;
	nb_line_update_tDBOutput_24=nb_line_update_tDBOutput_24 + updatedCount_tDBOutput_24;
	nb_line_inserted_tDBOutput_24=nb_line_inserted_tDBOutput_24 + insertedCount_tDBOutput_24;
	nb_line_rejected_tDBOutput_24=nb_line_rejected_tDBOutput_24 + rejectedCount_tDBOutput_24;
	
        globalMap.put("tDBOutput_24_NB_LINE",nb_line_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_UPDATED",nb_line_update_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_DELETED",nb_line_deleted_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_24);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_drugroute_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_24", true);
end_Hash.put("tDBOutput_24", System.currentTimeMillis());




/**
 * [tDBOutput_24 end ] stop
 */

	
	/**
	 * [tLogRow_24 end ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	


//////
//////
globalMap.put("tLogRow_24_NB_LINE",nb_line_tLogRow_24);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tLogRow_24", true);
end_Hash.put("tLogRow_24", System.currentTimeMillis());




/**
 * [tLogRow_24 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row55"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_32 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tDBOutput_24 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_24") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_24 = null;
                if ((pstmtToClose_tDBOutput_24 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_24")) != null) {
                    pstmtToClose_tDBOutput_24.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_24") == null){
            java.sql.Connection ctn_tDBOutput_24 = null;
            if((ctn_tDBOutput_24 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_24")) != null){
                try {
                    ctn_tDBOutput_24.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_24) {
                    String errorMessage_tDBOutput_24 = "failed to close the connection in tDBOutput_24 :" + sqlEx_tDBOutput_24.getMessage();
                    System.err.println(errorMessage_tDBOutput_24);
                }
            }
        }
    }
 



/**
 * [tDBOutput_24 finally ] stop
 */

	
	/**
	 * [tLogRow_24 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class row55Struct implements routines.system.IPersistableComparableLookupRow<row55Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row55Struct other = (row55Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row55Struct other) {

		other.apid = this.apid;
	            other.routecd = this.routecd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row55Struct other) {

		other.apid = this.apid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.routecd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.routecd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();




	
	/**
	 * [tAdvancedHash_row55 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row55", false);
		start_Hash.put("tAdvancedHash_row55", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row55";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tAdvancedHash_row55 = 0;
		

			   		// connection name:row55
			   		// source node:tDBInput_31 - inputs:(after_tDBInput_32) outputs:(row55,row55) | target node:tAdvancedHash_row55 - inputs:(row55) outputs:()
			   		// linked node: tMap_16 - inputs:(row54,row55) outputs:(amp_drugroute_del)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row55 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct> tHash_Lookup_row55 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row55Struct>getLookup(matchingModeEnum_row55);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row55", tHash_Lookup_row55);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row55 begin ] stop
 */



	
	/**
	 * [tDBInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_31", false);
		start_Hash.put("tDBInput_31", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_31";

	
		int tos_count_tDBInput_31 = 0;
		
	
    
	
		    int nb_line_tDBInput_31 = 0;
		    java.sql.Connection conn_tDBInput_31 = null;
				String driverClass_tDBInput_31 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_31 = java.lang.Class.forName(driverClass_tDBInput_31);
				String dbUser_tDBInput_31 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_31 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_31 = decryptedPassword_tDBInput_31;
				
				String url_tDBInput_31 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_31 = java.sql.DriverManager.getConnection(url_tDBInput_31,dbUser_tDBInput_31,dbPwd_tDBInput_31);
		        
				conn_tDBInput_31.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_31 = conn_tDBInput_31.createStatement();

		    String dbquery_tDBInput_31 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"routecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\"";
			

            	globalMap.put("tDBInput_31_QUERY",dbquery_tDBInput_31);
		    java.sql.ResultSet rs_tDBInput_31 = null;

		    try {
		    	rs_tDBInput_31 = stmt_tDBInput_31.executeQuery(dbquery_tDBInput_31);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_31 = rs_tDBInput_31.getMetaData();
		    	int colQtyInRs_tDBInput_31 = rsmd_tDBInput_31.getColumnCount();

		    String tmpContent_tDBInput_31 = null;
		    
		    
		    while (rs_tDBInput_31.next()) {
		        nb_line_tDBInput_31++;
		        
							if(colQtyInRs_tDBInput_31 < 1) {
								row55.apid = null;
							} else {
	                         		
        	row55.apid = routines.system.JDBCUtil.getString(rs_tDBInput_31, 1, false);
		                    }
							if(colQtyInRs_tDBInput_31 < 2) {
								row55.routecd = null;
							} else {
	                         		
        	row55.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_31, 2, false);
		                    }
							if(colQtyInRs_tDBInput_31 < 3) {
								row55.col_val_hash = null;
							} else {
		                          
            row55.col_val_hash = rs_tDBInput_31.getObject(3);
            if(rs_tDBInput_31.wasNull()){
                    row55.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_31 begin ] stop
 */
	
	/**
	 * [tDBInput_31 main ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 


	tos_count_tDBInput_31++;

/**
 * [tDBInput_31 main ] stop
 */
	
	/**
	 * [tDBInput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 



/**
 * [tDBInput_31 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row55");
					}
					


			   
			   

					row55Struct row55_HashRow = new row55Struct();
		   	   	   
				
				row55_HashRow.apid = row55.apid;
				
				row55_HashRow.routecd = row55.routecd;
				
				row55_HashRow.col_val_hash = row55.col_val_hash;
				
			tHash_Lookup_row55.put(row55_HashRow);
			
            




 


	tos_count_tAdvancedHash_row55++;

/**
 * [tAdvancedHash_row55 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row55 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";

	

 



/**
 * [tAdvancedHash_row55 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row55 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";

	

 



/**
 * [tAdvancedHash_row55 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 



/**
 * [tDBInput_31 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_31 end ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

	}
}finally{
	if (rs_tDBInput_31 != null) {
		rs_tDBInput_31.close();
	}
	if (stmt_tDBInput_31 != null) {
		stmt_tDBInput_31.close();
	}
	if(conn_tDBInput_31 != null && !conn_tDBInput_31.isClosed()) {
		
			conn_tDBInput_31.commit();
			
		
			conn_tDBInput_31.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_31_NB_LINE",nb_line_tDBInput_31);
 

ok_Hash.put("tDBInput_31", true);
end_Hash.put("tDBInput_31", System.currentTimeMillis());




/**
 * [tDBInput_31 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";

	

tHash_Lookup_row55.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row55", true);
end_Hash.put("tAdvancedHash_row55", System.currentTimeMillis());




/**
 * [tAdvancedHash_row55 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_31 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 



/**
 * [tDBInput_31 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";

	

 



/**
 * [tAdvancedHash_row55 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_31_SUBPROCESS_STATE", 1);
	}
	


public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_excipient_insStruct implements routines.system.IPersistableRow<amp_excipient_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_excipient_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_33Struct implements routines.system.IPersistableRow<after_tDBInput_33Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_34Process(globalMap);

		row57Struct row57 = new row57Struct();
amp_excipient_insStruct amp_excipient_ins = new amp_excipient_insStruct();
row59Struct row59 = new row59Struct();






	
	/**
	 * [tLogRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_28", false);
		start_Hash.put("tLogRow_28", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tLogRow_28 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_28 = "|";
		java.io.PrintStream consoleOut_tLogRow_28 = null;	

 		StringBuilder strBuffer_tLogRow_28 = null;
		int nb_line_tLogRow_28 = 0;
///////////////////////    			



 



/**
 * [tLogRow_28 begin ] stop
 */



	
	/**
	 * [tDBOutput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_25", false);
		start_Hash.put("tDBOutput_25", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_excipient_ins");
					}
				
		int tos_count_tDBOutput_25 = 0;
		





String dbschema_tDBOutput_25 = null;
	dbschema_tDBOutput_25 = context.dmd_db_schema;
	

String tableName_tDBOutput_25 = null;
if(dbschema_tDBOutput_25 == null || dbschema_tDBOutput_25.trim().length() == 0) {
	tableName_tDBOutput_25 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_25 = dbschema_tDBOutput_25 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_25 = 0;
int nb_line_update_tDBOutput_25 = 0;
int nb_line_inserted_tDBOutput_25 = 0;
int nb_line_deleted_tDBOutput_25 = 0;
int nb_line_rejected_tDBOutput_25 = 0;

int deletedCount_tDBOutput_25=0;
int updatedCount_tDBOutput_25=0;
int insertedCount_tDBOutput_25=0;
int rejectedCount_tDBOutput_25=0;

boolean whetherReject_tDBOutput_25 = false;

java.sql.Connection conn_tDBOutput_25 = null;
String dbUser_tDBOutput_25 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_25 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_25 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_25 = context.dmd_db_password; 

    String dbPwd_tDBOutput_25 = decryptedPassword_tDBOutput_25;

    conn_tDBOutput_25 = java.sql.DriverManager.getConnection(url_tDBOutput_25,dbUser_tDBOutput_25,dbPwd_tDBOutput_25);
	
	resourceMap.put("conn_tDBOutput_25", conn_tDBOutput_25);
        conn_tDBOutput_25.setAutoCommit(false);
        int commitEvery_tDBOutput_25 = 10000;
        int commitCounter_tDBOutput_25 = 0;


   int batchSize_tDBOutput_25 = 10000;
   int batchSizeCounter_tDBOutput_25=0;

int count_tDBOutput_25=0;
	    String insert_tDBOutput_25 = "INSERT INTO \"" + tableName_tDBOutput_25 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_25 = conn_tDBOutput_25.prepareStatement(insert_tDBOutput_25);
	    resourceMap.put("pstmt_tDBOutput_25", pstmt_tDBOutput_25);
	    

 



/**
 * [tDBOutput_25 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct> tHash_Lookup_row58 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct>) 
					globalMap.get( "tHash_Lookup_row58" ))
					;					
					
	

row58Struct row58HashKey = new row58Struct();
row58Struct row58Default = new row58Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_excipient_insStruct amp_excipient_ins_tmp = new amp_excipient_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tDBInput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_33", false);
		start_Hash.put("tDBInput_33", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_33";

	
		int tos_count_tDBInput_33 = 0;
		
	
    
	
		    int nb_line_tDBInput_33 = 0;
		    java.sql.Connection conn_tDBInput_33 = null;
				String driverClass_tDBInput_33 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_33 = java.lang.Class.forName(driverClass_tDBInput_33);
				String dbUser_tDBInput_33 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_33 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_33 = decryptedPassword_tDBInput_33;
				
				String url_tDBInput_33 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_33 = java.sql.DriverManager.getConnection(url_tDBInput_33,dbUser_tDBInput_33,dbPwd_tDBInput_33);
		        
				conn_tDBInput_33.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_33 = conn_tDBInput_33.createStatement();

		    String dbquery_tDBInput_33 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"strnth\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"strnth_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\"";
			

            	globalMap.put("tDBInput_33_QUERY",dbquery_tDBInput_33);
		    java.sql.ResultSet rs_tDBInput_33 = null;

		    try {
		    	rs_tDBInput_33 = stmt_tDBInput_33.executeQuery(dbquery_tDBInput_33);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_33 = rs_tDBInput_33.getMetaData();
		    	int colQtyInRs_tDBInput_33 = rsmd_tDBInput_33.getColumnCount();

		    String tmpContent_tDBInput_33 = null;
		    
		    
		    while (rs_tDBInput_33.next()) {
		        nb_line_tDBInput_33++;
		        
							if(colQtyInRs_tDBInput_33 < 1) {
								row57.apid = null;
							} else {
	                         		
        	row57.apid = routines.system.JDBCUtil.getString(rs_tDBInput_33, 1, false);
		                    }
							if(colQtyInRs_tDBInput_33 < 2) {
								row57.isid = null;
							} else {
	                         		
        	row57.isid = routines.system.JDBCUtil.getString(rs_tDBInput_33, 2, false);
		                    }
							if(colQtyInRs_tDBInput_33 < 3) {
								row57.strnth = null;
							} else {
		                          
            row57.strnth = rs_tDBInput_33.getBigDecimal(3);
            if(rs_tDBInput_33.wasNull()){
                    row57.strnth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_33 < 4) {
								row57.strnth_uomcd = null;
							} else {
	                         		
        	row57.strnth_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_33, 4, false);
		                    }
							if(colQtyInRs_tDBInput_33 < 5) {
								row57.col_val_hash = null;
							} else {
		                          
            row57.col_val_hash = rs_tDBInput_33.getObject(5);
            if(rs_tDBInput_33.wasNull()){
                    row57.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_33 begin ] stop
 */
	
	/**
	 * [tDBInput_33 main ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 


	tos_count_tDBInput_33++;

/**
 * [tDBInput_33 main ] stop
 */
	
	/**
	 * [tDBInput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 



/**
 * [tDBInput_33 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row57");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row58" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow58 = false;
       		  	    	
       		  	    	
 							row58Struct row58ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_17) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_17 = false;
								
                        		    		    row58HashKey.apid = row57.apid ;
                        		    		
                        		    		    row58HashKey.col_val_hash = row57.col_val_hash ;
                        		    		

								
		                        	row58HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row58.lookup( row58HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row58.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_17 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row58 != null && tHash_Lookup_row58.getCount(row58HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row58' and it contains more one result from keys :  row58.apid = '" + row58HashKey.apid + "', row58.col_val_hash = '" + row58HashKey.col_val_hash + "'");
								} // G 071
							

							row58Struct row58 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row58Struct fromLookup_row58 = null;
							row58 = row58Default;
										 
							
								 
							
							
								if (tHash_Lookup_row58 !=null && tHash_Lookup_row58.hasNext()) { // G 099
								
							
								
								fromLookup_row58 = tHash_Lookup_row58.next();

							
							
								} // G 099
							
							

							if(fromLookup_row58 != null) {
								row58 = fromLookup_row58;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

amp_excipient_ins = null;

if(!rejectedInnerJoin_tMap_17 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'amp_excipient_ins'
// # Filter conditions 
if( rejectedInnerJoin_tMap_17 ) {
amp_excipient_ins_tmp.dmd_id = row57.apid ;
amp_excipient_ins_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
amp_excipient_ins_tmp.dmd_entity_name = "dmd_amp_excipient";
amp_excipient_ins_tmp.row_action = "i";
amp_excipient_ins = amp_excipient_ins_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "amp_excipient_ins"
if(amp_excipient_ins != null) { 



	
	/**
	 * [tDBOutput_25 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_excipient_ins");
					}
					



            row59 = null;
        whetherReject_tDBOutput_25 = false;
                    if(amp_excipient_ins.dmd_id == null) {
pstmt_tDBOutput_25.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_25.setString(1, amp_excipient_ins.dmd_id);
}

                    if(amp_excipient_ins.sync_process_id == null) {
pstmt_tDBOutput_25.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_25.setString(2, amp_excipient_ins.sync_process_id);
}

                    if(amp_excipient_ins.dmd_entity_name == null) {
pstmt_tDBOutput_25.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_25.setString(3, amp_excipient_ins.dmd_entity_name);
}

                    if(amp_excipient_ins.row_action == null) {
pstmt_tDBOutput_25.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_25.setString(4, amp_excipient_ins.row_action);
}

			
    		pstmt_tDBOutput_25.addBatch();
    		nb_line_tDBOutput_25++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_25++;
    		  
            if(!whetherReject_tDBOutput_25) {
                            row59 = new row59Struct();
                                row59.dmd_id = amp_excipient_ins.dmd_id;
                                row59.sync_process_id = amp_excipient_ins.sync_process_id;
                                row59.dmd_entity_name = amp_excipient_ins.dmd_entity_name;
                                row59.row_action = amp_excipient_ins.row_action;
            }
    			if ((batchSize_tDBOutput_25 > 0) && (batchSize_tDBOutput_25 <= batchSizeCounter_tDBOutput_25)) {
                try {
						int countSum_tDBOutput_25 = 0;
						    
						for(int countEach_tDBOutput_25: pstmt_tDBOutput_25.executeBatch()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}
				    	
				    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
				    	
            	    	batchSizeCounter_tDBOutput_25 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_25){
				    	java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),sqle_tDBOutput_25=null;
				    	String errormessage_tDBOutput_25;
						if (ne_tDBOutput_25 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_25 = new java.sql.SQLException(e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(), ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
							errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
						}else{
							errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
						}
				    	
				    	int countSum_tDBOutput_25 = 0;
						for(int countEach_tDBOutput_25: e_tDBOutput_25.getUpdateCounts()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}
						
				    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
				    	
				    	System.err.println(errormessage_tDBOutput_25);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_25++;
                if(commitEvery_tDBOutput_25 <= commitCounter_tDBOutput_25) {
                if ((batchSize_tDBOutput_25 > 0) && (batchSizeCounter_tDBOutput_25 > 0)) {
                try {
                		int countSum_tDBOutput_25 = 0;
                		    
						for(int countEach_tDBOutput_25: pstmt_tDBOutput_25.executeBatch()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}
            	    	
            	    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
            	    	
                batchSizeCounter_tDBOutput_25 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_25){
			    	java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),sqle_tDBOutput_25=null;
			    	String errormessage_tDBOutput_25;
					if (ne_tDBOutput_25 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_25 = new java.sql.SQLException(e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(), ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
						errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
					}else{
						errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
					}
			    	
			    	int countSum_tDBOutput_25 = 0;
					for(int countEach_tDBOutput_25: e_tDBOutput_25.getUpdateCounts()) {
						countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
					}
					
			    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
			    	
			    	System.err.println(errormessage_tDBOutput_25);
			    	
				}
            }
                	conn_tDBOutput_25.commit();
                	
                	commitCounter_tDBOutput_25=0;
                }

 


	tos_count_tDBOutput_25++;

/**
 * [tDBOutput_25 main ] stop
 */
	
	/**
	 * [tDBOutput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	

 



/**
 * [tDBOutput_25 process_data_begin ] stop
 */
// Start of branch "row59"
if(row59 != null) { 



	
	/**
	 * [tLogRow_28 main ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row59");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_28 = new StringBuilder();




   				
	    		if(row59.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_28.append(
				                String.valueOf(row59.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_28.append("|");
    			


   				
	    		if(row59.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_28.append(
				                String.valueOf(row59.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_28.append("|");
    			


   				
	    		if(row59.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_28.append(
				                String.valueOf(row59.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_28.append("|");
    			


   				
	    		if(row59.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_28.append(
				                String.valueOf(row59.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_28 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_28 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_28);
                    }
                    consoleOut_tLogRow_28.println(strBuffer_tLogRow_28.toString());
                    consoleOut_tLogRow_28.flush();
                    nb_line_tLogRow_28++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_28++;

/**
 * [tLogRow_28 main ] stop
 */
	
	/**
	 * [tLogRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	

 



/**
 * [tLogRow_28 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	

 



/**
 * [tLogRow_28 process_data_end ] stop
 */

} // End of branch "row59"




	
	/**
	 * [tDBOutput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	

 



/**
 * [tDBOutput_25 process_data_end ] stop
 */

} // End of branch "amp_excipient_ins"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 



/**
 * [tDBInput_33 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_33 end ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

	}
}finally{
	if (rs_tDBInput_33 != null) {
		rs_tDBInput_33.close();
	}
	if (stmt_tDBInput_33 != null) {
		stmt_tDBInput_33.close();
	}
	if(conn_tDBInput_33 != null && !conn_tDBInput_33.isClosed()) {
		
			conn_tDBInput_33.commit();
			
		
			conn_tDBInput_33.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_33_NB_LINE",nb_line_tDBInput_33);
 

ok_Hash.put("tDBInput_33", true);
end_Hash.put("tDBInput_33", System.currentTimeMillis());




/**
 * [tDBInput_33 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row58 != null) {
						tHash_Lookup_row58.endGet();
					}
					globalMap.remove( "tHash_Lookup_row58" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tDBOutput_25 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	



	    try {
				int countSum_tDBOutput_25 = 0;
				if (pstmt_tDBOutput_25 != null && batchSizeCounter_tDBOutput_25 > 0) {
						
					for(int countEach_tDBOutput_25: pstmt_tDBOutput_25.executeBatch()) {
						countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_25){
	    	java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),sqle_tDBOutput_25=null;
	    	String errormessage_tDBOutput_25;
			if (ne_tDBOutput_25 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_25 = new java.sql.SQLException(e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(), ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
				errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
			}else{
				errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
			}
	    	
	    	int countSum_tDBOutput_25 = 0;
			for(int countEach_tDBOutput_25: e_tDBOutput_25.getUpdateCounts()) {
				countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
			}
			
	    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
	    	
	    	System.err.println(errormessage_tDBOutput_25);
	    	
		}
	    
        if(pstmt_tDBOutput_25 != null) {
        		
            pstmt_tDBOutput_25.close();
            resourceMap.remove("pstmt_tDBOutput_25");
        }
    resourceMap.put("statementClosed_tDBOutput_25", true);
			
			conn_tDBOutput_25.commit();
			
		
    	conn_tDBOutput_25 .close();
    	
    	resourceMap.put("finish_tDBOutput_25", true);
    	

	nb_line_deleted_tDBOutput_25=nb_line_deleted_tDBOutput_25+ deletedCount_tDBOutput_25;
	nb_line_update_tDBOutput_25=nb_line_update_tDBOutput_25 + updatedCount_tDBOutput_25;
	nb_line_inserted_tDBOutput_25=nb_line_inserted_tDBOutput_25 + insertedCount_tDBOutput_25;
	nb_line_rejected_tDBOutput_25=nb_line_rejected_tDBOutput_25 + rejectedCount_tDBOutput_25;
	
        globalMap.put("tDBOutput_25_NB_LINE",nb_line_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_UPDATED",nb_line_update_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_DELETED",nb_line_deleted_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_25);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_excipient_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_25", true);
end_Hash.put("tDBOutput_25", System.currentTimeMillis());




/**
 * [tDBOutput_25 end ] stop
 */

	
	/**
	 * [tLogRow_28 end ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	


//////
//////
globalMap.put("tLogRow_28_NB_LINE",nb_line_tLogRow_28);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tLogRow_28", true);
end_Hash.put("tLogRow_28", System.currentTimeMillis());




/**
 * [tLogRow_28 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_17"
					     			globalMap.remove("tHash_Lookup_row58"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_33 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 



/**
 * [tDBInput_33 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tDBOutput_25 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_25") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_25 = null;
                if ((pstmtToClose_tDBOutput_25 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_25")) != null) {
                    pstmtToClose_tDBOutput_25.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_25") == null){
            java.sql.Connection ctn_tDBOutput_25 = null;
            if((ctn_tDBOutput_25 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_25")) != null){
                try {
                    ctn_tDBOutput_25.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_25) {
                    String errorMessage_tDBOutput_25 = "failed to close the connection in tDBOutput_25 :" + sqlEx_tDBOutput_25.getMessage();
                    System.err.println(errorMessage_tDBOutput_25);
                }
            }
        }
    }
 



/**
 * [tDBOutput_25 finally ] stop
 */

	
	/**
	 * [tLogRow_28 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	

 



/**
 * [tLogRow_28 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_33_SUBPROCESS_STATE", 1);
	}
	


public static class row58Struct implements routines.system.IPersistableComparableLookupRow<row58Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row58Struct other = (row58Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row58Struct other) {

		other.apid = this.apid;
	            other.isid = this.isid;
	            other.strnth = this.strnth;
	            other.strnth_uomcd = this.strnth_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row58Struct other) {

		other.apid = this.apid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.isid = readString(dis,ois);
					
       			    	this.strnth = (BigDecimal) ois.readObject();
					
						this.strnth_uomcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.isid, dos, oos);
					
       			    	oos.writeObject(this.strnth);
					
						writeString(this.strnth_uomcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row58Struct row58 = new row58Struct();




	
	/**
	 * [tAdvancedHash_row58 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row58", false);
		start_Hash.put("tAdvancedHash_row58", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row58";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tAdvancedHash_row58 = 0;
		

			   		// connection name:row58
			   		// source node:tDBInput_34 - inputs:(after_tDBInput_33) outputs:(row58,row58) | target node:tAdvancedHash_row58 - inputs:(row58) outputs:()
			   		// linked node: tMap_17 - inputs:(row57,row58) outputs:(amp_excipient_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row58 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct> tHash_Lookup_row58 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row58Struct>getLookup(matchingModeEnum_row58);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row58", tHash_Lookup_row58);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row58 begin ] stop
 */



	
	/**
	 * [tDBInput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_34", false);
		start_Hash.put("tDBInput_34", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_34";

	
		int tos_count_tDBInput_34 = 0;
		
	
    
	
		    int nb_line_tDBInput_34 = 0;
		    java.sql.Connection conn_tDBInput_34 = null;
				String driverClass_tDBInput_34 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_34 = java.lang.Class.forName(driverClass_tDBInput_34);
				String dbUser_tDBInput_34 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_34 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_34 = decryptedPassword_tDBInput_34;
				
				String url_tDBInput_34 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_34 = java.sql.DriverManager.getConnection(url_tDBInput_34,dbUser_tDBInput_34,dbPwd_tDBInput_34);
		        
				conn_tDBInput_34.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_34 = conn_tDBInput_34.createStatement();

		    String dbquery_tDBInput_34 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"apid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"isid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"strnth\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"strnth_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\"";
			

            	globalMap.put("tDBInput_34_QUERY",dbquery_tDBInput_34);
		    java.sql.ResultSet rs_tDBInput_34 = null;

		    try {
		    	rs_tDBInput_34 = stmt_tDBInput_34.executeQuery(dbquery_tDBInput_34);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_34 = rs_tDBInput_34.getMetaData();
		    	int colQtyInRs_tDBInput_34 = rsmd_tDBInput_34.getColumnCount();

		    String tmpContent_tDBInput_34 = null;
		    
		    
		    while (rs_tDBInput_34.next()) {
		        nb_line_tDBInput_34++;
		        
							if(colQtyInRs_tDBInput_34 < 1) {
								row58.apid = null;
							} else {
	                         		
        	row58.apid = routines.system.JDBCUtil.getString(rs_tDBInput_34, 1, false);
		                    }
							if(colQtyInRs_tDBInput_34 < 2) {
								row58.isid = null;
							} else {
	                         		
        	row58.isid = routines.system.JDBCUtil.getString(rs_tDBInput_34, 2, false);
		                    }
							if(colQtyInRs_tDBInput_34 < 3) {
								row58.strnth = null;
							} else {
		                          
            row58.strnth = rs_tDBInput_34.getBigDecimal(3);
            if(rs_tDBInput_34.wasNull()){
                    row58.strnth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_34 < 4) {
								row58.strnth_uomcd = null;
							} else {
	                         		
        	row58.strnth_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_34, 4, false);
		                    }
							if(colQtyInRs_tDBInput_34 < 5) {
								row58.col_val_hash = null;
							} else {
		                          
            row58.col_val_hash = rs_tDBInput_34.getObject(5);
            if(rs_tDBInput_34.wasNull()){
                    row58.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_34 begin ] stop
 */
	
	/**
	 * [tDBInput_34 main ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 


	tos_count_tDBInput_34++;

/**
 * [tDBInput_34 main ] stop
 */
	
	/**
	 * [tDBInput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 



/**
 * [tDBInput_34 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row58 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row58";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row58");
					}
					


			   
			   

					row58Struct row58_HashRow = new row58Struct();
		   	   	   
				
				row58_HashRow.apid = row58.apid;
				
				row58_HashRow.isid = row58.isid;
				
				row58_HashRow.strnth = row58.strnth;
				
				row58_HashRow.strnth_uomcd = row58.strnth_uomcd;
				
				row58_HashRow.col_val_hash = row58.col_val_hash;
				
			tHash_Lookup_row58.put(row58_HashRow);
			
            




 


	tos_count_tAdvancedHash_row58++;

/**
 * [tAdvancedHash_row58 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row58 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row58";

	

 



/**
 * [tAdvancedHash_row58 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row58 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row58";

	

 



/**
 * [tAdvancedHash_row58 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 



/**
 * [tDBInput_34 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_34 end ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

	}
}finally{
	if (rs_tDBInput_34 != null) {
		rs_tDBInput_34.close();
	}
	if (stmt_tDBInput_34 != null) {
		stmt_tDBInput_34.close();
	}
	if(conn_tDBInput_34 != null && !conn_tDBInput_34.isClosed()) {
		
			conn_tDBInput_34.commit();
			
		
			conn_tDBInput_34.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_34_NB_LINE",nb_line_tDBInput_34);
 

ok_Hash.put("tDBInput_34", true);
end_Hash.put("tDBInput_34", System.currentTimeMillis());




/**
 * [tDBInput_34 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row58 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row58";

	

tHash_Lookup_row58.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row58", true);
end_Hash.put("tAdvancedHash_row58", System.currentTimeMillis());




/**
 * [tAdvancedHash_row58 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_34 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 



/**
 * [tDBInput_34 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row58 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row58";

	

 



/**
 * [tAdvancedHash_row58 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_34_SUBPROCESS_STATE", 1);
	}
	


public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_excipient_delStruct implements routines.system.IPersistableRow<amp_excipient_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_excipient_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_36Struct implements routines.system.IPersistableRow<after_tDBInput_36Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_35Process(globalMap);

		row61Struct row61 = new row61Struct();
amp_excipient_delStruct amp_excipient_del = new amp_excipient_delStruct();
row63Struct row63 = new row63Struct();






	
	/**
	 * [tLogRow_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_30", false);
		start_Hash.put("tLogRow_30", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tLogRow_30 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_30 = "|";
		java.io.PrintStream consoleOut_tLogRow_30 = null;	

 		StringBuilder strBuffer_tLogRow_30 = null;
		int nb_line_tLogRow_30 = 0;
///////////////////////    			



 



/**
 * [tLogRow_30 begin ] stop
 */



	
	/**
	 * [tDBOutput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_27", false);
		start_Hash.put("tDBOutput_27", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_excipient_del");
					}
				
		int tos_count_tDBOutput_27 = 0;
		





String dbschema_tDBOutput_27 = null;
	dbschema_tDBOutput_27 = context.dmd_db_schema;
	

String tableName_tDBOutput_27 = null;
if(dbschema_tDBOutput_27 == null || dbschema_tDBOutput_27.trim().length() == 0) {
	tableName_tDBOutput_27 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_27 = dbschema_tDBOutput_27 + "\".\"" + ("dmd_sync_log");
}

int nb_line_tDBOutput_27 = 0;
int nb_line_update_tDBOutput_27 = 0;
int nb_line_inserted_tDBOutput_27 = 0;
int nb_line_deleted_tDBOutput_27 = 0;
int nb_line_rejected_tDBOutput_27 = 0;

int deletedCount_tDBOutput_27=0;
int updatedCount_tDBOutput_27=0;
int insertedCount_tDBOutput_27=0;
int rejectedCount_tDBOutput_27=0;

boolean whetherReject_tDBOutput_27 = false;

java.sql.Connection conn_tDBOutput_27 = null;
String dbUser_tDBOutput_27 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_27 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_27 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_27 = context.dmd_db_password; 

    String dbPwd_tDBOutput_27 = decryptedPassword_tDBOutput_27;

    conn_tDBOutput_27 = java.sql.DriverManager.getConnection(url_tDBOutput_27,dbUser_tDBOutput_27,dbPwd_tDBOutput_27);
	
	resourceMap.put("conn_tDBOutput_27", conn_tDBOutput_27);
        conn_tDBOutput_27.setAutoCommit(false);
        int commitEvery_tDBOutput_27 = 10000;
        int commitCounter_tDBOutput_27 = 0;


   int batchSize_tDBOutput_27 = 10000;
   int batchSizeCounter_tDBOutput_27=0;

int count_tDBOutput_27=0;
	    String insert_tDBOutput_27 = "INSERT INTO \"" + tableName_tDBOutput_27 + "\" (\"dmd_id\",\"sync_process_id\",\"dmd_entity_name\",\"row_action\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_27 = conn_tDBOutput_27.prepareStatement(insert_tDBOutput_27);
	    resourceMap.put("pstmt_tDBOutput_27", pstmt_tDBOutput_27);
	    

 



/**
 * [tDBOutput_27 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct> tHash_Lookup_row62 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct>) 
					globalMap.get( "tHash_Lookup_row62" ))
					;					
					
	

row62Struct row62HashKey = new row62Struct();
row62Struct row62Default = new row62Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_excipient_delStruct amp_excipient_del_tmp = new amp_excipient_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tDBInput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_36", false);
		start_Hash.put("tDBInput_36", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_36";

	
		int tos_count_tDBInput_36 = 0;
		
	
    
	
		    int nb_line_tDBInput_36 = 0;
		    java.sql.Connection conn_tDBInput_36 = null;
				String driverClass_tDBInput_36 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_36 = java.lang.Class.forName(driverClass_tDBInput_36);
				String dbUser_tDBInput_36 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_36 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_36 = decryptedPassword_tDBInput_36;
				
				String url_tDBInput_36 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_36 = java.sql.DriverManager.getConnection(url_tDBInput_36,dbUser_tDBInput_36,dbPwd_tDBInput_36);
		        
				conn_tDBInput_36.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_36 = conn_tDBInput_36.createStatement();

		    String dbquery_tDBInput_36 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"apid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"isid\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"strnth\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"strnth_uomcd\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\".\"col_val_hash\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_amp_excipient\"";
			

            	globalMap.put("tDBInput_36_QUERY",dbquery_tDBInput_36);
		    java.sql.ResultSet rs_tDBInput_36 = null;

		    try {
		    	rs_tDBInput_36 = stmt_tDBInput_36.executeQuery(dbquery_tDBInput_36);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_36 = rs_tDBInput_36.getMetaData();
		    	int colQtyInRs_tDBInput_36 = rsmd_tDBInput_36.getColumnCount();

		    String tmpContent_tDBInput_36 = null;
		    
		    
		    while (rs_tDBInput_36.next()) {
		        nb_line_tDBInput_36++;
		        
							if(colQtyInRs_tDBInput_36 < 1) {
								row61.apid = null;
							} else {
	                         		
        	row61.apid = routines.system.JDBCUtil.getString(rs_tDBInput_36, 1, false);
		                    }
							if(colQtyInRs_tDBInput_36 < 2) {
								row61.isid = null;
							} else {
	                         		
        	row61.isid = routines.system.JDBCUtil.getString(rs_tDBInput_36, 2, false);
		                    }
							if(colQtyInRs_tDBInput_36 < 3) {
								row61.strnth = null;
							} else {
		                          
            row61.strnth = rs_tDBInput_36.getBigDecimal(3);
            if(rs_tDBInput_36.wasNull()){
                    row61.strnth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_36 < 4) {
								row61.strnth_uomcd = null;
							} else {
	                         		
        	row61.strnth_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_36, 4, false);
		                    }
							if(colQtyInRs_tDBInput_36 < 5) {
								row61.col_val_hash = null;
							} else {
		                          
            row61.col_val_hash = rs_tDBInput_36.getObject(5);
            if(rs_tDBInput_36.wasNull()){
                    row61.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_36 begin ] stop
 */
	
	/**
	 * [tDBInput_36 main ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 


	tos_count_tDBInput_36++;

/**
 * [tDBInput_36 main ] stop
 */
	
	/**
	 * [tDBInput_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 



/**
 * [tDBInput_36 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row61");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row62" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow62 = false;
       		  	    	
       		  	    	
 							row62Struct row62ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_18) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_18 = false;
								
                        		    		    row62HashKey.apid = row61.apid ;
                        		    		
                        		    		    row62HashKey.col_val_hash = row61.col_val_hash ;
                        		    		

								
		                        	row62HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row62.lookup( row62HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row62.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_18 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row62 != null && tHash_Lookup_row62.getCount(row62HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row62' and it contains more one result from keys :  row62.apid = '" + row62HashKey.apid + "', row62.col_val_hash = '" + row62HashKey.col_val_hash + "'");
								} // G 071
							

							row62Struct row62 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row62Struct fromLookup_row62 = null;
							row62 = row62Default;
										 
							
								 
							
							
								if (tHash_Lookup_row62 !=null && tHash_Lookup_row62.hasNext()) { // G 099
								
							
								
								fromLookup_row62 = tHash_Lookup_row62.next();

							
							
								} // G 099
							
							

							if(fromLookup_row62 != null) {
								row62 = fromLookup_row62;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

amp_excipient_del = null;

if(!rejectedInnerJoin_tMap_18 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'amp_excipient_del'
// # Filter conditions 
if( rejectedInnerJoin_tMap_18 ) {
amp_excipient_del_tmp.dmd_id = row61.apid ;
amp_excipient_del_tmp.sync_process_id = (String)globalMap.get("current_process_id") ;
amp_excipient_del_tmp.dmd_entity_name = "dmd_amp_excipient";
amp_excipient_del_tmp.row_action = "d";
amp_excipient_del = amp_excipient_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "amp_excipient_del"
if(amp_excipient_del != null) { 



	
	/**
	 * [tDBOutput_27 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_excipient_del");
					}
					



            row63 = null;
        whetherReject_tDBOutput_27 = false;
                    if(amp_excipient_del.dmd_id == null) {
pstmt_tDBOutput_27.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_27.setString(1, amp_excipient_del.dmd_id);
}

                    if(amp_excipient_del.sync_process_id == null) {
pstmt_tDBOutput_27.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_27.setString(2, amp_excipient_del.sync_process_id);
}

                    if(amp_excipient_del.dmd_entity_name == null) {
pstmt_tDBOutput_27.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_27.setString(3, amp_excipient_del.dmd_entity_name);
}

                    if(amp_excipient_del.row_action == null) {
pstmt_tDBOutput_27.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_27.setString(4, amp_excipient_del.row_action);
}

			
    		pstmt_tDBOutput_27.addBatch();
    		nb_line_tDBOutput_27++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_27++;
    		  
            if(!whetherReject_tDBOutput_27) {
                            row63 = new row63Struct();
                                row63.dmd_id = amp_excipient_del.dmd_id;
                                row63.sync_process_id = amp_excipient_del.sync_process_id;
                                row63.dmd_entity_name = amp_excipient_del.dmd_entity_name;
                                row63.row_action = amp_excipient_del.row_action;
            }
    			if ((batchSize_tDBOutput_27 > 0) && (batchSize_tDBOutput_27 <= batchSizeCounter_tDBOutput_27)) {
                try {
						int countSum_tDBOutput_27 = 0;
						    
						for(int countEach_tDBOutput_27: pstmt_tDBOutput_27.executeBatch()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}
				    	
				    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
				    	
            	    	batchSizeCounter_tDBOutput_27 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_27){
				    	java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),sqle_tDBOutput_27=null;
				    	String errormessage_tDBOutput_27;
						if (ne_tDBOutput_27 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_27 = new java.sql.SQLException(e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(), ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
							errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
						}else{
							errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
						}
				    	
				    	int countSum_tDBOutput_27 = 0;
						for(int countEach_tDBOutput_27: e_tDBOutput_27.getUpdateCounts()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}
						
				    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
				    	
				    	System.err.println(errormessage_tDBOutput_27);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_27++;
                if(commitEvery_tDBOutput_27 <= commitCounter_tDBOutput_27) {
                if ((batchSize_tDBOutput_27 > 0) && (batchSizeCounter_tDBOutput_27 > 0)) {
                try {
                		int countSum_tDBOutput_27 = 0;
                		    
						for(int countEach_tDBOutput_27: pstmt_tDBOutput_27.executeBatch()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}
            	    	
            	    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
            	    	
                batchSizeCounter_tDBOutput_27 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_27){
			    	java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),sqle_tDBOutput_27=null;
			    	String errormessage_tDBOutput_27;
					if (ne_tDBOutput_27 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_27 = new java.sql.SQLException(e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(), ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
						errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
					}else{
						errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
					}
			    	
			    	int countSum_tDBOutput_27 = 0;
					for(int countEach_tDBOutput_27: e_tDBOutput_27.getUpdateCounts()) {
						countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
					}
					
			    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
			    	
			    	System.err.println(errormessage_tDBOutput_27);
			    	
				}
            }
                	conn_tDBOutput_27.commit();
                	
                	commitCounter_tDBOutput_27=0;
                }

 


	tos_count_tDBOutput_27++;

/**
 * [tDBOutput_27 main ] stop
 */
	
	/**
	 * [tDBOutput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	

 



/**
 * [tDBOutput_27 process_data_begin ] stop
 */
// Start of branch "row63"
if(row63 != null) { 



	
	/**
	 * [tLogRow_30 main ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row63");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_30 = new StringBuilder();




   				
	    		if(row63.dmd_id != null) { //              
                    							
       
				strBuffer_tLogRow_30.append(
				                String.valueOf(row63.dmd_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_30.append("|");
    			


   				
	    		if(row63.sync_process_id != null) { //              
                    							
       
				strBuffer_tLogRow_30.append(
				                String.valueOf(row63.sync_process_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_30.append("|");
    			


   				
	    		if(row63.dmd_entity_name != null) { //              
                    							
       
				strBuffer_tLogRow_30.append(
				                String.valueOf(row63.dmd_entity_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_30.append("|");
    			


   				
	    		if(row63.row_action != null) { //              
                    							
       
				strBuffer_tLogRow_30.append(
				                String.valueOf(row63.row_action)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_30 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_30 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_30);
                    }
                    consoleOut_tLogRow_30.println(strBuffer_tLogRow_30.toString());
                    consoleOut_tLogRow_30.flush();
                    nb_line_tLogRow_30++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_30++;

/**
 * [tLogRow_30 main ] stop
 */
	
	/**
	 * [tLogRow_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	

 



/**
 * [tLogRow_30 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	

 



/**
 * [tLogRow_30 process_data_end ] stop
 */

} // End of branch "row63"




	
	/**
	 * [tDBOutput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	

 



/**
 * [tDBOutput_27 process_data_end ] stop
 */

} // End of branch "amp_excipient_del"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 



/**
 * [tDBInput_36 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_36 end ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

	}
}finally{
	if (rs_tDBInput_36 != null) {
		rs_tDBInput_36.close();
	}
	if (stmt_tDBInput_36 != null) {
		stmt_tDBInput_36.close();
	}
	if(conn_tDBInput_36 != null && !conn_tDBInput_36.isClosed()) {
		
			conn_tDBInput_36.commit();
			
		
			conn_tDBInput_36.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_36_NB_LINE",nb_line_tDBInput_36);
 

ok_Hash.put("tDBInput_36", true);
end_Hash.put("tDBInput_36", System.currentTimeMillis());




/**
 * [tDBInput_36 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row62 != null) {
						tHash_Lookup_row62.endGet();
					}
					globalMap.remove( "tHash_Lookup_row62" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tDBOutput_27 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	



	    try {
				int countSum_tDBOutput_27 = 0;
				if (pstmt_tDBOutput_27 != null && batchSizeCounter_tDBOutput_27 > 0) {
						
					for(int countEach_tDBOutput_27: pstmt_tDBOutput_27.executeBatch()) {
						countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_27){
	    	java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),sqle_tDBOutput_27=null;
	    	String errormessage_tDBOutput_27;
			if (ne_tDBOutput_27 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_27 = new java.sql.SQLException(e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(), ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
				errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
			}else{
				errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
			}
	    	
	    	int countSum_tDBOutput_27 = 0;
			for(int countEach_tDBOutput_27: e_tDBOutput_27.getUpdateCounts()) {
				countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
			}
			
	    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
	    	
	    	System.err.println(errormessage_tDBOutput_27);
	    	
		}
	    
        if(pstmt_tDBOutput_27 != null) {
        		
            pstmt_tDBOutput_27.close();
            resourceMap.remove("pstmt_tDBOutput_27");
        }
    resourceMap.put("statementClosed_tDBOutput_27", true);
			
			conn_tDBOutput_27.commit();
			
		
    	conn_tDBOutput_27 .close();
    	
    	resourceMap.put("finish_tDBOutput_27", true);
    	

	nb_line_deleted_tDBOutput_27=nb_line_deleted_tDBOutput_27+ deletedCount_tDBOutput_27;
	nb_line_update_tDBOutput_27=nb_line_update_tDBOutput_27 + updatedCount_tDBOutput_27;
	nb_line_inserted_tDBOutput_27=nb_line_inserted_tDBOutput_27 + insertedCount_tDBOutput_27;
	nb_line_rejected_tDBOutput_27=nb_line_rejected_tDBOutput_27 + rejectedCount_tDBOutput_27;
	
        globalMap.put("tDBOutput_27_NB_LINE",nb_line_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_UPDATED",nb_line_update_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_DELETED",nb_line_deleted_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_27);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_excipient_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_27", true);
end_Hash.put("tDBOutput_27", System.currentTimeMillis());




/**
 * [tDBOutput_27 end ] stop
 */

	
	/**
	 * [tLogRow_30 end ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	


//////
//////
globalMap.put("tLogRow_30_NB_LINE",nb_line_tLogRow_30);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tLogRow_30", true);
end_Hash.put("tLogRow_30", System.currentTimeMillis());




/**
 * [tLogRow_30 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_18"
					     			globalMap.remove("tHash_Lookup_row62"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_36 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 



/**
 * [tDBInput_36 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tDBOutput_27 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_27") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_27 = null;
                if ((pstmtToClose_tDBOutput_27 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_27")) != null) {
                    pstmtToClose_tDBOutput_27.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_27") == null){
            java.sql.Connection ctn_tDBOutput_27 = null;
            if((ctn_tDBOutput_27 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_27")) != null){
                try {
                    ctn_tDBOutput_27.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_27) {
                    String errorMessage_tDBOutput_27 = "failed to close the connection in tDBOutput_27 :" + sqlEx_tDBOutput_27.getMessage();
                    System.err.println(errorMessage_tDBOutput_27);
                }
            }
        }
    }
 



/**
 * [tDBOutput_27 finally ] stop
 */

	
	/**
	 * [tLogRow_30 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	

 



/**
 * [tLogRow_30 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_36_SUBPROCESS_STATE", 1);
	}
	


public static class row62Struct implements routines.system.IPersistableComparableLookupRow<row62Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
						result = prime * result + ((this.col_val_hash == null) ? 0 : this.col_val_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row62Struct other = (row62Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					
						if (this.col_val_hash == null) {
							if (other.col_val_hash != null)
								return false;
						
						} else if (!this.col_val_hash.equals(other.col_val_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row62Struct other) {

		other.apid = this.apid;
	            other.isid = this.isid;
	            other.strnth = this.strnth;
	            other.strnth_uomcd = this.strnth_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row62Struct other) {

		other.apid = this.apid;
	            	other.col_val_hash = this.col_val_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.isid = readString(dis,ois);
					
       			    	this.strnth = (BigDecimal) ois.readObject();
					
						this.strnth_uomcd = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.isid, dos, oos);
					
       			    	oos.writeObject(this.strnth);
					
						writeString(this.strnth_uomcd, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.col_val_hash, other.col_val_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row62Struct row62 = new row62Struct();




	
	/**
	 * [tAdvancedHash_row62 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row62", false);
		start_Hash.put("tAdvancedHash_row62", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row62";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tAdvancedHash_row62 = 0;
		

			   		// connection name:row62
			   		// source node:tDBInput_35 - inputs:(after_tDBInput_36) outputs:(row62,row62) | target node:tAdvancedHash_row62 - inputs:(row62) outputs:()
			   		// linked node: tMap_18 - inputs:(row61,row62) outputs:(amp_excipient_del)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row62 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct> tHash_Lookup_row62 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row62Struct>getLookup(matchingModeEnum_row62);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row62", tHash_Lookup_row62);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row62 begin ] stop
 */



	
	/**
	 * [tDBInput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_35", false);
		start_Hash.put("tDBInput_35", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_35";

	
		int tos_count_tDBInput_35 = 0;
		
	
    
	
		    int nb_line_tDBInput_35 = 0;
		    java.sql.Connection conn_tDBInput_35 = null;
				String driverClass_tDBInput_35 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_35 = java.lang.Class.forName(driverClass_tDBInput_35);
				String dbUser_tDBInput_35 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_35 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_35 = decryptedPassword_tDBInput_35;
				
				String url_tDBInput_35 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_35 = java.sql.DriverManager.getConnection(url_tDBInput_35,dbUser_tDBInput_35,dbPwd_tDBInput_35);
		        
				conn_tDBInput_35.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_35 = conn_tDBInput_35.createStatement();

		    String dbquery_tDBInput_35 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"strnth\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"strnth_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\"";
			

            	globalMap.put("tDBInput_35_QUERY",dbquery_tDBInput_35);
		    java.sql.ResultSet rs_tDBInput_35 = null;

		    try {
		    	rs_tDBInput_35 = stmt_tDBInput_35.executeQuery(dbquery_tDBInput_35);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_35 = rs_tDBInput_35.getMetaData();
		    	int colQtyInRs_tDBInput_35 = rsmd_tDBInput_35.getColumnCount();

		    String tmpContent_tDBInput_35 = null;
		    
		    
		    while (rs_tDBInput_35.next()) {
		        nb_line_tDBInput_35++;
		        
							if(colQtyInRs_tDBInput_35 < 1) {
								row62.apid = null;
							} else {
	                         		
        	row62.apid = routines.system.JDBCUtil.getString(rs_tDBInput_35, 1, false);
		                    }
							if(colQtyInRs_tDBInput_35 < 2) {
								row62.isid = null;
							} else {
	                         		
        	row62.isid = routines.system.JDBCUtil.getString(rs_tDBInput_35, 2, false);
		                    }
							if(colQtyInRs_tDBInput_35 < 3) {
								row62.strnth = null;
							} else {
		                          
            row62.strnth = rs_tDBInput_35.getBigDecimal(3);
            if(rs_tDBInput_35.wasNull()){
                    row62.strnth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_35 < 4) {
								row62.strnth_uomcd = null;
							} else {
	                         		
        	row62.strnth_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_35, 4, false);
		                    }
							if(colQtyInRs_tDBInput_35 < 5) {
								row62.col_val_hash = null;
							} else {
		                          
            row62.col_val_hash = rs_tDBInput_35.getObject(5);
            if(rs_tDBInput_35.wasNull()){
                    row62.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_35 begin ] stop
 */
	
	/**
	 * [tDBInput_35 main ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 


	tos_count_tDBInput_35++;

/**
 * [tDBInput_35 main ] stop
 */
	
	/**
	 * [tDBInput_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 



/**
 * [tDBInput_35 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row62 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row62");
					}
					


			   
			   

					row62Struct row62_HashRow = new row62Struct();
		   	   	   
				
				row62_HashRow.apid = row62.apid;
				
				row62_HashRow.isid = row62.isid;
				
				row62_HashRow.strnth = row62.strnth;
				
				row62_HashRow.strnth_uomcd = row62.strnth_uomcd;
				
				row62_HashRow.col_val_hash = row62.col_val_hash;
				
			tHash_Lookup_row62.put(row62_HashRow);
			
            




 


	tos_count_tAdvancedHash_row62++;

/**
 * [tAdvancedHash_row62 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row62 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";

	

 



/**
 * [tAdvancedHash_row62 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row62 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";

	

 



/**
 * [tAdvancedHash_row62 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 



/**
 * [tDBInput_35 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_35 end ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

	}
}finally{
	if (rs_tDBInput_35 != null) {
		rs_tDBInput_35.close();
	}
	if (stmt_tDBInput_35 != null) {
		stmt_tDBInput_35.close();
	}
	if(conn_tDBInput_35 != null && !conn_tDBInput_35.isClosed()) {
		
			conn_tDBInput_35.commit();
			
		
			conn_tDBInput_35.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_35_NB_LINE",nb_line_tDBInput_35);
 

ok_Hash.put("tDBInput_35", true);
end_Hash.put("tDBInput_35", System.currentTimeMillis());




/**
 * [tDBInput_35 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row62 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";

	

tHash_Lookup_row62.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row62", true);
end_Hash.put("tAdvancedHash_row62", System.currentTimeMillis());




/**
 * [tAdvancedHash_row62 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_35 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 



/**
 * [tDBInput_35 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row62 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";

	

 



/**
 * [tAdvancedHash_row62 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_35_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("current_process_id", context.dmd_stg_current_processs_id);

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


String foo = "bar";
//globalMap.put("current_process_id", java.util.UUID.randomUUID().toString());
System.out.println((String)globalMap.get("current_process_id"));
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRowGenerator_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.sync_process_id = readString(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sync_process_id="+sync_process_id);
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.dmd_db_schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dmd_sync_log");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_3 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_3 = context.dmd_db_password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"dmd_version\" = ? WHERE \"sync_process_id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";

	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public String getRandomsync_process_id() {
		 
		return (String)globalMap.get("current_process_id") ;
		
	}
	public String getRandomdmd_version() {
		 
		return context.dmd_version ;
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row15.sync_process_id = randtRowGenerator_1.getRandomsync_process_id();
		row15.dmd_version = randtRowGenerator_1.getRandomdmd_version();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(row15.dmd_version == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, row15.dmd_version);
}

                    if(row15.sync_process_id == null) {
pstmt_tDBOutput_3.setNull(2 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2 + count_tDBOutput_3, row15.sync_process_id);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
            	    	
            	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
			    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
			    	
			    	System.err.println(errormessage_tDBOutput_3);
			    	
				}
            }
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendStats_FILEStruct implements routines.system.IPersistableRow<row_talendStats_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendStats_STATSStruct implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_STATSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();
row_talendStats_STATSStruct row_talendStats_FILE = row_talendStats_STATS;





	
	/**
	 * [talendStats_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_CONSOLE", false);
		start_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendStats_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendStats_CONSOLE = null;	

 		StringBuilder strBuffer_talendStats_CONSOLE = null;
		int nb_line_talendStats_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendStats_CONSOLE begin ] stop
 */



	
	/**
	 * [talendStats_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_FILE", false);
		start_Hash.put("talendStats_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_FILE = 0;
		

String fileName_talendStats_FILE = "";
    fileName_talendStats_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"stats_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendStats_FILE = null;
    String extension_talendStats_FILE = null;
    String directory_talendStats_FILE = null;
    if((fileName_talendStats_FILE.indexOf("/") != -1)) {
        if(fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE.lastIndexOf("/")) {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        }
        directory_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendStats_FILE.lastIndexOf(".") != -1) {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        }
        directory_talendStats_FILE = "";
    }
    boolean isFileGenerated_talendStats_FILE = true;
    java.io.File filetalendStats_FILE = new java.io.File(fileName_talendStats_FILE);
    globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
        if(filetalendStats_FILE.exists()){
            isFileGenerated_talendStats_FILE = false;
        }
            int nb_line_talendStats_FILE = 0;
            int splitedFileNo_talendStats_FILE = 0;
            int currentRow_talendStats_FILE = 0;

            final String OUT_DELIM_talendStats_FILE = /** Start field talendStats_FILE:FIELDSEPARATOR */";"/** End field talendStats_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendStats_FILE = /** Start field talendStats_FILE:ROWSEPARATOR */"\n"/** End field talendStats_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendStats_FILE != null && directory_talendStats_FILE.trim().length() != 0) {
                        java.io.File dir_talendStats_FILE = new java.io.File(directory_talendStats_FILE);
                        if(!dir_talendStats_FILE.exists()) {
                            dir_talendStats_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendStats_FILE = null;

                        outtalendStats_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendStats_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

 



/**
 * [talendStats_FILE begin ] stop
 */



	
	/**
	 * [talendStats_STATS begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_STATS", false);
		start_Hash.put("talendStats_STATS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	
		int tos_count_talendStats_STATS = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
		row_talendStats_STATS.pid = pid;
		row_talendStats_STATS.root_pid = rootPid;
		row_talendStats_STATS.father_pid = fatherPid;	
    	row_talendStats_STATS.project = projectName;
    	row_talendStats_STATS.job = jobName;
    	row_talendStats_STATS.context = contextStr;
		row_talendStats_STATS.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row_talendStats_STATS.message = scm.getMessage();
		row_talendStats_STATS.duration = scm.getDuration();
		row_talendStats_STATS.moment = scm.getMoment();
		row_talendStats_STATS.message_type = scm.getMessageType();
		row_talendStats_STATS.job_version = scm.getJobVersion();
		row_talendStats_STATS.job_repository_id = scm.getJobId();
		row_talendStats_STATS.system_pid = scm.getSystemPid();

 



/**
 * [talendStats_STATS begin ] stop
 */
	
	/**
	 * [talendStats_STATS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 


	tos_count_talendStats_STATS++;

/**
 * [talendStats_STATS main ] stop
 */
	
	/**
	 * [talendStats_STATS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_begin ] stop
 */

	
	/**
	 * [talendStats_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendStats_FILE = new StringBuilder();
                            if(row_talendStats_STATS.moment != null) {
                        sb_talendStats_FILE.append(
                            FormatterUtils.format_Date(row_talendStats_STATS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.father_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.father_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.root_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.root_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.system_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.system_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.project != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.project
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_repository_id != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_repository_id
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_version != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_version
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.context != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.context
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.origin != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.origin
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message_type != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message_type
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.duration != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.duration
                        );
                            }
                    sb_talendStats_FILE.append(OUT_DELIM_ROWSEP_talendStats_FILE);


                    nb_line_talendStats_FILE++;
                    resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

                        outtalendStats_FILE.write(sb_talendStats_FILE.toString());




 
     row_talendStats_FILE = row_talendStats_STATS;


	tos_count_talendStats_FILE++;

/**
 * [talendStats_FILE main ] stop
 */
	
	/**
	 * [talendStats_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendStats_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendStats_CONSOLE = new StringBuilder();




   				
	    		if(row_talendStats_FILE.moment != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
								FormatterUtils.format_Date(row_talendStats_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.system_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.project != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job_repository_id != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job_version != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.context != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.origin != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.message_type != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.message_type)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.message != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.message)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.duration != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendStats_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendStats_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendStats_CONSOLE);
                    }
                    consoleOut_talendStats_CONSOLE.println(strBuffer_talendStats_CONSOLE.toString());
                    consoleOut_talendStats_CONSOLE.flush();
                    nb_line_talendStats_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendStats_CONSOLE++;

/**
 * [talendStats_CONSOLE main ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendStats_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_end ] stop
 */



	
	/**
	 * [talendStats_STATS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_end ] stop
 */
	
	/**
	 * [talendStats_STATS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

	}


 

ok_Hash.put("talendStats_STATS", true);
end_Hash.put("talendStats_STATS", System.currentTimeMillis());




/**
 * [talendStats_STATS end ] stop
 */

	
	/**
	 * [talendStats_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	



		
			
					if(outtalendStats_FILE!=null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}
				
				globalMap.put("talendStats_FILE_NB_LINE",nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
			
		
		
		resourceMap.put("finish_talendStats_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendStats_FILE", true);
end_Hash.put("talendStats_FILE", System.currentTimeMillis());




/**
 * [talendStats_FILE end ] stop
 */

	
	/**
	 * [talendStats_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	


//////
//////
globalMap.put("talendStats_CONSOLE_NB_LINE",nb_line_talendStats_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendStats_CONSOLE", true);
end_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());




/**
 * [talendStats_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendStats_STATS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS finally ] stop
 */

	
	/**
	 * [talendStats_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	


		if(resourceMap.get("finish_talendStats_FILE") == null){ 
			
				
						java.io.Writer outtalendStats_FILE = (java.io.Writer)resourceMap.get("out_talendStats_FILE");
						if(outtalendStats_FILE!=null) {
							outtalendStats_FILE.flush();
							outtalendStats_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendStats_FILE finally ] stop
 */

	
	/**
	 * [talendStats_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_FILEStruct implements routines.system.IPersistableRow<row_talendLogs_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();
row_talendLogs_LOGSStruct row_talendLogs_FILE = row_talendLogs_LOGS;





	
	/**
	 * [talendLogs_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_CONSOLE", false);
		start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;	

 		StringBuilder strBuffer_talendLogs_CONSOLE = null;
		int nb_line_talendLogs_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendLogs_CONSOLE begin ] stop
 */



	
	/**
	 * [talendLogs_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_FILE", false);
		start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_FILE = 0;
		

String fileName_talendLogs_FILE = "";
    fileName_talendLogs_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"logs_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendLogs_FILE = null;
    String extension_talendLogs_FILE = null;
    String directory_talendLogs_FILE = null;
    if((fileName_talendLogs_FILE.indexOf("/") != -1)) {
        if(fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        }
        directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        }
        directory_talendLogs_FILE = "";
    }
    boolean isFileGenerated_talendLogs_FILE = true;
    java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
    globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
        if(filetalendLogs_FILE.exists()){
            isFileGenerated_talendLogs_FILE = false;
        }
            int nb_line_talendLogs_FILE = 0;
            int splitedFileNo_talendLogs_FILE = 0;
            int currentRow_talendLogs_FILE = 0;

            final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */";"/** End field talendLogs_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */"\n"/** End field talendLogs_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
                        java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
                        if(!dir_talendLogs_FILE.exists()) {
                            dir_talendLogs_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendLogs_FILE = null;

                        outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendLogs_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

 



/**
 * [talendLogs_FILE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendLogs_FILE = new StringBuilder();
                            if(row_talendLogs_LOGS.moment != null) {
                        sb_talendLogs_FILE.append(
                            FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.root_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.root_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.father_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.father_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.project != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.project
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.job != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.job
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.context != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.context
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.priority != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.priority
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.type != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.type
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.origin != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.origin
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.message != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.message
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.code != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.code
                        );
                            }
                    sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);


                    nb_line_talendLogs_FILE++;
                    resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

                        outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());




 
     row_talendLogs_FILE = row_talendLogs_LOGS;


	tos_count_talendLogs_FILE++;

/**
 * [talendLogs_FILE main ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendLogs_CONSOLE = new StringBuilder();




   				
	    		if(row_talendLogs_FILE.moment != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
								FormatterUtils.format_Date(row_talendLogs_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.project != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.job != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.context != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.priority != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.priority)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.type != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.type)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.origin != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.message != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.message)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.code != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendLogs_CONSOLE);
                    }
                    consoleOut_talendLogs_CONSOLE.println(strBuffer_talendLogs_CONSOLE.toString());
                    consoleOut_talendLogs_CONSOLE.flush();
                    nb_line_talendLogs_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendLogs_CONSOLE++;

/**
 * [talendLogs_CONSOLE main ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	



		
			
					if(outtalendLogs_FILE!=null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
				
				globalMap.put("talendLogs_FILE_NB_LINE",nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
			
		
		
		resourceMap.put("finish_talendLogs_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_FILE", true);
end_Hash.put("talendLogs_FILE", System.currentTimeMillis());




/**
 * [talendLogs_FILE end ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	


//////
//////
globalMap.put("talendLogs_CONSOLE_NB_LINE",nb_line_talendLogs_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_CONSOLE", true);
end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());




/**
 * [talendLogs_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	


		if(resourceMap.get("finish_talendLogs_FILE") == null){ 
			
				
						java.io.Writer outtalendLogs_FILE = (java.io.Writer)resourceMap.get("out_talendLogs_FILE");
						if(outtalendLogs_FILE!=null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendLogs_FILE finally ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendMeter_FILEStruct implements routines.system.IPersistableRow<row_talendMeter_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendMeter_METTERStruct implements routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_finder.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_finder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_finder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_finder) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_METTERStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendMeter_METTERProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();
row_talendMeter_METTERStruct row_talendMeter_FILE = row_talendMeter_METTER;





	
	/**
	 * [talendMeter_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_CONSOLE", false);
		start_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendMeter_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendMeter_CONSOLE = null;	

 		StringBuilder strBuffer_talendMeter_CONSOLE = null;
		int nb_line_talendMeter_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendMeter_CONSOLE begin ] stop
 */



	
	/**
	 * [talendMeter_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_FILE", false);
		start_Hash.put("talendMeter_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_FILE = 0;
		

String fileName_talendMeter_FILE = "";
    fileName_talendMeter_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"meter_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendMeter_FILE = null;
    String extension_talendMeter_FILE = null;
    String directory_talendMeter_FILE = null;
    if((fileName_talendMeter_FILE.indexOf("/") != -1)) {
        if(fileName_talendMeter_FILE.lastIndexOf(".") < fileName_talendMeter_FILE.lastIndexOf("/")) {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE;
            extension_talendMeter_FILE = "";
        } else {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("."));
            extension_talendMeter_FILE = fileName_talendMeter_FILE.substring(fileName_talendMeter_FILE.lastIndexOf("."));
        }
        directory_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendMeter_FILE.lastIndexOf(".") != -1) {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("."));
            extension_talendMeter_FILE = fileName_talendMeter_FILE.substring(fileName_talendMeter_FILE.lastIndexOf("."));
        } else {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE;
            extension_talendMeter_FILE = "";
        }
        directory_talendMeter_FILE = "";
    }
    boolean isFileGenerated_talendMeter_FILE = true;
    java.io.File filetalendMeter_FILE = new java.io.File(fileName_talendMeter_FILE);
    globalMap.put("talendMeter_FILE_FILE_NAME",fileName_talendMeter_FILE);
        if(filetalendMeter_FILE.exists()){
            isFileGenerated_talendMeter_FILE = false;
        }
            int nb_line_talendMeter_FILE = 0;
            int splitedFileNo_talendMeter_FILE = 0;
            int currentRow_talendMeter_FILE = 0;

            final String OUT_DELIM_talendMeter_FILE = /** Start field talendMeter_FILE:FIELDSEPARATOR */";"/** End field talendMeter_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendMeter_FILE = /** Start field talendMeter_FILE:ROWSEPARATOR */"\n"/** End field talendMeter_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendMeter_FILE != null && directory_talendMeter_FILE.trim().length() != 0) {
                        java.io.File dir_talendMeter_FILE = new java.io.File(directory_talendMeter_FILE);
                        if(!dir_talendMeter_FILE.exists()) {
                            dir_talendMeter_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendMeter_FILE = null;

                        outtalendMeter_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendMeter_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendMeter_FILE", outtalendMeter_FILE);
resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

 



/**
 * [talendMeter_FILE begin ] stop
 */



	
	/**
	 * [talendMeter_METTER begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_METTER", false);
		start_Hash.put("talendMeter_METTER", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	
		int tos_count_talendMeter_METTER = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER.getMessages()) {
		row_talendMeter_METTER.pid = pid;
		row_talendMeter_METTER.root_pid = rootPid;
		row_talendMeter_METTER.father_pid = fatherPid;	
        row_talendMeter_METTER.project = projectName;
        row_talendMeter_METTER.job = jobName;
        row_talendMeter_METTER.context = contextStr;
		row_talendMeter_METTER.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row_talendMeter_METTER.moment = mcm.getMoment();
		row_talendMeter_METTER.job_version = mcm.getJobVersion();
		row_talendMeter_METTER.job_repository_id = mcm.getJobId();
		row_talendMeter_METTER.system_pid = mcm.getSystemPid();
		row_talendMeter_METTER.label = mcm.getLabel();
		row_talendMeter_METTER.count = mcm.getCount();
		row_talendMeter_METTER.reference = talendMeter_METTER.getConnLinesCount(mcm.getReferense()+"_count");
		row_talendMeter_METTER.thresholds = mcm.getThresholds();
		

 



/**
 * [talendMeter_METTER begin ] stop
 */
	
	/**
	 * [talendMeter_METTER main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 


	tos_count_talendMeter_METTER++;

/**
 * [talendMeter_METTER main ] stop
 */
	
	/**
	 * [talendMeter_METTER process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendMeter_FILE = new StringBuilder();
                            if(row_talendMeter_METTER.moment != null) {
                        sb_talendMeter_FILE.append(
                            FormatterUtils.format_Date(row_talendMeter_METTER.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.father_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.father_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.root_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.root_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.system_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.system_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.project != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.project
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job_repository_id != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job_repository_id
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job_version != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job_version
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.context != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.context
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.origin != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.origin
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.label != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.label
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.count != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.count
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.reference != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.reference
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.thresholds != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.thresholds
                        );
                            }
                    sb_talendMeter_FILE.append(OUT_DELIM_ROWSEP_talendMeter_FILE);


                    nb_line_talendMeter_FILE++;
                    resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

                        outtalendMeter_FILE.write(sb_talendMeter_FILE.toString());




 
     row_talendMeter_FILE = row_talendMeter_METTER;


	tos_count_talendMeter_FILE++;

/**
 * [talendMeter_FILE main ] stop
 */
	
	/**
	 * [talendMeter_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	

 



/**
 * [talendMeter_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendMeter_CONSOLE = new StringBuilder();




   				
	    		if(row_talendMeter_FILE.moment != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
								FormatterUtils.format_Date(row_talendMeter_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.system_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.project != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job_repository_id != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job_version != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.context != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.origin != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.label != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.label)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.count != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.count)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.reference != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.reference)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.thresholds != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.thresholds)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendMeter_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendMeter_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendMeter_CONSOLE);
                    }
                    consoleOut_talendMeter_CONSOLE.println(strBuffer_talendMeter_CONSOLE.toString());
                    consoleOut_talendMeter_CONSOLE.flush();
                    nb_line_talendMeter_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendMeter_CONSOLE++;

/**
 * [talendMeter_CONSOLE main ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	

 



/**
 * [talendMeter_FILE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_METTER process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_end ] stop
 */
	
	/**
	 * [talendMeter_METTER end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

	}


 

ok_Hash.put("talendMeter_METTER", true);
end_Hash.put("talendMeter_METTER", System.currentTimeMillis());




/**
 * [talendMeter_METTER end ] stop
 */

	
	/**
	 * [talendMeter_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	



		
			
					if(outtalendMeter_FILE!=null) {
						outtalendMeter_FILE.flush();
						outtalendMeter_FILE.close();
					}
				
				globalMap.put("talendMeter_FILE_NB_LINE",nb_line_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME",fileName_talendMeter_FILE);
			
		
		
		resourceMap.put("finish_talendMeter_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendMeter_FILE", true);
end_Hash.put("talendMeter_FILE", System.currentTimeMillis());




/**
 * [talendMeter_FILE end ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	


//////
//////
globalMap.put("talendMeter_CONSOLE_NB_LINE",nb_line_talendMeter_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendMeter_CONSOLE", true);
end_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());




/**
 * [talendMeter_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendMeter_METTER finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER finally ] stop
 */

	
	/**
	 * [talendMeter_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	


		if(resourceMap.get("finish_talendMeter_FILE") == null){ 
			
				
						java.io.Writer outtalendMeter_FILE = (java.io.Writer)resourceMap.get("out_talendMeter_FILE");
						if(outtalendMeter_FILE!=null) {
							outtalendMeter_FILE.flush();
							outtalendMeter_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendMeter_FILE finally ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final dmd_delta_finder dmd_delta_finderClass = new dmd_delta_finder();

        int exitCode = dmd_delta_finderClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dmd_delta_finder.class.getClassLoader().getResourceAsStream("local_project/dmd_delta_finder_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dmd_delta_finder.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("dmd_stg_current_processs_id", "id_String");
                            context.dmd_stg_current_processs_id=(String) context.getProperty("dmd_stg_current_processs_id");
                        context.setContextType("dmd_db_additionalparams", "id_String");
                            context.dmd_db_additionalparams=(String) context.getProperty("dmd_db_additionalparams");
                        context.setContextType("dmd_db_host", "id_String");
                            context.dmd_db_host=(String) context.getProperty("dmd_db_host");
                        context.setContextType("dmd_db_name", "id_String");
                            context.dmd_db_name=(String) context.getProperty("dmd_db_name");
                        context.setContextType("dmd_db_password", "id_Password");
                            String pwd_dmd_db_password_value = context.getProperty("dmd_db_password");
                            context.dmd_db_password = null;
                            if(pwd_dmd_db_password_value!=null) {
                                if(context_param.containsKey("dmd_db_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.dmd_db_password = pwd_dmd_db_password_value;
                                } else if (!pwd_dmd_db_password_value.isEmpty()) {
                                    try {
                                        context.dmd_db_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_dmd_db_password_value);
                                        context.put("dmd_db_password",context.dmd_db_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("dmd_db_port", "id_Integer");
                            try{
                                context.dmd_db_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dmd_db_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dmd_db_port", e.getMessage()));
                                context.dmd_db_port=null;
                            }
                        context.setContextType("dmd_db_psql_path", "id_String");
                            context.dmd_db_psql_path=(String) context.getProperty("dmd_db_psql_path");
                        context.setContextType("dmd_db_pwd_string", "id_String");
                            context.dmd_db_pwd_string=(String) context.getProperty("dmd_db_pwd_string");
                        context.setContextType("dmd_db_schema", "id_String");
                            context.dmd_db_schema=(String) context.getProperty("dmd_db_schema");
                        context.setContextType("dmd_db_script_path", "id_String");
                            context.dmd_db_script_path=(String) context.getProperty("dmd_db_script_path");
                        context.setContextType("dmd_db_stg_additionalparams", "id_String");
                            context.dmd_db_stg_additionalparams=(String) context.getProperty("dmd_db_stg_additionalparams");
                        context.setContextType("dmd_db_stg_host", "id_String");
                            context.dmd_db_stg_host=(String) context.getProperty("dmd_db_stg_host");
                        context.setContextType("dmd_db_stg_name", "id_String");
                            context.dmd_db_stg_name=(String) context.getProperty("dmd_db_stg_name");
                        context.setContextType("dmd_db_stg_password", "id_Password");
                            String pwd_dmd_db_stg_password_value = context.getProperty("dmd_db_stg_password");
                            context.dmd_db_stg_password = null;
                            if(pwd_dmd_db_stg_password_value!=null) {
                                if(context_param.containsKey("dmd_db_stg_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.dmd_db_stg_password = pwd_dmd_db_stg_password_value;
                                } else if (!pwd_dmd_db_stg_password_value.isEmpty()) {
                                    try {
                                        context.dmd_db_stg_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_dmd_db_stg_password_value);
                                        context.put("dmd_db_stg_password",context.dmd_db_stg_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("dmd_db_stg_port", "id_Integer");
                            try{
                                context.dmd_db_stg_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dmd_db_stg_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dmd_db_stg_port", e.getMessage()));
                                context.dmd_db_stg_port=null;
                            }
                        context.setContextType("dmd_db_stg_pwd_string", "id_String");
                            context.dmd_db_stg_pwd_string=(String) context.getProperty("dmd_db_stg_pwd_string");
                        context.setContextType("dmd_db_stg_schema", "id_String");
                            context.dmd_db_stg_schema=(String) context.getProperty("dmd_db_stg_schema");
                        context.setContextType("dmd_db_stg_user", "id_String");
                            context.dmd_db_stg_user=(String) context.getProperty("dmd_db_stg_user");
                        context.setContextType("dmd_db_user", "id_String");
                            context.dmd_db_user=(String) context.getProperty("dmd_db_user");
                        context.setContextType("dmd_file_path", "id_String");
                            context.dmd_file_path=(String) context.getProperty("dmd_file_path");
                        context.setContextType("dmd_version", "id_String");
                            context.dmd_version=(String) context.getProperty("dmd_version");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dmd_stg_current_processs_id")) {
                context.dmd_stg_current_processs_id = (String) parentContextMap.get("dmd_stg_current_processs_id");
            }if (parentContextMap.containsKey("dmd_db_additionalparams")) {
                context.dmd_db_additionalparams = (String) parentContextMap.get("dmd_db_additionalparams");
            }if (parentContextMap.containsKey("dmd_db_host")) {
                context.dmd_db_host = (String) parentContextMap.get("dmd_db_host");
            }if (parentContextMap.containsKey("dmd_db_name")) {
                context.dmd_db_name = (String) parentContextMap.get("dmd_db_name");
            }if (parentContextMap.containsKey("dmd_db_password")) {
                context.dmd_db_password = (java.lang.String) parentContextMap.get("dmd_db_password");
            }if (parentContextMap.containsKey("dmd_db_port")) {
                context.dmd_db_port = (Integer) parentContextMap.get("dmd_db_port");
            }if (parentContextMap.containsKey("dmd_db_psql_path")) {
                context.dmd_db_psql_path = (String) parentContextMap.get("dmd_db_psql_path");
            }if (parentContextMap.containsKey("dmd_db_pwd_string")) {
                context.dmd_db_pwd_string = (String) parentContextMap.get("dmd_db_pwd_string");
            }if (parentContextMap.containsKey("dmd_db_schema")) {
                context.dmd_db_schema = (String) parentContextMap.get("dmd_db_schema");
            }if (parentContextMap.containsKey("dmd_db_script_path")) {
                context.dmd_db_script_path = (String) parentContextMap.get("dmd_db_script_path");
            }if (parentContextMap.containsKey("dmd_db_stg_additionalparams")) {
                context.dmd_db_stg_additionalparams = (String) parentContextMap.get("dmd_db_stg_additionalparams");
            }if (parentContextMap.containsKey("dmd_db_stg_host")) {
                context.dmd_db_stg_host = (String) parentContextMap.get("dmd_db_stg_host");
            }if (parentContextMap.containsKey("dmd_db_stg_name")) {
                context.dmd_db_stg_name = (String) parentContextMap.get("dmd_db_stg_name");
            }if (parentContextMap.containsKey("dmd_db_stg_password")) {
                context.dmd_db_stg_password = (java.lang.String) parentContextMap.get("dmd_db_stg_password");
            }if (parentContextMap.containsKey("dmd_db_stg_port")) {
                context.dmd_db_stg_port = (Integer) parentContextMap.get("dmd_db_stg_port");
            }if (parentContextMap.containsKey("dmd_db_stg_pwd_string")) {
                context.dmd_db_stg_pwd_string = (String) parentContextMap.get("dmd_db_stg_pwd_string");
            }if (parentContextMap.containsKey("dmd_db_stg_schema")) {
                context.dmd_db_stg_schema = (String) parentContextMap.get("dmd_db_stg_schema");
            }if (parentContextMap.containsKey("dmd_db_stg_user")) {
                context.dmd_db_stg_user = (String) parentContextMap.get("dmd_db_stg_user");
            }if (parentContextMap.containsKey("dmd_db_user")) {
                context.dmd_db_user = (String) parentContextMap.get("dmd_db_user");
            }if (parentContextMap.containsKey("dmd_file_path")) {
                context.dmd_file_path = (String) parentContextMap.get("dmd_file_path");
            }if (parentContextMap.containsKey("dmd_version")) {
                context.dmd_version = (String) parentContextMap.get("dmd_version");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("dmd_db_password");
			parametersToEncrypt.add("dmd_db_stg_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        talendStats_STATS.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}
try {
errorCode = null;tDBInput_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}
try {
errorCode = null;tDBInput_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}
try {
errorCode = null;tDBInput_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}
try {
errorCode = null;tDBInput_13Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_13) {
globalMap.put("tDBInput_13_SUBPROCESS_STATE", -1);

e_tDBInput_13.printStackTrace();

}
try {
errorCode = null;tDBInput_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_9) {
globalMap.put("tDBInput_9_SUBPROCESS_STATE", -1);

e_tDBInput_9.printStackTrace();

}
try {
errorCode = null;tDBInput_14Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_14) {
globalMap.put("tDBInput_14_SUBPROCESS_STATE", -1);

e_tDBInput_14.printStackTrace();

}
try {
errorCode = null;tDBInput_15Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_15) {
globalMap.put("tDBInput_15_SUBPROCESS_STATE", -1);

e_tDBInput_15.printStackTrace();

}
try {
errorCode = null;tDBInput_17Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_17) {
globalMap.put("tDBInput_17_SUBPROCESS_STATE", -1);

e_tDBInput_17.printStackTrace();

}
try {
errorCode = null;tDBInput_20Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_20) {
globalMap.put("tDBInput_20_SUBPROCESS_STATE", -1);

e_tDBInput_20.printStackTrace();

}
try {
errorCode = null;tDBInput_22Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_22) {
globalMap.put("tDBInput_22_SUBPROCESS_STATE", -1);

e_tDBInput_22.printStackTrace();

}
try {
errorCode = null;tDBInput_24Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_24) {
globalMap.put("tDBInput_24_SUBPROCESS_STATE", -1);

e_tDBInput_24.printStackTrace();

}
try {
errorCode = null;tDBInput_26Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_26) {
globalMap.put("tDBInput_26_SUBPROCESS_STATE", -1);

e_tDBInput_26.printStackTrace();

}
try {
errorCode = null;tDBInput_28Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_28) {
globalMap.put("tDBInput_28_SUBPROCESS_STATE", -1);

e_tDBInput_28.printStackTrace();

}
try {
errorCode = null;tDBInput_29Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_29) {
globalMap.put("tDBInput_29_SUBPROCESS_STATE", -1);

e_tDBInput_29.printStackTrace();

}
try {
errorCode = null;tDBInput_32Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_32) {
globalMap.put("tDBInput_32_SUBPROCESS_STATE", -1);

e_tDBInput_32.printStackTrace();

}
try {
errorCode = null;tDBInput_33Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_33) {
globalMap.put("tDBInput_33_SUBPROCESS_STATE", -1);

e_tDBInput_33.printStackTrace();

}
try {
errorCode = null;tDBInput_36Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_36) {
globalMap.put("tDBInput_36_SUBPROCESS_STATE", -1);

e_tDBInput_36.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dmd_delta_finder");
        }
        talendStats_STATS.addMessage(status==""?"end":status, (end-startTime));
        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1552023 characters generated by Talend Open Studio for Data Integration 
 *     on the 13 January, 2021 3:11:37 PM IST
 ************************************************************************************************/