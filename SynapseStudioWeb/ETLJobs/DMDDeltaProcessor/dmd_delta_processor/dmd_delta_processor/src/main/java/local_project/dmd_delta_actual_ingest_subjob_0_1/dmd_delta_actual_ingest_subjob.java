// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.dmd_delta_actual_ingest_subjob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: dmd_delta_actual_ingest_subjob Purpose: dmd_delta_actual_ingest_subjob<br>
 * Description: dmd_delta_actual_ingest_subjob <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class dmd_delta_actual_ingest_subjob implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dmd_stg_current_processs_id != null){
				
					this.setProperty("dmd_stg_current_processs_id", dmd_stg_current_processs_id.toString());
				
			}
			
			if(dmd_db_additionalparams != null){
				
					this.setProperty("dmd_db_additionalparams", dmd_db_additionalparams.toString());
				
			}
			
			if(dmd_db_host != null){
				
					this.setProperty("dmd_db_host", dmd_db_host.toString());
				
			}
			
			if(dmd_db_name != null){
				
					this.setProperty("dmd_db_name", dmd_db_name.toString());
				
			}
			
			if(dmd_db_password != null){
				
					this.setProperty("dmd_db_password", dmd_db_password.toString());
				
			}
			
			if(dmd_db_port != null){
				
					this.setProperty("dmd_db_port", dmd_db_port.toString());
				
			}
			
			if(dmd_db_psql_path != null){
				
					this.setProperty("dmd_db_psql_path", dmd_db_psql_path.toString());
				
			}
			
			if(dmd_db_pwd_string != null){
				
					this.setProperty("dmd_db_pwd_string", dmd_db_pwd_string.toString());
				
			}
			
			if(dmd_db_schema != null){
				
					this.setProperty("dmd_db_schema", dmd_db_schema.toString());
				
			}
			
			if(dmd_db_script_path != null){
				
					this.setProperty("dmd_db_script_path", dmd_db_script_path.toString());
				
			}
			
			if(dmd_db_stg_additionalparams != null){
				
					this.setProperty("dmd_db_stg_additionalparams", dmd_db_stg_additionalparams.toString());
				
			}
			
			if(dmd_db_stg_host != null){
				
					this.setProperty("dmd_db_stg_host", dmd_db_stg_host.toString());
				
			}
			
			if(dmd_db_stg_name != null){
				
					this.setProperty("dmd_db_stg_name", dmd_db_stg_name.toString());
				
			}
			
			if(dmd_db_stg_password != null){
				
					this.setProperty("dmd_db_stg_password", dmd_db_stg_password.toString());
				
			}
			
			if(dmd_db_stg_port != null){
				
					this.setProperty("dmd_db_stg_port", dmd_db_stg_port.toString());
				
			}
			
			if(dmd_db_stg_pwd_string != null){
				
					this.setProperty("dmd_db_stg_pwd_string", dmd_db_stg_pwd_string.toString());
				
			}
			
			if(dmd_db_stg_schema != null){
				
					this.setProperty("dmd_db_stg_schema", dmd_db_stg_schema.toString());
				
			}
			
			if(dmd_db_stg_user != null){
				
					this.setProperty("dmd_db_stg_user", dmd_db_stg_user.toString());
				
			}
			
			if(dmd_db_user != null){
				
					this.setProperty("dmd_db_user", dmd_db_user.toString());
				
			}
			
			if(dmd_file_path != null){
				
					this.setProperty("dmd_file_path", dmd_file_path.toString());
				
			}
			
			if(dmd_version != null){
				
					this.setProperty("dmd_version", dmd_version.toString());
				
			}
			
		}

public String dmd_stg_current_processs_id;
public String getDmd_stg_current_processs_id(){
	return this.dmd_stg_current_processs_id;
}
public String dmd_db_additionalparams;
public String getDmd_db_additionalparams(){
	return this.dmd_db_additionalparams;
}
public String dmd_db_host;
public String getDmd_db_host(){
	return this.dmd_db_host;
}
public String dmd_db_name;
public String getDmd_db_name(){
	return this.dmd_db_name;
}
public java.lang.String dmd_db_password;
public java.lang.String getDmd_db_password(){
	return this.dmd_db_password;
}
public Integer dmd_db_port;
public Integer getDmd_db_port(){
	return this.dmd_db_port;
}
public String dmd_db_psql_path;
public String getDmd_db_psql_path(){
	return this.dmd_db_psql_path;
}
public String dmd_db_pwd_string;
public String getDmd_db_pwd_string(){
	return this.dmd_db_pwd_string;
}
public String dmd_db_schema;
public String getDmd_db_schema(){
	return this.dmd_db_schema;
}
public String dmd_db_script_path;
public String getDmd_db_script_path(){
	return this.dmd_db_script_path;
}
public String dmd_db_stg_additionalparams;
public String getDmd_db_stg_additionalparams(){
	return this.dmd_db_stg_additionalparams;
}
public String dmd_db_stg_host;
public String getDmd_db_stg_host(){
	return this.dmd_db_stg_host;
}
public String dmd_db_stg_name;
public String getDmd_db_stg_name(){
	return this.dmd_db_stg_name;
}
public java.lang.String dmd_db_stg_password;
public java.lang.String getDmd_db_stg_password(){
	return this.dmd_db_stg_password;
}
public Integer dmd_db_stg_port;
public Integer getDmd_db_stg_port(){
	return this.dmd_db_stg_port;
}
public String dmd_db_stg_pwd_string;
public String getDmd_db_stg_pwd_string(){
	return this.dmd_db_stg_pwd_string;
}
public String dmd_db_stg_schema;
public String getDmd_db_stg_schema(){
	return this.dmd_db_stg_schema;
}
public String dmd_db_stg_user;
public String getDmd_db_stg_user(){
	return this.dmd_db_stg_user;
}
public String dmd_db_user;
public String getDmd_db_user(){
	return this.dmd_db_user;
}
public String dmd_file_path;
public String getDmd_file_path(){
	return this.dmd_file_path;
}
public String dmd_version;
public String getDmd_version(){
	return this.dmd_version;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dmd_delta_actual_ingest_subjob";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("_wuMXQEBhEeuTPeGsht8sfg", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils("_wuMXQEBhEeuTPeGsht8sfg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dmd_delta_actual_ingest_subjob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dmd_delta_actual_ingest_subjob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_53_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_53_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_53_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_53_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_62_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_62_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_62_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_62_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_73_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_73_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_73_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_73_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_76_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_76_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_76_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_76_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_77_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_77_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_77_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_77_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendStats_STATS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendMeter_METTER_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_38_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_45_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_53_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_62_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_73_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_76_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_77_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendMeter_METTER_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmp_deleteStruct implements routines.system.IPersistableRow<vmp_deleteStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmp_deleteStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_delStruct implements routines.system.IPersistableRow<amp_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vtm_del_rowStruct implements routines.system.IPersistableRow<dmd_vtm_del_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vtm_del_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_amp_drugroute_delStruct implements routines.system.IPersistableRow<dmd_amp_drugroute_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_amp_drugroute_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_amp_excipient_delStruct implements routines.system.IPersistableRow<dmd_amp_excipient_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_amp_excipient_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_controldrug_delStruct implements routines.system.IPersistableRow<dmd_vmp_controldrug_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_controldrug_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_drugform_delStruct implements routines.system.IPersistableRow<dmd_vmp_drugform_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_drugform_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_drugroute_delStruct implements routines.system.IPersistableRow<dmd_vmp_drugroute_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_drugroute_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_ingredient_delStruct implements routines.system.IPersistableRow<dmd_vmp_ingredient_delStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_ingredient_delStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public java.util.Date created_dt;

				public java.util.Date getCreated_dt () {
					return this.created_dt;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public long serial_num;

				public long getSerial_num () {
					return this.serial_num;
				}
				
			    public Boolean is_dmd_updated;

				public Boolean getIs_dmd_updated () {
					return this.is_dmd_updated;
				}
				
			    public java.util.Date dmd_update_dt;

				public java.util.Date getDmd_update_dt () {
					return this.dmd_update_dt;
				}
				
			    public Boolean is_formulary_updated;

				public Boolean getIs_formulary_updated () {
					return this.is_formulary_updated;
				}
				
			    public java.util.Date formulary_update_dt;

				public java.util.Date getFormulary_update_dt () {
					return this.formulary_update_dt;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.created_dt = readDate(dis);
					
					this.row_action = readString(dis);
					
			        this.serial_num = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_dmd_updated = null;
           				} else {
           			    	this.is_dmd_updated = dis.readBoolean();
           				}
					
					this.dmd_update_dt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_formulary_updated = null;
           				} else {
           			    	this.is_formulary_updated = dis.readBoolean();
           				}
					
					this.formulary_update_dt = readDate(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// java.util.Date
				
						writeDate(this.created_dt,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// long
				
		            	dos.writeLong(this.serial_num);
					
					// Boolean
				
						if(this.is_dmd_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_dmd_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.dmd_update_dt,dos);
					
					// Boolean
				
						if(this.is_formulary_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_formulary_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.formulary_update_dt,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",created_dt="+String.valueOf(created_dt));
		sb.append(",row_action="+row_action);
		sb.append(",serial_num="+String.valueOf(serial_num));
		sb.append(",is_dmd_updated="+String.valueOf(is_dmd_updated));
		sb.append(",dmd_update_dt="+String.valueOf(dmd_update_dt));
		sb.append(",is_formulary_updated="+String.valueOf(is_formulary_updated));
		sb.append(",formulary_update_dt="+String.valueOf(formulary_update_dt));
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
vmp_deleteStruct vmp_delete = new vmp_deleteStruct();
row2Struct row2 = new row2Struct();
amp_delStruct amp_del = new amp_delStruct();
row10Struct row10 = new row10Struct();
dmd_vtm_del_rowStruct dmd_vtm_del_row = new dmd_vtm_del_rowStruct();
row13Struct row13 = new row13Struct();
dmd_amp_drugroute_delStruct dmd_amp_drugroute_del = new dmd_amp_drugroute_delStruct();
row16Struct row16 = new row16Struct();
dmd_amp_excipient_delStruct dmd_amp_excipient_del = new dmd_amp_excipient_delStruct();
row17Struct row17 = new row17Struct();
dmd_vmp_controldrug_delStruct dmd_vmp_controldrug_del = new dmd_vmp_controldrug_delStruct();
row18Struct row18 = new row18Struct();
dmd_vmp_drugform_delStruct dmd_vmp_drugform_del = new dmd_vmp_drugform_delStruct();
row19Struct row19 = new row19Struct();
dmd_vmp_drugroute_delStruct dmd_vmp_drugroute_del = new dmd_vmp_drugroute_delStruct();
row20Struct row20 = new row20Struct();
dmd_vmp_ingredient_delStruct dmd_vmp_ingredient_del = new dmd_vmp_ingredient_delStruct();
row21Struct row21 = new row21Struct();






	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp_delete");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.dmd_db_schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dmd_vmp");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dmd_vmp");
}

        int deleteKeyCount_tDBOutput_1 = 1;
        if(deleteKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_1 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_1 = context.dmd_db_password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String delete_tDBOutput_1 = "DELETE FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"vpid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(delete_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_del");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.dmd_db_schema;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("dmd_amp");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("dmd_amp");
}

        int deleteKeyCount_tDBOutput_6 = 1;
        if(deleteKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_6 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_6 = context.dmd_db_password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String delete_tDBOutput_6 = "DELETE FROM \"" + tableName_tDBOutput_6 + "\" WHERE \"apid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(delete_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */





	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tLogRow_6 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
		java.io.PrintStream consoleOut_tLogRow_6 = null;	

 		StringBuilder strBuffer_tLogRow_6 = null;
		int nb_line_tLogRow_6 = 0;
///////////////////////    			



 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vtm_del_row");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = context.dmd_db_schema;
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = ("dmd_vtm");
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("dmd_vtm");
}

        int deleteKeyCount_tDBOutput_8 = 1;
        if(deleteKeyCount_tDBOutput_8 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_8 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_8 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_8 = context.dmd_db_password; 

    String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;

    conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8,dbUser_tDBOutput_8,dbPwd_tDBOutput_8);
	
	resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
        conn_tDBOutput_8.setAutoCommit(false);
        int commitEvery_tDBOutput_8 = 10000;
        int commitCounter_tDBOutput_8 = 0;


   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
	    String delete_tDBOutput_8 = "DELETE FROM \"" + tableName_tDBOutput_8 + "\" WHERE \"vtmid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(delete_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */





	
	/**
	 * [tLogRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_7", false);
		start_Hash.put("tLogRow_7", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tLogRow_7 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
		java.io.PrintStream consoleOut_tLogRow_7 = null;	

 		StringBuilder strBuffer_tLogRow_7 = null;
		int nb_line_tLogRow_7 = 0;
///////////////////////    			



 



/**
 * [tLogRow_7 begin ] stop
 */



	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp_drugroute_del");
					}
				
		int tos_count_tDBOutput_11 = 0;
		





String dbschema_tDBOutput_11 = null;
	dbschema_tDBOutput_11 = context.dmd_db_schema;
	

String tableName_tDBOutput_11 = null;
if(dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
	tableName_tDBOutput_11 = ("dmd_amp_drugroute");
} else {
	tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "\".\"" + ("dmd_amp_drugroute");
}

        int deleteKeyCount_tDBOutput_11 = 1;
        if(deleteKeyCount_tDBOutput_11 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;
int rejectedCount_tDBOutput_11=0;

boolean whetherReject_tDBOutput_11 = false;

java.sql.Connection conn_tDBOutput_11 = null;
String dbUser_tDBOutput_11 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_11 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_11 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_11 = context.dmd_db_password; 

    String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;

    conn_tDBOutput_11 = java.sql.DriverManager.getConnection(url_tDBOutput_11,dbUser_tDBOutput_11,dbPwd_tDBOutput_11);
	
	resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
        conn_tDBOutput_11.setAutoCommit(false);
        int commitEvery_tDBOutput_11 = 10000;
        int commitCounter_tDBOutput_11 = 0;


   int batchSize_tDBOutput_11 = 10000;
   int batchSizeCounter_tDBOutput_11=0;

int count_tDBOutput_11=0;
	    String delete_tDBOutput_11 = "DELETE FROM \"" + tableName_tDBOutput_11 + "\" WHERE \"apid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(delete_tDBOutput_11);
	    resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
	    

 



/**
 * [tDBOutput_11 begin ] stop
 */





	
	/**
	 * [tLogRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_8", false);
		start_Hash.put("tLogRow_8", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tLogRow_8 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
		java.io.PrintStream consoleOut_tLogRow_8 = null;	

 		StringBuilder strBuffer_tLogRow_8 = null;
		int nb_line_tLogRow_8 = 0;
///////////////////////    			



 



/**
 * [tLogRow_8 begin ] stop
 */



	
	/**
	 * [tDBOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_12", false);
		start_Hash.put("tDBOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp_excipient_del");
					}
				
		int tos_count_tDBOutput_12 = 0;
		





String dbschema_tDBOutput_12 = null;
	dbschema_tDBOutput_12 = context.dmd_db_schema;
	

String tableName_tDBOutput_12 = null;
if(dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
	tableName_tDBOutput_12 = ("dmd_amp_excipient");
} else {
	tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "\".\"" + ("dmd_amp_excipient");
}

        int deleteKeyCount_tDBOutput_12 = 1;
        if(deleteKeyCount_tDBOutput_12 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_12 = 0;
int nb_line_update_tDBOutput_12 = 0;
int nb_line_inserted_tDBOutput_12 = 0;
int nb_line_deleted_tDBOutput_12 = 0;
int nb_line_rejected_tDBOutput_12 = 0;

int deletedCount_tDBOutput_12=0;
int updatedCount_tDBOutput_12=0;
int insertedCount_tDBOutput_12=0;
int rejectedCount_tDBOutput_12=0;

boolean whetherReject_tDBOutput_12 = false;

java.sql.Connection conn_tDBOutput_12 = null;
String dbUser_tDBOutput_12 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_12 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_12 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_12 = context.dmd_db_password; 

    String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;

    conn_tDBOutput_12 = java.sql.DriverManager.getConnection(url_tDBOutput_12,dbUser_tDBOutput_12,dbPwd_tDBOutput_12);
	
	resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);
        conn_tDBOutput_12.setAutoCommit(false);
        int commitEvery_tDBOutput_12 = 10000;
        int commitCounter_tDBOutput_12 = 0;


   int batchSize_tDBOutput_12 = 10000;
   int batchSizeCounter_tDBOutput_12=0;

int count_tDBOutput_12=0;
	    String delete_tDBOutput_12 = "DELETE FROM \"" + tableName_tDBOutput_12 + "\" WHERE \"apid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(delete_tDBOutput_12);
	    resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);
	    

 



/**
 * [tDBOutput_12 begin ] stop
 */





	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tLogRow_9 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
		java.io.PrintStream consoleOut_tLogRow_9 = null;	

 		StringBuilder strBuffer_tLogRow_9 = null;
		int nb_line_tLogRow_9 = 0;
///////////////////////    			



 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_controldrug_del");
					}
				
		int tos_count_tDBOutput_13 = 0;
		





String dbschema_tDBOutput_13 = null;
	dbschema_tDBOutput_13 = context.dmd_db_schema;
	

String tableName_tDBOutput_13 = null;
if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
	tableName_tDBOutput_13 = ("dmd_vmp_controldrug");
} else {
	tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("dmd_vmp_controldrug");
}

        int deleteKeyCount_tDBOutput_13 = 1;
        if(deleteKeyCount_tDBOutput_13 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;

boolean whetherReject_tDBOutput_13 = false;

java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_13 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_13 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_13 = context.dmd_db_password; 

    String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;

    conn_tDBOutput_13 = java.sql.DriverManager.getConnection(url_tDBOutput_13,dbUser_tDBOutput_13,dbPwd_tDBOutput_13);
	
	resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
        conn_tDBOutput_13.setAutoCommit(false);
        int commitEvery_tDBOutput_13 = 10000;
        int commitCounter_tDBOutput_13 = 0;


   int batchSize_tDBOutput_13 = 10000;
   int batchSizeCounter_tDBOutput_13=0;

int count_tDBOutput_13=0;
	    String delete_tDBOutput_13 = "DELETE FROM \"" + tableName_tDBOutput_13 + "\" WHERE \"vpid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(delete_tDBOutput_13);
	    resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
	    

 



/**
 * [tDBOutput_13 begin ] stop
 */





	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tLogRow_10 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
		java.io.PrintStream consoleOut_tLogRow_10 = null;	

 		StringBuilder strBuffer_tLogRow_10 = null;
		int nb_line_tLogRow_10 = 0;
///////////////////////    			



 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tDBOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_14", false);
		start_Hash.put("tDBOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_drugform_del");
					}
				
		int tos_count_tDBOutput_14 = 0;
		





String dbschema_tDBOutput_14 = null;
	dbschema_tDBOutput_14 = context.dmd_db_schema;
	

String tableName_tDBOutput_14 = null;
if(dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
	tableName_tDBOutput_14 = ("dmd_vmp_drugform");
} else {
	tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "\".\"" + ("dmd_vmp_drugform");
}

        int deleteKeyCount_tDBOutput_14 = 1;
        if(deleteKeyCount_tDBOutput_14 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_14 = 0;
int nb_line_update_tDBOutput_14 = 0;
int nb_line_inserted_tDBOutput_14 = 0;
int nb_line_deleted_tDBOutput_14 = 0;
int nb_line_rejected_tDBOutput_14 = 0;

int deletedCount_tDBOutput_14=0;
int updatedCount_tDBOutput_14=0;
int insertedCount_tDBOutput_14=0;
int rejectedCount_tDBOutput_14=0;

boolean whetherReject_tDBOutput_14 = false;

java.sql.Connection conn_tDBOutput_14 = null;
String dbUser_tDBOutput_14 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_14 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_14 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_14 = context.dmd_db_password; 

    String dbPwd_tDBOutput_14 = decryptedPassword_tDBOutput_14;

    conn_tDBOutput_14 = java.sql.DriverManager.getConnection(url_tDBOutput_14,dbUser_tDBOutput_14,dbPwd_tDBOutput_14);
	
	resourceMap.put("conn_tDBOutput_14", conn_tDBOutput_14);
        conn_tDBOutput_14.setAutoCommit(false);
        int commitEvery_tDBOutput_14 = 10000;
        int commitCounter_tDBOutput_14 = 0;


   int batchSize_tDBOutput_14 = 10000;
   int batchSizeCounter_tDBOutput_14=0;

int count_tDBOutput_14=0;
	    String delete_tDBOutput_14 = "DELETE FROM \"" + tableName_tDBOutput_14 + "\" WHERE \"vpid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(delete_tDBOutput_14);
	    resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);
	    

 



/**
 * [tDBOutput_14 begin ] stop
 */





	
	/**
	 * [tLogRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_11", false);
		start_Hash.put("tLogRow_11", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tLogRow_11 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
		java.io.PrintStream consoleOut_tLogRow_11 = null;	

 		StringBuilder strBuffer_tLogRow_11 = null;
		int nb_line_tLogRow_11 = 0;
///////////////////////    			



 



/**
 * [tLogRow_11 begin ] stop
 */



	
	/**
	 * [tDBOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_15", false);
		start_Hash.put("tDBOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_drugroute_del");
					}
				
		int tos_count_tDBOutput_15 = 0;
		





String dbschema_tDBOutput_15 = null;
	dbschema_tDBOutput_15 = context.dmd_db_schema;
	

String tableName_tDBOutput_15 = null;
if(dbschema_tDBOutput_15 == null || dbschema_tDBOutput_15.trim().length() == 0) {
	tableName_tDBOutput_15 = ("dmd_vmp_drugroute");
} else {
	tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "\".\"" + ("dmd_vmp_drugroute");
}

        int deleteKeyCount_tDBOutput_15 = 1;
        if(deleteKeyCount_tDBOutput_15 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_15 = 0;
int nb_line_update_tDBOutput_15 = 0;
int nb_line_inserted_tDBOutput_15 = 0;
int nb_line_deleted_tDBOutput_15 = 0;
int nb_line_rejected_tDBOutput_15 = 0;

int deletedCount_tDBOutput_15=0;
int updatedCount_tDBOutput_15=0;
int insertedCount_tDBOutput_15=0;
int rejectedCount_tDBOutput_15=0;

boolean whetherReject_tDBOutput_15 = false;

java.sql.Connection conn_tDBOutput_15 = null;
String dbUser_tDBOutput_15 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_15 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_15 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_15 = context.dmd_db_password; 

    String dbPwd_tDBOutput_15 = decryptedPassword_tDBOutput_15;

    conn_tDBOutput_15 = java.sql.DriverManager.getConnection(url_tDBOutput_15,dbUser_tDBOutput_15,dbPwd_tDBOutput_15);
	
	resourceMap.put("conn_tDBOutput_15", conn_tDBOutput_15);
        conn_tDBOutput_15.setAutoCommit(false);
        int commitEvery_tDBOutput_15 = 10000;
        int commitCounter_tDBOutput_15 = 0;


   int batchSize_tDBOutput_15 = 10000;
   int batchSizeCounter_tDBOutput_15=0;

int count_tDBOutput_15=0;
	    String delete_tDBOutput_15 = "DELETE FROM \"" + tableName_tDBOutput_15 + "\" WHERE \"vpid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15.prepareStatement(delete_tDBOutput_15);
	    resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);
	    

 



/**
 * [tDBOutput_15 begin ] stop
 */





	
	/**
	 * [tLogRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_12", false);
		start_Hash.put("tLogRow_12", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tLogRow_12 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_12 = "|";
		java.io.PrintStream consoleOut_tLogRow_12 = null;	

 		StringBuilder strBuffer_tLogRow_12 = null;
		int nb_line_tLogRow_12 = 0;
///////////////////////    			



 



/**
 * [tLogRow_12 begin ] stop
 */



	
	/**
	 * [tDBOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_16", false);
		start_Hash.put("tDBOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_ingredient_del");
					}
				
		int tos_count_tDBOutput_16 = 0;
		





String dbschema_tDBOutput_16 = null;
	dbschema_tDBOutput_16 = context.dmd_db_schema;
	

String tableName_tDBOutput_16 = null;
if(dbschema_tDBOutput_16 == null || dbschema_tDBOutput_16.trim().length() == 0) {
	tableName_tDBOutput_16 = ("dmd_vmp_ingredient");
} else {
	tableName_tDBOutput_16 = dbschema_tDBOutput_16 + "\".\"" + ("dmd_vmp_ingredient");
}

        int deleteKeyCount_tDBOutput_16 = 1;
        if(deleteKeyCount_tDBOutput_16 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tDBOutput_16 = 0;
int nb_line_update_tDBOutput_16 = 0;
int nb_line_inserted_tDBOutput_16 = 0;
int nb_line_deleted_tDBOutput_16 = 0;
int nb_line_rejected_tDBOutput_16 = 0;

int deletedCount_tDBOutput_16=0;
int updatedCount_tDBOutput_16=0;
int insertedCount_tDBOutput_16=0;
int rejectedCount_tDBOutput_16=0;

boolean whetherReject_tDBOutput_16 = false;

java.sql.Connection conn_tDBOutput_16 = null;
String dbUser_tDBOutput_16 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_16 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_16 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_16 = context.dmd_db_password; 

    String dbPwd_tDBOutput_16 = decryptedPassword_tDBOutput_16;

    conn_tDBOutput_16 = java.sql.DriverManager.getConnection(url_tDBOutput_16,dbUser_tDBOutput_16,dbPwd_tDBOutput_16);
	
	resourceMap.put("conn_tDBOutput_16", conn_tDBOutput_16);
        conn_tDBOutput_16.setAutoCommit(false);
        int commitEvery_tDBOutput_16 = 10000;
        int commitCounter_tDBOutput_16 = 0;


   int batchSize_tDBOutput_16 = 10000;
   int batchSizeCounter_tDBOutput_16=0;

int count_tDBOutput_16=0;
	    String delete_tDBOutput_16 = "DELETE FROM \"" + tableName_tDBOutput_16 + "\" WHERE \"vpid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_16 = conn_tDBOutput_16.prepareStatement(delete_tDBOutput_16);
	    resourceMap.put("pstmt_tDBOutput_16", pstmt_tDBOutput_16);
	    

 



/**
 * [tDBOutput_16 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
vmp_deleteStruct vmp_delete_tmp = new vmp_deleteStruct();
amp_delStruct amp_del_tmp = new amp_delStruct();
dmd_vtm_del_rowStruct dmd_vtm_del_row_tmp = new dmd_vtm_del_rowStruct();
dmd_amp_drugroute_delStruct dmd_amp_drugroute_del_tmp = new dmd_amp_drugroute_delStruct();
dmd_amp_excipient_delStruct dmd_amp_excipient_del_tmp = new dmd_amp_excipient_delStruct();
dmd_vmp_controldrug_delStruct dmd_vmp_controldrug_del_tmp = new dmd_vmp_controldrug_delStruct();
dmd_vmp_drugform_delStruct dmd_vmp_drugform_del_tmp = new dmd_vmp_drugform_delStruct();
dmd_vmp_drugroute_delStruct dmd_vmp_drugroute_del_tmp = new dmd_vmp_drugroute_delStruct();
dmd_vmp_ingredient_delStruct dmd_vmp_ingredient_del_tmp = new dmd_vmp_ingredient_delStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_1 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_id\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"sync_process_id\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_entity_name\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"created_dt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"row_action\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"serial_num\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"is_dmd_updated\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_update_dt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"is_formulary_updated\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"formulary_update_dt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_version\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\"";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.dmd_id = null;
							} else {
	                         		
        	row1.dmd_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.sync_process_id = null;
							} else {
	                         		
        	row1.sync_process_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.dmd_entity_name = null;
							} else {
	                         		
        	row1.dmd_entity_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.created_dt = null;
							} else {
										
			row1.created_dt = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 4);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.row_action = null;
							} else {
	                         		
        	row1.row_action = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.serial_num = 0;
							} else {
		                          
            row1.serial_num = rs_tDBInput_1.getLong(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.is_dmd_updated = null;
							} else {
	                         		
            row1.is_dmd_updated = rs_tDBInput_1.getBoolean(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.is_dmd_updated = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.dmd_update_dt = null;
							} else {
										
			row1.dmd_update_dt = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 8);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.is_formulary_updated = null;
							} else {
	                         		
            row1.is_formulary_updated = rs_tDBInput_1.getBoolean(9);
            if(rs_tDBInput_1.wasNull()){
                    row1.is_formulary_updated = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.formulary_update_dt = null;
							} else {
										
			row1.formulary_update_dt = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 10);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.dmd_version = null;
							} else {
	                         		
        	row1.dmd_version = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

vmp_delete = null;
amp_del = null;
dmd_vtm_del_row = null;
dmd_amp_drugroute_del = null;
dmd_amp_excipient_del = null;
dmd_vmp_controldrug_del = null;
dmd_vmp_drugform_del = null;
dmd_vmp_drugroute_del = null;
dmd_vmp_ingredient_del = null;


// # Output table : 'vmp_delete'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_vmp")

 ) {
vmp_delete_tmp.vpid = row1.dmd_id ;
vmp_delete_tmp.vpiddt = null;
vmp_delete_tmp.vpidprev = null;
vmp_delete_tmp.vtmid = null;
vmp_delete_tmp.invalid = null;
vmp_delete_tmp.nm = null;
vmp_delete_tmp.abbrevnm = null;
vmp_delete_tmp.basiscd = null;
vmp_delete_tmp.nmdt = null;
vmp_delete_tmp.nmprev = null;
vmp_delete_tmp.basis_prevcd = null;
vmp_delete_tmp.nmchangecd = null;
vmp_delete_tmp.comprodcd = null;
vmp_delete_tmp.pres_statcd = null;
vmp_delete_tmp.sug_f = null;
vmp_delete_tmp.glu_f = null;
vmp_delete_tmp.pres_f = null;
vmp_delete_tmp.cfc_f = null;
vmp_delete_tmp.non_availcd = null;
vmp_delete_tmp.non_availdt = null;
vmp_delete_tmp.df_indcd = null;
vmp_delete_tmp.udfs = null;
vmp_delete_tmp.udfs_uomcd = null;
vmp_delete_tmp.unit_dose_uomcd = null;
vmp_delete_tmp.col_val_hash = null;
vmp_delete = vmp_delete_tmp;
} // closing filter/reject

// # Output table : 'amp_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_amp")

 ) {
amp_del_tmp.apid = row1.dmd_id ;
amp_del_tmp.invalid = null;
amp_del_tmp.vpid = null;
amp_del_tmp.nm = null;
amp_del_tmp.abbrevnm = null;
amp_del_tmp.desc = null;
amp_del_tmp.nmdt = null;
amp_del_tmp.nm_prev = null;
amp_del_tmp.suppcd = null;
amp_del_tmp.lic_authcd = null;
amp_del_tmp.lic_auth_prevcd = null;
amp_del_tmp.lic_authchangecd = null;
amp_del_tmp.lic_authchangedt = null;
amp_del_tmp.combprodcd = null;
amp_del_tmp.flavourcd = null;
amp_del_tmp.ema = null;
amp_del_tmp.parallel_import = null;
amp_del_tmp.avail_restrictcd = null;
amp_del_tmp.col_val_hash = null;
amp_del = amp_del_tmp;
} // closing filter/reject

// # Output table : 'dmd_vtm_del_row'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_vtm")

 ) {
dmd_vtm_del_row_tmp.vtmid = row1.dmd_id ;
dmd_vtm_del_row_tmp.invalid = null;
dmd_vtm_del_row_tmp.nm = null;
dmd_vtm_del_row_tmp.abbrevnm = null;
dmd_vtm_del_row_tmp.vtmidprev = null;
dmd_vtm_del_row_tmp.vtmiddt = null;
dmd_vtm_del_row_tmp.col_val_hash = null;
dmd_vtm_del_row = dmd_vtm_del_row_tmp;
} // closing filter/reject

// # Output table : 'dmd_amp_drugroute_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_amp_drugroute")

 ) {
dmd_amp_drugroute_del_tmp.apid = row1.dmd_id;
dmd_amp_drugroute_del_tmp.routecd = null;
dmd_amp_drugroute_del_tmp.col_val_hash = null;
dmd_amp_drugroute_del = dmd_amp_drugroute_del_tmp;
} // closing filter/reject

// # Output table : 'dmd_amp_excipient_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_amp_excipient")

 ) {
dmd_amp_excipient_del_tmp.apid = row1.dmd_id;
dmd_amp_excipient_del_tmp.isid = null;
dmd_amp_excipient_del_tmp.strnth = null;
dmd_amp_excipient_del_tmp.strnth_uomcd = null;
dmd_amp_excipient_del_tmp.col_val_hash = null;
dmd_amp_excipient_del = dmd_amp_excipient_del_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_controldrug_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_vmp_controldrug")

 ) {
dmd_vmp_controldrug_del_tmp.vpid = row1.dmd_id;
dmd_vmp_controldrug_del_tmp.catcd = null;
dmd_vmp_controldrug_del_tmp.catdt = null;
dmd_vmp_controldrug_del_tmp.cat_prevcd = null;
dmd_vmp_controldrug_del_tmp.col_val_hash = null;
dmd_vmp_controldrug_del = dmd_vmp_controldrug_del_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_drugform_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_vmp_drugform")

 ) {
dmd_vmp_drugform_del_tmp.vpid = row1.dmd_id;
dmd_vmp_drugform_del_tmp.formcd = null;
dmd_vmp_drugform_del_tmp.col_val_hash = null;
dmd_vmp_drugform_del = dmd_vmp_drugform_del_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_drugroute_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_vmp_drugroute")

 ) {
dmd_vmp_drugroute_del_tmp.vpid = row1.dmd_id;
dmd_vmp_drugroute_del_tmp.routecd = null;
dmd_vmp_drugroute_del_tmp.col_val_hash = null;
dmd_vmp_drugroute_del = dmd_vmp_drugroute_del_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_ingredient_del'
// # Filter conditions 
if( 

row1.dmd_entity_name != null && row1.dmd_entity_name.equals("dmd_vmp_ingredient")

 ) {
dmd_vmp_ingredient_del_tmp.vpid = row1.dmd_id;
dmd_vmp_ingredient_del_tmp.isid = null;
dmd_vmp_ingredient_del_tmp.basis_strntcd = null;
dmd_vmp_ingredient_del_tmp.bs_subid = null;
dmd_vmp_ingredient_del_tmp.strnt_nmrtr_val = null;
dmd_vmp_ingredient_del_tmp.strnt_nmrtr_uomcd = null;
dmd_vmp_ingredient_del_tmp.strnt_dnmtr_val = null;
dmd_vmp_ingredient_del_tmp.strnt_dnmtr_uomcd = null;
dmd_vmp_ingredient_del_tmp.col_val_hash = null;
dmd_vmp_ingredient_del = dmd_vmp_ingredient_del_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "vmp_delete"
if(vmp_delete != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp_delete");
					}
					



            row2 = null;
        whetherReject_tDBOutput_1 = false;
					
                    if(vmp_delete.vpid == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, vmp_delete.vpid);
}

    		pstmt_tDBOutput_1.addBatch();
			nb_line_tDBOutput_1++;
			  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		
            if(!whetherReject_tDBOutput_1) {
                            row2 = new row2Struct();
                                row2.vpid = vmp_delete.vpid;
                                row2.vpiddt = vmp_delete.vpiddt;
                                row2.vpidprev = vmp_delete.vpidprev;
                                row2.vtmid = vmp_delete.vtmid;
                                row2.invalid = vmp_delete.invalid;
                                row2.nm = vmp_delete.nm;
                                row2.abbrevnm = vmp_delete.abbrevnm;
                                row2.basiscd = vmp_delete.basiscd;
                                row2.nmdt = vmp_delete.nmdt;
                                row2.nmprev = vmp_delete.nmprev;
                                row2.basis_prevcd = vmp_delete.basis_prevcd;
                                row2.nmchangecd = vmp_delete.nmchangecd;
                                row2.comprodcd = vmp_delete.comprodcd;
                                row2.pres_statcd = vmp_delete.pres_statcd;
                                row2.sug_f = vmp_delete.sug_f;
                                row2.glu_f = vmp_delete.glu_f;
                                row2.pres_f = vmp_delete.pres_f;
                                row2.cfc_f = vmp_delete.cfc_f;
                                row2.non_availcd = vmp_delete.non_availcd;
                                row2.non_availdt = vmp_delete.non_availdt;
                                row2.df_indcd = vmp_delete.df_indcd;
                                row2.udfs = vmp_delete.udfs;
                                row2.udfs_uomcd = vmp_delete.udfs_uomcd;
                                row2.unit_dose_uomcd = vmp_delete.unit_dose_uomcd;
                                row2.col_val_hash = vmp_delete.col_val_hash;
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row2.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.vpiddt != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row2.vpiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.vpidprev != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.vpidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.vtmid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.vtmid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.basiscd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.basiscd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.nmdt != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row2.nmdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.nmprev != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.nmprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.basis_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.basis_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.nmchangecd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.nmchangecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.comprodcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.comprodcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.pres_statcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.pres_statcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.sug_f != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.sug_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.glu_f != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.glu_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.pres_f != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.pres_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.cfc_f != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.cfc_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.non_availcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.non_availcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.non_availdt != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row2.non_availdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.df_indcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.df_indcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.udfs != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								row2.udfs.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.udfs_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.udfs_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.unit_dose_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.unit_dose_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "vmp_delete"




// Start of branch "amp_del"
if(amp_del != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_del");
					}
					



            row10 = null;
        whetherReject_tDBOutput_6 = false;
					
                    if(amp_del.apid == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, amp_del.apid);
}

    		pstmt_tDBOutput_6.addBatch();
			nb_line_tDBOutput_6++;
			  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		
            if(!whetherReject_tDBOutput_6) {
                            row10 = new row10Struct();
                                row10.apid = amp_del.apid;
                                row10.invalid = amp_del.invalid;
                                row10.vpid = amp_del.vpid;
                                row10.nm = amp_del.nm;
                                row10.abbrevnm = amp_del.abbrevnm;
                                row10.desc = amp_del.desc;
                                row10.nmdt = amp_del.nmdt;
                                row10.nm_prev = amp_del.nm_prev;
                                row10.suppcd = amp_del.suppcd;
                                row10.lic_authcd = amp_del.lic_authcd;
                                row10.lic_auth_prevcd = amp_del.lic_auth_prevcd;
                                row10.lic_authchangecd = amp_del.lic_authchangecd;
                                row10.lic_authchangedt = amp_del.lic_authchangedt;
                                row10.combprodcd = amp_del.combprodcd;
                                row10.flavourcd = amp_del.flavourcd;
                                row10.ema = amp_del.ema;
                                row10.parallel_import = amp_del.parallel_import;
                                row10.avail_restrictcd = amp_del.avail_restrictcd;
                                row10.col_val_hash = amp_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	
				    	    deletedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						
				    	    deletedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                if ((batchSize_tDBOutput_6 > 0) && (batchSizeCounter_tDBOutput_6 > 0)) {
                try {
                		int countSum_tDBOutput_6 = 0;
                		    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
            	    	
            	    	    deletedCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
                batchSizeCounter_tDBOutput_6 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_6){
			    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
			    	String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					}else{
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}
			    	
			    	int countSum_tDBOutput_6 = 0;
					for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					
			    	    deletedCount_tDBOutput_6 += countSum_tDBOutput_6;
			    	
			    	System.err.println(errormessage_tDBOutput_6);
			    	
				}
            }
                	conn_tDBOutput_6.commit();
                	
                	commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row10.apid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.nm != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.desc != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.desc)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.nmdt != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								FormatterUtils.format_Date(row10.nmdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.nm_prev != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.nm_prev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.suppcd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.suppcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.lic_authcd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.lic_authcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.lic_auth_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.lic_auth_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.lic_authchangecd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.lic_authchangecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.lic_authchangedt != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								FormatterUtils.format_Date(row10.lic_authchangedt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.combprodcd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.combprodcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.flavourcd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.flavourcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.ema != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.ema)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.parallel_import != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.parallel_import)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.avail_restrictcd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.avail_restrictcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row10.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row10.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "amp_del"




// Start of branch "dmd_vtm_del_row"
if(dmd_vtm_del_row != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vtm_del_row");
					}
					



            row13 = null;
        whetherReject_tDBOutput_8 = false;
					
                    if(dmd_vtm_del_row.vtmid == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(1, dmd_vtm_del_row.vtmid);
}

    		pstmt_tDBOutput_8.addBatch();
			nb_line_tDBOutput_8++;
			  
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		
            if(!whetherReject_tDBOutput_8) {
                            row13 = new row13Struct();
                                row13.vtmid = dmd_vtm_del_row.vtmid;
                                row13.invalid = dmd_vtm_del_row.invalid;
                                row13.nm = dmd_vtm_del_row.nm;
                                row13.abbrevnm = dmd_vtm_del_row.abbrevnm;
                                row13.vtmidprev = dmd_vtm_del_row.vtmidprev;
                                row13.vtmiddt = dmd_vtm_del_row.vtmiddt;
                                row13.col_val_hash = dmd_vtm_del_row.col_val_hash;
            }
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	
				    	    deletedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    	int countSum_tDBOutput_8 = 0;
						for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
						
				    	    deletedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
				    	System.err.println(errormessage_tDBOutput_8);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_8++;
                if(commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
                if ((batchSize_tDBOutput_8 > 0) && (batchSizeCounter_tDBOutput_8 > 0)) {
                try {
                		int countSum_tDBOutput_8 = 0;
                		    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
            	    	
            	    	    deletedCount_tDBOutput_8 += countSum_tDBOutput_8;
            	    	
                batchSizeCounter_tDBOutput_8 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_8){
			    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
			    	String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
					}else{
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}
			    	
			    	int countSum_tDBOutput_8 = 0;
					for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					
			    	    deletedCount_tDBOutput_8 += countSum_tDBOutput_8;
			    	
			    	System.err.println(errormessage_tDBOutput_8);
			    	
				}
            }
                	conn_tDBOutput_8.commit();
                	
                	commitCounter_tDBOutput_8=0;
                }

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_6 = new StringBuilder();




   				
	    		if(row13.vtmid != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.vtmid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.nm != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.vtmidprev != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.vtmidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.vtmiddt != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
								FormatterUtils.format_Date(row13.vtmiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row13.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row13.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_6);
                    }
                    consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
                    consoleOut_tLogRow_6.flush();
                    nb_line_tLogRow_6++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "dmd_vtm_del_row"




// Start of branch "dmd_amp_drugroute_del"
if(dmd_amp_drugroute_del != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp_drugroute_del");
					}
					



            row16 = null;
        whetherReject_tDBOutput_11 = false;
					
                    if(dmd_amp_drugroute_del.apid == null) {
pstmt_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(1, dmd_amp_drugroute_del.apid);
}

    		pstmt_tDBOutput_11.addBatch();
			nb_line_tDBOutput_11++;
			  
    		  
    		  batchSizeCounter_tDBOutput_11++;
    		
            if(!whetherReject_tDBOutput_11) {
                            row16 = new row16Struct();
                                row16.apid = dmd_amp_drugroute_del.apid;
                                row16.routecd = dmd_amp_drugroute_del.routecd;
                                row16.col_val_hash = dmd_amp_drugroute_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_11 > 0) && (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
                try {
						int countSum_tDBOutput_11 = 0;
						    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
				    	
				    	    deletedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
            	    	batchSizeCounter_tDBOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_11){
				    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
				    	String errormessage_tDBOutput_11;
						if (ne_tDBOutput_11 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
							errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
						}else{
							errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
						}
				    	
				    	int countSum_tDBOutput_11 = 0;
						for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
						
				    	    deletedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
				    	System.err.println(errormessage_tDBOutput_11);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_11++;
                if(commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {
                if ((batchSize_tDBOutput_11 > 0) && (batchSizeCounter_tDBOutput_11 > 0)) {
                try {
                		int countSum_tDBOutput_11 = 0;
                		    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
            	    	
            	    	    deletedCount_tDBOutput_11 += countSum_tDBOutput_11;
            	    	
                batchSizeCounter_tDBOutput_11 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_11){
			    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
			    	String errormessage_tDBOutput_11;
					if (ne_tDBOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
						errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
					}else{
						errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
					}
			    	
			    	int countSum_tDBOutput_11 = 0;
					for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					
			    	    deletedCount_tDBOutput_11 += countSum_tDBOutput_11;
			    	
			    	System.err.println(errormessage_tDBOutput_11);
			    	
				}
            }
                	conn_tDBOutput_11.commit();
                	
                	commitCounter_tDBOutput_11=0;
                }

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tLogRow_7 main ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_7 = new StringBuilder();




   				
	    		if(row16.apid != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row16.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row16.routecd != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row16.routecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row16.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row16.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_7 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_7);
                    }
                    consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
                    consoleOut_tLogRow_7.flush();
                    nb_line_tLogRow_7++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_7++;

/**
 * [tLogRow_7 main ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "dmd_amp_drugroute_del"




// Start of branch "dmd_amp_excipient_del"
if(dmd_amp_excipient_del != null) { 



	
	/**
	 * [tDBOutput_12 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp_excipient_del");
					}
					



            row17 = null;
        whetherReject_tDBOutput_12 = false;
					
                    if(dmd_amp_excipient_del.apid == null) {
pstmt_tDBOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(1, dmd_amp_excipient_del.apid);
}

    		pstmt_tDBOutput_12.addBatch();
			nb_line_tDBOutput_12++;
			  
    		  
    		  batchSizeCounter_tDBOutput_12++;
    		
            if(!whetherReject_tDBOutput_12) {
                            row17 = new row17Struct();
                                row17.apid = dmd_amp_excipient_del.apid;
                                row17.isid = dmd_amp_excipient_del.isid;
                                row17.strnth = dmd_amp_excipient_del.strnth;
                                row17.strnth_uomcd = dmd_amp_excipient_del.strnth_uomcd;
                                row17.col_val_hash = dmd_amp_excipient_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_12 > 0) && (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12)) {
                try {
						int countSum_tDBOutput_12 = 0;
						    
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
				    	
				    	    deletedCount_tDBOutput_12 += countSum_tDBOutput_12;
				    	
            	    	batchSizeCounter_tDBOutput_12 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_12){
				    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
				    	String errormessage_tDBOutput_12;
						if (ne_tDBOutput_12 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
							errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
						}else{
							errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
						}
				    	
				    	int countSum_tDBOutput_12 = 0;
						for(int countEach_tDBOutput_12: e_tDBOutput_12.getUpdateCounts()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
						
				    	    deletedCount_tDBOutput_12 += countSum_tDBOutput_12;
				    	
				    	System.err.println(errormessage_tDBOutput_12);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_12++;
                if(commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {
                if ((batchSize_tDBOutput_12 > 0) && (batchSizeCounter_tDBOutput_12 > 0)) {
                try {
                		int countSum_tDBOutput_12 = 0;
                		    
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
            	    	
            	    	    deletedCount_tDBOutput_12 += countSum_tDBOutput_12;
            	    	
                batchSizeCounter_tDBOutput_12 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_12){
			    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
			    	String errormessage_tDBOutput_12;
					if (ne_tDBOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
						errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
					}else{
						errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
					}
			    	
			    	int countSum_tDBOutput_12 = 0;
					for(int countEach_tDBOutput_12: e_tDBOutput_12.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
					
			    	    deletedCount_tDBOutput_12 += countSum_tDBOutput_12;
			    	
			    	System.err.println(errormessage_tDBOutput_12);
			    	
				}
            }
                	conn_tDBOutput_12.commit();
                	
                	commitCounter_tDBOutput_12=0;
                }

 


	tos_count_tDBOutput_12++;

/**
 * [tDBOutput_12 main ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tLogRow_8 main ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_8 = new StringBuilder();




   				
	    		if(row17.apid != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row17.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append("|");
    			


   				
	    		if(row17.isid != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row17.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append("|");
    			


   				
	    		if(row17.strnth != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
								row17.strnth.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append("|");
    			


   				
	    		if(row17.strnth_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row17.strnth_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append("|");
    			


   				
	    		if(row17.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row17.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_8);
                    }
                    consoleOut_tLogRow_8.println(strBuffer_tLogRow_8.toString());
                    consoleOut_tLogRow_8.flush();
                    nb_line_tLogRow_8++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_8++;

/**
 * [tLogRow_8 main ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tDBOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_end ] stop
 */

} // End of branch "dmd_amp_excipient_del"




// Start of branch "dmd_vmp_controldrug_del"
if(dmd_vmp_controldrug_del != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_controldrug_del");
					}
					



            row18 = null;
        whetherReject_tDBOutput_13 = false;
					
                    if(dmd_vmp_controldrug_del.vpid == null) {
pstmt_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(1, dmd_vmp_controldrug_del.vpid);
}

    		pstmt_tDBOutput_13.addBatch();
			nb_line_tDBOutput_13++;
			  
    		  
    		  batchSizeCounter_tDBOutput_13++;
    		
            if(!whetherReject_tDBOutput_13) {
                            row18 = new row18Struct();
                                row18.vpid = dmd_vmp_controldrug_del.vpid;
                                row18.catcd = dmd_vmp_controldrug_del.catcd;
                                row18.catdt = dmd_vmp_controldrug_del.catdt;
                                row18.cat_prevcd = dmd_vmp_controldrug_del.cat_prevcd;
                                row18.col_val_hash = dmd_vmp_controldrug_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_13 > 0) && (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
                try {
						int countSum_tDBOutput_13 = 0;
						    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
				    	
				    	    deletedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
            	    	batchSizeCounter_tDBOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_13){
				    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
				    	String errormessage_tDBOutput_13;
						if (ne_tDBOutput_13 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
							errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
						}else{
							errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
						}
				    	
				    	int countSum_tDBOutput_13 = 0;
						for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
						
				    	    deletedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
				    	System.err.println(errormessage_tDBOutput_13);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_13++;
                if(commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {
                if ((batchSize_tDBOutput_13 > 0) && (batchSizeCounter_tDBOutput_13 > 0)) {
                try {
                		int countSum_tDBOutput_13 = 0;
                		    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
            	    	
            	    	    deletedCount_tDBOutput_13 += countSum_tDBOutput_13;
            	    	
                batchSizeCounter_tDBOutput_13 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_13){
			    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
			    	String errormessage_tDBOutput_13;
					if (ne_tDBOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
						errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
					}else{
						errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
					}
			    	
			    	int countSum_tDBOutput_13 = 0;
					for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
					
			    	    deletedCount_tDBOutput_13 += countSum_tDBOutput_13;
			    	
			    	System.err.println(errormessage_tDBOutput_13);
			    	
				}
            }
                	conn_tDBOutput_13.commit();
                	
                	commitCounter_tDBOutput_13=0;
                }

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_9 = new StringBuilder();




   				
	    		if(row18.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row18.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row18.catcd != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row18.catcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row18.catdt != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
								FormatterUtils.format_Date(row18.catdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row18.cat_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row18.cat_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row18.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row18.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_9);
                    }
                    consoleOut_tLogRow_9.println(strBuffer_tLogRow_9.toString());
                    consoleOut_tLogRow_9.flush();
                    nb_line_tLogRow_9++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "dmd_vmp_controldrug_del"




// Start of branch "dmd_vmp_drugform_del"
if(dmd_vmp_drugform_del != null) { 



	
	/**
	 * [tDBOutput_14 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_drugform_del");
					}
					



            row19 = null;
        whetherReject_tDBOutput_14 = false;
					
                    if(dmd_vmp_drugform_del.vpid == null) {
pstmt_tDBOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(1, dmd_vmp_drugform_del.vpid);
}

    		pstmt_tDBOutput_14.addBatch();
			nb_line_tDBOutput_14++;
			  
    		  
    		  batchSizeCounter_tDBOutput_14++;
    		
            if(!whetherReject_tDBOutput_14) {
                            row19 = new row19Struct();
                                row19.vpid = dmd_vmp_drugform_del.vpid;
                                row19.formcd = dmd_vmp_drugform_del.formcd;
                                row19.col_val_hash = dmd_vmp_drugform_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_14 > 0) && (batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14)) {
                try {
						int countSum_tDBOutput_14 = 0;
						    
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
				    	
				    	    deletedCount_tDBOutput_14 += countSum_tDBOutput_14;
				    	
            	    	batchSizeCounter_tDBOutput_14 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_14){
				    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
				    	String errormessage_tDBOutput_14;
						if (ne_tDBOutput_14 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
							errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
						}else{
							errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
						}
				    	
				    	int countSum_tDBOutput_14 = 0;
						for(int countEach_tDBOutput_14: e_tDBOutput_14.getUpdateCounts()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
						
				    	    deletedCount_tDBOutput_14 += countSum_tDBOutput_14;
				    	
				    	System.err.println(errormessage_tDBOutput_14);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_14++;
                if(commitEvery_tDBOutput_14 <= commitCounter_tDBOutput_14) {
                if ((batchSize_tDBOutput_14 > 0) && (batchSizeCounter_tDBOutput_14 > 0)) {
                try {
                		int countSum_tDBOutput_14 = 0;
                		    
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
            	    	
            	    	    deletedCount_tDBOutput_14 += countSum_tDBOutput_14;
            	    	
                batchSizeCounter_tDBOutput_14 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_14){
			    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
			    	String errormessage_tDBOutput_14;
					if (ne_tDBOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
						errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
					}else{
						errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
					}
			    	
			    	int countSum_tDBOutput_14 = 0;
					for(int countEach_tDBOutput_14: e_tDBOutput_14.getUpdateCounts()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
					
			    	    deletedCount_tDBOutput_14 += countSum_tDBOutput_14;
			    	
			    	System.err.println(errormessage_tDBOutput_14);
			    	
				}
            }
                	conn_tDBOutput_14.commit();
                	
                	commitCounter_tDBOutput_14=0;
                }

 


	tos_count_tDBOutput_14++;

/**
 * [tDBOutput_14 main ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_10 = new StringBuilder();




   				
	    		if(row19.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row19.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row19.formcd != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row19.formcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row19.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row19.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
                    }
                    consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
                    consoleOut_tLogRow_10.flush();
                    nb_line_tLogRow_10++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tDBOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_end ] stop
 */

} // End of branch "dmd_vmp_drugform_del"




// Start of branch "dmd_vmp_drugroute_del"
if(dmd_vmp_drugroute_del != null) { 



	
	/**
	 * [tDBOutput_15 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_drugroute_del");
					}
					



            row20 = null;
        whetherReject_tDBOutput_15 = false;
					
                    if(dmd_vmp_drugroute_del.vpid == null) {
pstmt_tDBOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(1, dmd_vmp_drugroute_del.vpid);
}

    		pstmt_tDBOutput_15.addBatch();
			nb_line_tDBOutput_15++;
			  
    		  
    		  batchSizeCounter_tDBOutput_15++;
    		
            if(!whetherReject_tDBOutput_15) {
                            row20 = new row20Struct();
                                row20.vpid = dmd_vmp_drugroute_del.vpid;
                                row20.routecd = dmd_vmp_drugroute_del.routecd;
                                row20.col_val_hash = dmd_vmp_drugroute_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_15 > 0) && (batchSize_tDBOutput_15 <= batchSizeCounter_tDBOutput_15)) {
                try {
						int countSum_tDBOutput_15 = 0;
						    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
				    	
				    	    deletedCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
            	    	batchSizeCounter_tDBOutput_15 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_15){
				    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
				    	String errormessage_tDBOutput_15;
						if (ne_tDBOutput_15 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
							errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
						}else{
							errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
						}
				    	
				    	int countSum_tDBOutput_15 = 0;
						for(int countEach_tDBOutput_15: e_tDBOutput_15.getUpdateCounts()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
						
				    	    deletedCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
				    	System.err.println(errormessage_tDBOutput_15);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_15++;
                if(commitEvery_tDBOutput_15 <= commitCounter_tDBOutput_15) {
                if ((batchSize_tDBOutput_15 > 0) && (batchSizeCounter_tDBOutput_15 > 0)) {
                try {
                		int countSum_tDBOutput_15 = 0;
                		    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
            	    	
            	    	    deletedCount_tDBOutput_15 += countSum_tDBOutput_15;
            	    	
                batchSizeCounter_tDBOutput_15 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_15){
			    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
			    	String errormessage_tDBOutput_15;
					if (ne_tDBOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
						errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
					}else{
						errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
					}
			    	
			    	int countSum_tDBOutput_15 = 0;
					for(int countEach_tDBOutput_15: e_tDBOutput_15.getUpdateCounts()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}
					
			    	    deletedCount_tDBOutput_15 += countSum_tDBOutput_15;
			    	
			    	System.err.println(errormessage_tDBOutput_15);
			    	
				}
            }
                	conn_tDBOutput_15.commit();
                	
                	commitCounter_tDBOutput_15=0;
                }

 


	tos_count_tDBOutput_15++;

/**
 * [tDBOutput_15 main ] stop
 */
	
	/**
	 * [tDBOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tLogRow_11 main ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_11 = new StringBuilder();




   				
	    		if(row20.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row20.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_11.append("|");
    			


   				
	    		if(row20.routecd != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row20.routecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_11.append("|");
    			


   				
	    		if(row20.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row20.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_11);
                    }
                    consoleOut_tLogRow_11.println(strBuffer_tLogRow_11.toString());
                    consoleOut_tLogRow_11.flush();
                    nb_line_tLogRow_11++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_11++;

/**
 * [tLogRow_11 main ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tDBOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_end ] stop
 */

} // End of branch "dmd_vmp_drugroute_del"




// Start of branch "dmd_vmp_ingredient_del"
if(dmd_vmp_ingredient_del != null) { 



	
	/**
	 * [tDBOutput_16 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_ingredient_del");
					}
					



            row21 = null;
        whetherReject_tDBOutput_16 = false;
					
                    if(dmd_vmp_ingredient_del.vpid == null) {
pstmt_tDBOutput_16.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(1, dmd_vmp_ingredient_del.vpid);
}

    		pstmt_tDBOutput_16.addBatch();
			nb_line_tDBOutput_16++;
			  
    		  
    		  batchSizeCounter_tDBOutput_16++;
    		
            if(!whetherReject_tDBOutput_16) {
                            row21 = new row21Struct();
                                row21.vpid = dmd_vmp_ingredient_del.vpid;
                                row21.isid = dmd_vmp_ingredient_del.isid;
                                row21.basis_strntcd = dmd_vmp_ingredient_del.basis_strntcd;
                                row21.bs_subid = dmd_vmp_ingredient_del.bs_subid;
                                row21.strnt_nmrtr_val = dmd_vmp_ingredient_del.strnt_nmrtr_val;
                                row21.strnt_nmrtr_uomcd = dmd_vmp_ingredient_del.strnt_nmrtr_uomcd;
                                row21.strnt_dnmtr_val = dmd_vmp_ingredient_del.strnt_dnmtr_val;
                                row21.strnt_dnmtr_uomcd = dmd_vmp_ingredient_del.strnt_dnmtr_uomcd;
                                row21.col_val_hash = dmd_vmp_ingredient_del.col_val_hash;
            }
    			if ((batchSize_tDBOutput_16 > 0) && (batchSize_tDBOutput_16 <= batchSizeCounter_tDBOutput_16)) {
                try {
						int countSum_tDBOutput_16 = 0;
						    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
				    	
				    	    deletedCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
            	    	batchSizeCounter_tDBOutput_16 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_16){
				    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
				    	String errormessage_tDBOutput_16;
						if (ne_tDBOutput_16 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
							errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
						}else{
							errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
						}
				    	
				    	int countSum_tDBOutput_16 = 0;
						for(int countEach_tDBOutput_16: e_tDBOutput_16.getUpdateCounts()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
						
				    	    deletedCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
				    	System.err.println(errormessage_tDBOutput_16);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_16++;
                if(commitEvery_tDBOutput_16 <= commitCounter_tDBOutput_16) {
                if ((batchSize_tDBOutput_16 > 0) && (batchSizeCounter_tDBOutput_16 > 0)) {
                try {
                		int countSum_tDBOutput_16 = 0;
                		    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
            	    	
            	    	    deletedCount_tDBOutput_16 += countSum_tDBOutput_16;
            	    	
                batchSizeCounter_tDBOutput_16 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_16){
			    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
			    	String errormessage_tDBOutput_16;
					if (ne_tDBOutput_16 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
						errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
					}else{
						errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
					}
			    	
			    	int countSum_tDBOutput_16 = 0;
					for(int countEach_tDBOutput_16: e_tDBOutput_16.getUpdateCounts()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}
					
			    	    deletedCount_tDBOutput_16 += countSum_tDBOutput_16;
			    	
			    	System.err.println(errormessage_tDBOutput_16);
			    	
				}
            }
                	conn_tDBOutput_16.commit();
                	
                	commitCounter_tDBOutput_16=0;
                }

 


	tos_count_tDBOutput_16++;

/**
 * [tDBOutput_16 main ] stop
 */
	
	/**
	 * [tDBOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tLogRow_12 main ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_12 = new StringBuilder();




   				
	    		if(row21.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.isid != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.basis_strntcd != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.basis_strntcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.bs_subid != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.bs_subid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.strnt_nmrtr_val != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
								row21.strnt_nmrtr_val.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.strnt_nmrtr_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.strnt_nmrtr_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.strnt_dnmtr_val != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
								row21.strnt_dnmtr_val.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.strnt_dnmtr_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.strnt_dnmtr_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row21.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row21.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_12);
                    }
                    consoleOut_tLogRow_12.println(strBuffer_tLogRow_12.toString());
                    consoleOut_tLogRow_12.flush();
                    nb_line_tLogRow_12++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_12++;

/**
 * [tLogRow_12 main ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tDBOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_end ] stop
 */

} // End of branch "dmd_vmp_ingredient_del"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    	    deletedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp_delete");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */







	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			
	    	    deletedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			
			conn_tDBOutput_6.commit();
			
		
    	conn_tDBOutput_6 .close();
    	
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */







	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    	int countSum_tDBOutput_8 = 0;
			for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
				countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
			}
			
	    	    deletedCount_tDBOutput_8 += countSum_tDBOutput_8;
	    	
	    	System.err.println(errormessage_tDBOutput_8);
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);
			
			conn_tDBOutput_8.commit();
			
		
    	conn_tDBOutput_8 .close();
    	
    	resourceMap.put("finish_tDBOutput_8", true);
    	

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vtm_del_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	


//////
//////
globalMap.put("tLogRow_6_NB_LINE",nb_line_tLogRow_6);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */







	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



	    try {
				int countSum_tDBOutput_11 = 0;
				if (pstmt_tDBOutput_11 != null && batchSizeCounter_tDBOutput_11 > 0) {
						
					for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_11 += countSum_tDBOutput_11;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_11){
	    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
	    	String errormessage_tDBOutput_11;
			if (ne_tDBOutput_11 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
				errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
			}else{
				errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
			}
	    	
	    	int countSum_tDBOutput_11 = 0;
			for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
				countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
			}
			
	    	    deletedCount_tDBOutput_11 += countSum_tDBOutput_11;
	    	
	    	System.err.println(errormessage_tDBOutput_11);
	    	
		}
	    
        if(pstmt_tDBOutput_11 != null) {
        		
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);
			
			conn_tDBOutput_11.commit();
			
		
    	conn_tDBOutput_11 .close();
    	
    	resourceMap.put("finish_tDBOutput_11", true);
    	

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp_drugroute_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */

	
	/**
	 * [tLogRow_7 end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	


//////
//////
globalMap.put("tLogRow_7_NB_LINE",nb_line_tLogRow_7);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tLogRow_7", true);
end_Hash.put("tLogRow_7", System.currentTimeMillis());




/**
 * [tLogRow_7 end ] stop
 */







	
	/**
	 * [tDBOutput_12 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



	    try {
				int countSum_tDBOutput_12 = 0;
				if (pstmt_tDBOutput_12 != null && batchSizeCounter_tDBOutput_12 > 0) {
						
					for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_12 += countSum_tDBOutput_12;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_12){
	    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
	    	String errormessage_tDBOutput_12;
			if (ne_tDBOutput_12 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
				errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
			}else{
				errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
			}
	    	
	    	int countSum_tDBOutput_12 = 0;
			for(int countEach_tDBOutput_12: e_tDBOutput_12.getUpdateCounts()) {
				countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
			}
			
	    	    deletedCount_tDBOutput_12 += countSum_tDBOutput_12;
	    	
	    	System.err.println(errormessage_tDBOutput_12);
	    	
		}
	    
        if(pstmt_tDBOutput_12 != null) {
        		
            pstmt_tDBOutput_12.close();
            resourceMap.remove("pstmt_tDBOutput_12");
        }
    resourceMap.put("statementClosed_tDBOutput_12", true);
			
			conn_tDBOutput_12.commit();
			
		
    	conn_tDBOutput_12 .close();
    	
    	resourceMap.put("finish_tDBOutput_12", true);
    	

	nb_line_deleted_tDBOutput_12=nb_line_deleted_tDBOutput_12+ deletedCount_tDBOutput_12;
	nb_line_update_tDBOutput_12=nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
	nb_line_inserted_tDBOutput_12=nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
	nb_line_rejected_tDBOutput_12=nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;
	
        globalMap.put("tDBOutput_12_NB_LINE",nb_line_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_UPDATED",nb_line_update_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_DELETED",nb_line_deleted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp_excipient_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_12", true);
end_Hash.put("tDBOutput_12", System.currentTimeMillis());




/**
 * [tDBOutput_12 end ] stop
 */

	
	/**
	 * [tLogRow_8 end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	


//////
//////
globalMap.put("tLogRow_8_NB_LINE",nb_line_tLogRow_8);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tLogRow_8", true);
end_Hash.put("tLogRow_8", System.currentTimeMillis());




/**
 * [tLogRow_8 end ] stop
 */







	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



	    try {
				int countSum_tDBOutput_13 = 0;
				if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {
						
					for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_13 += countSum_tDBOutput_13;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_13){
	    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
	    	String errormessage_tDBOutput_13;
			if (ne_tDBOutput_13 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
				errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
			}else{
				errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
			}
	    	
	    	int countSum_tDBOutput_13 = 0;
			for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
				countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
			}
			
	    	    deletedCount_tDBOutput_13 += countSum_tDBOutput_13;
	    	
	    	System.err.println(errormessage_tDBOutput_13);
	    	
		}
	    
        if(pstmt_tDBOutput_13 != null) {
        		
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);
			
			conn_tDBOutput_13.commit();
			
		
    	conn_tDBOutput_13 .close();
    	
    	resourceMap.put("finish_tDBOutput_13", true);
    	

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_controldrug_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());




/**
 * [tDBOutput_13 end ] stop
 */

	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	


//////
//////
globalMap.put("tLogRow_9_NB_LINE",nb_line_tLogRow_9);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */







	
	/**
	 * [tDBOutput_14 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



	    try {
				int countSum_tDBOutput_14 = 0;
				if (pstmt_tDBOutput_14 != null && batchSizeCounter_tDBOutput_14 > 0) {
						
					for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_14 += countSum_tDBOutput_14;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_14){
	    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
	    	String errormessage_tDBOutput_14;
			if (ne_tDBOutput_14 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
				errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
			}else{
				errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
			}
	    	
	    	int countSum_tDBOutput_14 = 0;
			for(int countEach_tDBOutput_14: e_tDBOutput_14.getUpdateCounts()) {
				countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
			}
			
	    	    deletedCount_tDBOutput_14 += countSum_tDBOutput_14;
	    	
	    	System.err.println(errormessage_tDBOutput_14);
	    	
		}
	    
        if(pstmt_tDBOutput_14 != null) {
        		
            pstmt_tDBOutput_14.close();
            resourceMap.remove("pstmt_tDBOutput_14");
        }
    resourceMap.put("statementClosed_tDBOutput_14", true);
			
			conn_tDBOutput_14.commit();
			
		
    	conn_tDBOutput_14 .close();
    	
    	resourceMap.put("finish_tDBOutput_14", true);
    	

	nb_line_deleted_tDBOutput_14=nb_line_deleted_tDBOutput_14+ deletedCount_tDBOutput_14;
	nb_line_update_tDBOutput_14=nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
	nb_line_inserted_tDBOutput_14=nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
	nb_line_rejected_tDBOutput_14=nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;
	
        globalMap.put("tDBOutput_14_NB_LINE",nb_line_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_UPDATED",nb_line_update_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_DELETED",nb_line_deleted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_drugform_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_14", true);
end_Hash.put("tDBOutput_14", System.currentTimeMillis());




/**
 * [tDBOutput_14 end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	


//////
//////
globalMap.put("tLogRow_10_NB_LINE",nb_line_tLogRow_10);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */







	
	/**
	 * [tDBOutput_15 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



	    try {
				int countSum_tDBOutput_15 = 0;
				if (pstmt_tDBOutput_15 != null && batchSizeCounter_tDBOutput_15 > 0) {
						
					for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_15 += countSum_tDBOutput_15;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_15){
	    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
	    	String errormessage_tDBOutput_15;
			if (ne_tDBOutput_15 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
				errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
			}else{
				errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
			}
	    	
	    	int countSum_tDBOutput_15 = 0;
			for(int countEach_tDBOutput_15: e_tDBOutput_15.getUpdateCounts()) {
				countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
			}
			
	    	    deletedCount_tDBOutput_15 += countSum_tDBOutput_15;
	    	
	    	System.err.println(errormessage_tDBOutput_15);
	    	
		}
	    
        if(pstmt_tDBOutput_15 != null) {
        		
            pstmt_tDBOutput_15.close();
            resourceMap.remove("pstmt_tDBOutput_15");
        }
    resourceMap.put("statementClosed_tDBOutput_15", true);
			
			conn_tDBOutput_15.commit();
			
		
    	conn_tDBOutput_15 .close();
    	
    	resourceMap.put("finish_tDBOutput_15", true);
    	

	nb_line_deleted_tDBOutput_15=nb_line_deleted_tDBOutput_15+ deletedCount_tDBOutput_15;
	nb_line_update_tDBOutput_15=nb_line_update_tDBOutput_15 + updatedCount_tDBOutput_15;
	nb_line_inserted_tDBOutput_15=nb_line_inserted_tDBOutput_15 + insertedCount_tDBOutput_15;
	nb_line_rejected_tDBOutput_15=nb_line_rejected_tDBOutput_15 + rejectedCount_tDBOutput_15;
	
        globalMap.put("tDBOutput_15_NB_LINE",nb_line_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_UPDATED",nb_line_update_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_DELETED",nb_line_deleted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_15);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_drugroute_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_15", true);
end_Hash.put("tDBOutput_15", System.currentTimeMillis());




/**
 * [tDBOutput_15 end ] stop
 */

	
	/**
	 * [tLogRow_11 end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	


//////
//////
globalMap.put("tLogRow_11_NB_LINE",nb_line_tLogRow_11);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tLogRow_11", true);
end_Hash.put("tLogRow_11", System.currentTimeMillis());




/**
 * [tLogRow_11 end ] stop
 */







	
	/**
	 * [tDBOutput_16 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



	    try {
				int countSum_tDBOutput_16 = 0;
				if (pstmt_tDBOutput_16 != null && batchSizeCounter_tDBOutput_16 > 0) {
						
					for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}
						
				}
		    	
		    	    deletedCount_tDBOutput_16 += countSum_tDBOutput_16;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_16){
	    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
	    	String errormessage_tDBOutput_16;
			if (ne_tDBOutput_16 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
				errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
			}else{
				errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
			}
	    	
	    	int countSum_tDBOutput_16 = 0;
			for(int countEach_tDBOutput_16: e_tDBOutput_16.getUpdateCounts()) {
				countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
			}
			
	    	    deletedCount_tDBOutput_16 += countSum_tDBOutput_16;
	    	
	    	System.err.println(errormessage_tDBOutput_16);
	    	
		}
	    
        if(pstmt_tDBOutput_16 != null) {
        		
            pstmt_tDBOutput_16.close();
            resourceMap.remove("pstmt_tDBOutput_16");
        }
    resourceMap.put("statementClosed_tDBOutput_16", true);
			
			conn_tDBOutput_16.commit();
			
		
    	conn_tDBOutput_16 .close();
    	
    	resourceMap.put("finish_tDBOutput_16", true);
    	

	nb_line_deleted_tDBOutput_16=nb_line_deleted_tDBOutput_16+ deletedCount_tDBOutput_16;
	nb_line_update_tDBOutput_16=nb_line_update_tDBOutput_16 + updatedCount_tDBOutput_16;
	nb_line_inserted_tDBOutput_16=nb_line_inserted_tDBOutput_16 + insertedCount_tDBOutput_16;
	nb_line_rejected_tDBOutput_16=nb_line_rejected_tDBOutput_16 + rejectedCount_tDBOutput_16;
	
        globalMap.put("tDBOutput_16_NB_LINE",nb_line_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_UPDATED",nb_line_update_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_DELETED",nb_line_deleted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_16);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_ingredient_del");
			  	}
			  	
 

ok_Hash.put("tDBOutput_16", true);
end_Hash.put("tDBOutput_16", System.currentTimeMillis());




/**
 * [tDBOutput_16 end ] stop
 */

	
	/**
	 * [tLogRow_12 end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	


//////
//////
globalMap.put("tLogRow_12_NB_LINE",nb_line_tLogRow_12);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tLogRow_12", true);
end_Hash.put("tLogRow_12", System.currentTimeMillis());




/**
 * [tLogRow_12 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */







	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */







	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_8") == null){
            java.sql.Connection ctn_tDBOutput_8 = null;
            if((ctn_tDBOutput_8 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_8")) != null){
                try {
                    ctn_tDBOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_8) {
                    String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :" + sqlEx_tDBOutput_8.getMessage();
                    System.err.println(errorMessage_tDBOutput_8);
                }
            }
        }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */







	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_11") == null){
            java.sql.Connection ctn_tDBOutput_11 = null;
            if((ctn_tDBOutput_11 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_11")) != null){
                try {
                    ctn_tDBOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_11) {
                    String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :" + sqlEx_tDBOutput_11.getMessage();
                    System.err.println(errorMessage_tDBOutput_11);
                }
            }
        }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */

	
	/**
	 * [tLogRow_7 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 finally ] stop
 */







	
	/**
	 * [tDBOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
                if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_12")) != null) {
                    pstmtToClose_tDBOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_12") == null){
            java.sql.Connection ctn_tDBOutput_12 = null;
            if((ctn_tDBOutput_12 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_12")) != null){
                try {
                    ctn_tDBOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_12) {
                    String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :" + sqlEx_tDBOutput_12.getMessage();
                    System.err.println(errorMessage_tDBOutput_12);
                }
            }
        }
    }
 



/**
 * [tDBOutput_12 finally ] stop
 */

	
	/**
	 * [tLogRow_8 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 finally ] stop
 */







	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_13") == null){
            java.sql.Connection ctn_tDBOutput_13 = null;
            if((ctn_tDBOutput_13 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_13")) != null){
                try {
                    ctn_tDBOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_13) {
                    String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :" + sqlEx_tDBOutput_13.getMessage();
                    System.err.println(errorMessage_tDBOutput_13);
                }
            }
        }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */

	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */







	
	/**
	 * [tDBOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
                if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_14")) != null) {
                    pstmtToClose_tDBOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_14") == null){
            java.sql.Connection ctn_tDBOutput_14 = null;
            if((ctn_tDBOutput_14 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_14")) != null){
                try {
                    ctn_tDBOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_14) {
                    String errorMessage_tDBOutput_14 = "failed to close the connection in tDBOutput_14 :" + sqlEx_tDBOutput_14.getMessage();
                    System.err.println(errorMessage_tDBOutput_14);
                }
            }
        }
    }
 



/**
 * [tDBOutput_14 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */







	
	/**
	 * [tDBOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
                if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_15")) != null) {
                    pstmtToClose_tDBOutput_15.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_15") == null){
            java.sql.Connection ctn_tDBOutput_15 = null;
            if((ctn_tDBOutput_15 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_15")) != null){
                try {
                    ctn_tDBOutput_15.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_15) {
                    String errorMessage_tDBOutput_15 = "failed to close the connection in tDBOutput_15 :" + sqlEx_tDBOutput_15.getMessage();
                    System.err.println(errorMessage_tDBOutput_15);
                }
            }
        }
    }
 



/**
 * [tDBOutput_15 finally ] stop
 */

	
	/**
	 * [tLogRow_11 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 finally ] stop
 */







	
	/**
	 * [tDBOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_16 = null;
                if ((pstmtToClose_tDBOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_16")) != null) {
                    pstmtToClose_tDBOutput_16.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_16") == null){
            java.sql.Connection ctn_tDBOutput_16 = null;
            if((ctn_tDBOutput_16 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_16")) != null){
                try {
                    ctn_tDBOutput_16.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_16) {
                    String errorMessage_tDBOutput_16 = "failed to close the connection in tDBOutput_16 :" + sqlEx_tDBOutput_16.getMessage();
                    System.err.println(errorMessage_tDBOutput_16);
                }
            }
        }
    }
 



/**
 * [tDBOutput_16 finally ] stop
 */

	
	/**
	 * [tLogRow_12 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_availrestrict_insStruct implements routines.system.IPersistableRow<lkp_availrestrict_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_availrestrict_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();
lkp_availrestrict_insStruct lkp_availrestrict_ins = new lkp_availrestrict_insStruct();





	
	/**
	 * [tDBOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_23", false);
		start_Hash.put("tDBOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_availrestrict_ins");
					}
				
		int tos_count_tDBOutput_23 = 0;
		





String dbschema_tDBOutput_23 = null;
	dbschema_tDBOutput_23 = context.dmd_db_schema;
	

String tableName_tDBOutput_23 = null;
if(dbschema_tDBOutput_23 == null || dbschema_tDBOutput_23.trim().length() == 0) {
	tableName_tDBOutput_23 = ("dmd_lookup_availrestrict");
} else {
	tableName_tDBOutput_23 = dbschema_tDBOutput_23 + "\".\"" + ("dmd_lookup_availrestrict");
}

int nb_line_tDBOutput_23 = 0;
int nb_line_update_tDBOutput_23 = 0;
int nb_line_inserted_tDBOutput_23 = 0;
int nb_line_deleted_tDBOutput_23 = 0;
int nb_line_rejected_tDBOutput_23 = 0;

int deletedCount_tDBOutput_23=0;
int updatedCount_tDBOutput_23=0;
int insertedCount_tDBOutput_23=0;
int rejectedCount_tDBOutput_23=0;

boolean whetherReject_tDBOutput_23 = false;

java.sql.Connection conn_tDBOutput_23 = null;
String dbUser_tDBOutput_23 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_23 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_23 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_23 = context.dmd_db_password; 

    String dbPwd_tDBOutput_23 = decryptedPassword_tDBOutput_23;

    conn_tDBOutput_23 = java.sql.DriverManager.getConnection(url_tDBOutput_23,dbUser_tDBOutput_23,dbPwd_tDBOutput_23);
	
	resourceMap.put("conn_tDBOutput_23", conn_tDBOutput_23);
        conn_tDBOutput_23.setAutoCommit(false);
        int commitEvery_tDBOutput_23 = 10000;
        int commitCounter_tDBOutput_23 = 0;


   int batchSize_tDBOutput_23 = 10000;
   int batchSizeCounter_tDBOutput_23=0;

int count_tDBOutput_23=0;
            int rsTruncCountNumber_tDBOutput_23 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_23 = conn_tDBOutput_23.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_23 = stmtTruncCount_tDBOutput_23.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_23 + "\"")) {
                    if(rsTruncCount_tDBOutput_23.next()) {
                        rsTruncCountNumber_tDBOutput_23 = rsTruncCount_tDBOutput_23.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_23 = conn_tDBOutput_23.createStatement()) {
                stmtTrunc_tDBOutput_23.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_23 + "\"");
                deletedCount_tDBOutput_23 += rsTruncCountNumber_tDBOutput_23;
            }
	    String insert_tDBOutput_23 = "INSERT INTO \"" + tableName_tDBOutput_23 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_23 = conn_tDBOutput_23.prepareStatement(insert_tDBOutput_23);
	    resourceMap.put("pstmt_tDBOutput_23", pstmt_tDBOutput_23);
	    

 



/**
 * [tDBOutput_23 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_availrestrict_insStruct lkp_availrestrict_ins_tmp = new lkp_availrestrict_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_16 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
				String url_tDBInput_16 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
				conn_tDBInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_availrestrict\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_availrestrict\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_availrestrict\"";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								row37.cd = null;
							} else {
		                          
            row37.cd = rs_tDBInput_16.getLong(1);
            if(rs_tDBInput_16.wasNull()){
                    row37.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 2) {
								row37.desc = null;
							} else {
	                         		
        	row37.desc = routines.system.JDBCUtil.getString(rs_tDBInput_16, 2, false);
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

lkp_availrestrict_ins = null;


// # Output table : 'lkp_availrestrict_ins'
lkp_availrestrict_ins_tmp.cd = row37.cd;
lkp_availrestrict_ins_tmp.desc = row37.desc;
lkp_availrestrict_ins = lkp_availrestrict_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "lkp_availrestrict_ins"
if(lkp_availrestrict_ins != null) { 



	
	/**
	 * [tDBOutput_23 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_availrestrict_ins");
					}
					



        whetherReject_tDBOutput_23 = false;
                    if(lkp_availrestrict_ins.cd == null) {
pstmt_tDBOutput_23.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_23.setLong(1, lkp_availrestrict_ins.cd);
}

                    if(lkp_availrestrict_ins.desc == null) {
pstmt_tDBOutput_23.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_23.setString(2, lkp_availrestrict_ins.desc);
}

			
    		pstmt_tDBOutput_23.addBatch();
    		nb_line_tDBOutput_23++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_23++;
    		  
    			if ((batchSize_tDBOutput_23 > 0) && (batchSize_tDBOutput_23 <= batchSizeCounter_tDBOutput_23)) {
                try {
						int countSum_tDBOutput_23 = 0;
						    
						for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}
				    	
				    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
				    	
            	    	batchSizeCounter_tDBOutput_23 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_23){
				    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
				    	String errormessage_tDBOutput_23;
						if (ne_tDBOutput_23 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
							errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
						}else{
							errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
						}
				    	
				    	int countSum_tDBOutput_23 = 0;
						for(int countEach_tDBOutput_23: e_tDBOutput_23.getUpdateCounts()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}
						
				    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
				    	
				    	System.err.println(errormessage_tDBOutput_23);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_23++;
                if(commitEvery_tDBOutput_23 <= commitCounter_tDBOutput_23) {
                if ((batchSize_tDBOutput_23 > 0) && (batchSizeCounter_tDBOutput_23 > 0)) {
                try {
                		int countSum_tDBOutput_23 = 0;
                		    
						for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}
            	    	
            	    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
            	    	
                batchSizeCounter_tDBOutput_23 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_23){
			    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
			    	String errormessage_tDBOutput_23;
					if (ne_tDBOutput_23 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
						errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
					}else{
						errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
					}
			    	
			    	int countSum_tDBOutput_23 = 0;
					for(int countEach_tDBOutput_23: e_tDBOutput_23.getUpdateCounts()) {
						countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
					}
					
			    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
			    	
			    	System.err.println(errormessage_tDBOutput_23);
			    	
				}
            }
                	conn_tDBOutput_23.commit();
                	
                	commitCounter_tDBOutput_23=0;
                }

 


	tos_count_tDBOutput_23++;

/**
 * [tDBOutput_23 main ] stop
 */
	
	/**
	 * [tDBOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	

 



/**
 * [tDBOutput_23 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	

 



/**
 * [tDBOutput_23 process_data_end ] stop
 */

} // End of branch "lkp_availrestrict_ins"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
	if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
		
			conn_tDBInput_16.commit();
			
		
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_23 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	



	    try {
				int countSum_tDBOutput_23 = 0;
				if (pstmt_tDBOutput_23 != null && batchSizeCounter_tDBOutput_23 > 0) {
						
					for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
						countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_23){
	    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
	    	String errormessage_tDBOutput_23;
			if (ne_tDBOutput_23 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
				errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
			}else{
				errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
			}
	    	
	    	int countSum_tDBOutput_23 = 0;
			for(int countEach_tDBOutput_23: e_tDBOutput_23.getUpdateCounts()) {
				countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
			}
			
	    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
	    	
	    	System.err.println(errormessage_tDBOutput_23);
	    	
		}
	    
        if(pstmt_tDBOutput_23 != null) {
        		
            pstmt_tDBOutput_23.close();
            resourceMap.remove("pstmt_tDBOutput_23");
        }
    resourceMap.put("statementClosed_tDBOutput_23", true);
			
			conn_tDBOutput_23.commit();
			
		
    	conn_tDBOutput_23 .close();
    	
    	resourceMap.put("finish_tDBOutput_23", true);
    	

	nb_line_deleted_tDBOutput_23=nb_line_deleted_tDBOutput_23+ deletedCount_tDBOutput_23;
	nb_line_update_tDBOutput_23=nb_line_update_tDBOutput_23 + updatedCount_tDBOutput_23;
	nb_line_inserted_tDBOutput_23=nb_line_inserted_tDBOutput_23 + insertedCount_tDBOutput_23;
	nb_line_rejected_tDBOutput_23=nb_line_rejected_tDBOutput_23 + rejectedCount_tDBOutput_23;
	
        globalMap.put("tDBOutput_23_NB_LINE",nb_line_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_UPDATED",nb_line_update_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_DELETED",nb_line_deleted_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_23);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_availrestrict_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_23", true);
end_Hash.put("tDBOutput_23", System.currentTimeMillis());




/**
 * [tDBOutput_23 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_23") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_23 = null;
                if ((pstmtToClose_tDBOutput_23 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_23")) != null) {
                    pstmtToClose_tDBOutput_23.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_23") == null){
            java.sql.Connection ctn_tDBOutput_23 = null;
            if((ctn_tDBOutput_23 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_23")) != null){
                try {
                    ctn_tDBOutput_23.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_23) {
                    String errorMessage_tDBOutput_23 = "failed to close the connection in tDBOutput_23 :" + sqlEx_tDBOutput_23.getMessage();
                    System.err.println(errorMessage_tDBOutput_23);
                }
            }
        }
    }
 



/**
 * [tDBOutput_23 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class lbp_basisofname_insStruct implements routines.system.IPersistableRow<lbp_basisofname_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lbp_basisofname_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();
lbp_basisofname_insStruct lbp_basisofname_ins = new lbp_basisofname_insStruct();





	
	/**
	 * [tDBOutput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_24", false);
		start_Hash.put("tDBOutput_24", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lbp_basisofname_ins");
					}
				
		int tos_count_tDBOutput_24 = 0;
		





String dbschema_tDBOutput_24 = null;
	dbschema_tDBOutput_24 = context.dmd_db_schema;
	

String tableName_tDBOutput_24 = null;
if(dbschema_tDBOutput_24 == null || dbschema_tDBOutput_24.trim().length() == 0) {
	tableName_tDBOutput_24 = ("dmd_lookup_basisofname");
} else {
	tableName_tDBOutput_24 = dbschema_tDBOutput_24 + "\".\"" + ("dmd_lookup_basisofname");
}

int nb_line_tDBOutput_24 = 0;
int nb_line_update_tDBOutput_24 = 0;
int nb_line_inserted_tDBOutput_24 = 0;
int nb_line_deleted_tDBOutput_24 = 0;
int nb_line_rejected_tDBOutput_24 = 0;

int deletedCount_tDBOutput_24=0;
int updatedCount_tDBOutput_24=0;
int insertedCount_tDBOutput_24=0;
int rejectedCount_tDBOutput_24=0;

boolean whetherReject_tDBOutput_24 = false;

java.sql.Connection conn_tDBOutput_24 = null;
String dbUser_tDBOutput_24 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_24 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_24 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_24 = context.dmd_db_password; 

    String dbPwd_tDBOutput_24 = decryptedPassword_tDBOutput_24;

    conn_tDBOutput_24 = java.sql.DriverManager.getConnection(url_tDBOutput_24,dbUser_tDBOutput_24,dbPwd_tDBOutput_24);
	
	resourceMap.put("conn_tDBOutput_24", conn_tDBOutput_24);
        conn_tDBOutput_24.setAutoCommit(false);
        int commitEvery_tDBOutput_24 = 10000;
        int commitCounter_tDBOutput_24 = 0;


   int batchSize_tDBOutput_24 = 10000;
   int batchSizeCounter_tDBOutput_24=0;

int count_tDBOutput_24=0;
            int rsTruncCountNumber_tDBOutput_24 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_24 = conn_tDBOutput_24.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_24 = stmtTruncCount_tDBOutput_24.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_24 + "\"")) {
                    if(rsTruncCount_tDBOutput_24.next()) {
                        rsTruncCountNumber_tDBOutput_24 = rsTruncCount_tDBOutput_24.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_24 = conn_tDBOutput_24.createStatement()) {
                stmtTrunc_tDBOutput_24.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_24 + "\"");
                deletedCount_tDBOutput_24 += rsTruncCountNumber_tDBOutput_24;
            }
	    String insert_tDBOutput_24 = "INSERT INTO \"" + tableName_tDBOutput_24 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_24 = conn_tDBOutput_24.prepareStatement(insert_tDBOutput_24);
	    resourceMap.put("pstmt_tDBOutput_24", pstmt_tDBOutput_24);
	    

 



/**
 * [tDBOutput_24 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
lbp_basisofname_insStruct lbp_basisofname_ins_tmp = new lbp_basisofname_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tDBInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_17", false);
		start_Hash.put("tDBInput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_17";

	
		int tos_count_tDBInput_17 = 0;
		
	
    
	
		    int nb_line_tDBInput_17 = 0;
		    java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_17 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;
				
				String url_tDBInput_17 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17,dbUser_tDBInput_17,dbPwd_tDBInput_17);
		        
				conn_tDBInput_17.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

		    String dbquery_tDBInput_17 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_basisofname\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_basisofname\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_basisofname\"";
			

            	globalMap.put("tDBInput_17_QUERY",dbquery_tDBInput_17);
		    java.sql.ResultSet rs_tDBInput_17 = null;

		    try {
		    	rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
		    	int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

		    String tmpContent_tDBInput_17 = null;
		    
		    
		    while (rs_tDBInput_17.next()) {
		        nb_line_tDBInput_17++;
		        
							if(colQtyInRs_tDBInput_17 < 1) {
								row38.cd = null;
							} else {
		                          
            row38.cd = rs_tDBInput_17.getLong(1);
            if(rs_tDBInput_17.wasNull()){
                    row38.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 2) {
								row38.desc = null;
							} else {
	                         		
        	row38.desc = routines.system.JDBCUtil.getString(rs_tDBInput_17, 2, false);
		                    }
					


 



/**
 * [tDBInput_17 begin ] stop
 */
	
	/**
	 * [tDBInput_17 main ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 


	tos_count_tDBInput_17++;

/**
 * [tDBInput_17 main ] stop
 */
	
	/**
	 * [tDBInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row38");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

lbp_basisofname_ins = null;


// # Output table : 'lbp_basisofname_ins'
lbp_basisofname_ins_tmp.cd = row38.cd;
lbp_basisofname_ins_tmp.desc = row38.desc;
lbp_basisofname_ins = lbp_basisofname_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "lbp_basisofname_ins"
if(lbp_basisofname_ins != null) { 



	
	/**
	 * [tDBOutput_24 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lbp_basisofname_ins");
					}
					



        whetherReject_tDBOutput_24 = false;
                    if(lbp_basisofname_ins.cd == null) {
pstmt_tDBOutput_24.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_24.setLong(1, lbp_basisofname_ins.cd);
}

                    if(lbp_basisofname_ins.desc == null) {
pstmt_tDBOutput_24.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_24.setString(2, lbp_basisofname_ins.desc);
}

			
    		pstmt_tDBOutput_24.addBatch();
    		nb_line_tDBOutput_24++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_24++;
    		  
    			if ((batchSize_tDBOutput_24 > 0) && (batchSize_tDBOutput_24 <= batchSizeCounter_tDBOutput_24)) {
                try {
						int countSum_tDBOutput_24 = 0;
						    
						for(int countEach_tDBOutput_24: pstmt_tDBOutput_24.executeBatch()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}
				    	
				    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
				    	
            	    	batchSizeCounter_tDBOutput_24 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_24){
				    	java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),sqle_tDBOutput_24=null;
				    	String errormessage_tDBOutput_24;
						if (ne_tDBOutput_24 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_24 = new java.sql.SQLException(e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(), ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
							errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
						}else{
							errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
						}
				    	
				    	int countSum_tDBOutput_24 = 0;
						for(int countEach_tDBOutput_24: e_tDBOutput_24.getUpdateCounts()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}
						
				    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
				    	
				    	System.err.println(errormessage_tDBOutput_24);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_24++;
                if(commitEvery_tDBOutput_24 <= commitCounter_tDBOutput_24) {
                if ((batchSize_tDBOutput_24 > 0) && (batchSizeCounter_tDBOutput_24 > 0)) {
                try {
                		int countSum_tDBOutput_24 = 0;
                		    
						for(int countEach_tDBOutput_24: pstmt_tDBOutput_24.executeBatch()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}
            	    	
            	    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
            	    	
                batchSizeCounter_tDBOutput_24 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_24){
			    	java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),sqle_tDBOutput_24=null;
			    	String errormessage_tDBOutput_24;
					if (ne_tDBOutput_24 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_24 = new java.sql.SQLException(e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(), ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
						errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
					}else{
						errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
					}
			    	
			    	int countSum_tDBOutput_24 = 0;
					for(int countEach_tDBOutput_24: e_tDBOutput_24.getUpdateCounts()) {
						countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
					}
					
			    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
			    	
			    	System.err.println(errormessage_tDBOutput_24);
			    	
				}
            }
                	conn_tDBOutput_24.commit();
                	
                	commitCounter_tDBOutput_24=0;
                }

 


	tos_count_tDBOutput_24++;

/**
 * [tDBOutput_24 main ] stop
 */
	
	/**
	 * [tDBOutput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	

 



/**
 * [tDBOutput_24 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	

 



/**
 * [tDBOutput_24 process_data_end ] stop
 */

} // End of branch "lbp_basisofname_ins"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_17 end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

	}
}finally{
	if (rs_tDBInput_17 != null) {
		rs_tDBInput_17.close();
	}
	if (stmt_tDBInput_17 != null) {
		stmt_tDBInput_17.close();
	}
	if(conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {
		
			conn_tDBInput_17.commit();
			
		
			conn_tDBInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_17_NB_LINE",nb_line_tDBInput_17);
 

ok_Hash.put("tDBInput_17", true);
end_Hash.put("tDBInput_17", System.currentTimeMillis());




/**
 * [tDBInput_17 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tDBOutput_24 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	



	    try {
				int countSum_tDBOutput_24 = 0;
				if (pstmt_tDBOutput_24 != null && batchSizeCounter_tDBOutput_24 > 0) {
						
					for(int countEach_tDBOutput_24: pstmt_tDBOutput_24.executeBatch()) {
						countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_24){
	    	java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),sqle_tDBOutput_24=null;
	    	String errormessage_tDBOutput_24;
			if (ne_tDBOutput_24 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_24 = new java.sql.SQLException(e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(), ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
				errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
			}else{
				errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
			}
	    	
	    	int countSum_tDBOutput_24 = 0;
			for(int countEach_tDBOutput_24: e_tDBOutput_24.getUpdateCounts()) {
				countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
			}
			
	    		insertedCount_tDBOutput_24 += countSum_tDBOutput_24;
	    	
	    	System.err.println(errormessage_tDBOutput_24);
	    	
		}
	    
        if(pstmt_tDBOutput_24 != null) {
        		
            pstmt_tDBOutput_24.close();
            resourceMap.remove("pstmt_tDBOutput_24");
        }
    resourceMap.put("statementClosed_tDBOutput_24", true);
			
			conn_tDBOutput_24.commit();
			
		
    	conn_tDBOutput_24 .close();
    	
    	resourceMap.put("finish_tDBOutput_24", true);
    	

	nb_line_deleted_tDBOutput_24=nb_line_deleted_tDBOutput_24+ deletedCount_tDBOutput_24;
	nb_line_update_tDBOutput_24=nb_line_update_tDBOutput_24 + updatedCount_tDBOutput_24;
	nb_line_inserted_tDBOutput_24=nb_line_inserted_tDBOutput_24 + insertedCount_tDBOutput_24;
	nb_line_rejected_tDBOutput_24=nb_line_rejected_tDBOutput_24 + rejectedCount_tDBOutput_24;
	
        globalMap.put("tDBOutput_24_NB_LINE",nb_line_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_UPDATED",nb_line_update_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_DELETED",nb_line_deleted_tDBOutput_24);
        globalMap.put("tDBOutput_24_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_24);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lbp_basisofname_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_24", true);
end_Hash.put("tDBOutput_24", System.currentTimeMillis());




/**
 * [tDBOutput_24 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_20Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tDBOutput_24 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_24";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_24") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_24 = null;
                if ((pstmtToClose_tDBOutput_24 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_24")) != null) {
                    pstmtToClose_tDBOutput_24.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_24") == null){
            java.sql.Connection ctn_tDBOutput_24 = null;
            if((ctn_tDBOutput_24 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_24")) != null){
                try {
                    ctn_tDBOutput_24.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_24) {
                    String errorMessage_tDBOutput_24 = "failed to close the connection in tDBOutput_24 :" + sqlEx_tDBOutput_24.getMessage();
                    System.err.println(errorMessage_tDBOutput_24);
                }
            }
        }
    }
 



/**
 * [tDBOutput_24 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_basisstrnth_insStruct implements routines.system.IPersistableRow<lkp_basisstrnth_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_basisstrnth_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();
lkp_basisstrnth_insStruct lkp_basisstrnth_ins = new lkp_basisstrnth_insStruct();





	
	/**
	 * [tDBOutput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_25", false);
		start_Hash.put("tDBOutput_25", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_basisstrnth_ins");
					}
				
		int tos_count_tDBOutput_25 = 0;
		





String dbschema_tDBOutput_25 = null;
	dbschema_tDBOutput_25 = context.dmd_db_schema;
	

String tableName_tDBOutput_25 = null;
if(dbschema_tDBOutput_25 == null || dbschema_tDBOutput_25.trim().length() == 0) {
	tableName_tDBOutput_25 = ("dmd_lookup_basisofstrength");
} else {
	tableName_tDBOutput_25 = dbschema_tDBOutput_25 + "\".\"" + ("dmd_lookup_basisofstrength");
}

int nb_line_tDBOutput_25 = 0;
int nb_line_update_tDBOutput_25 = 0;
int nb_line_inserted_tDBOutput_25 = 0;
int nb_line_deleted_tDBOutput_25 = 0;
int nb_line_rejected_tDBOutput_25 = 0;

int deletedCount_tDBOutput_25=0;
int updatedCount_tDBOutput_25=0;
int insertedCount_tDBOutput_25=0;
int rejectedCount_tDBOutput_25=0;

boolean whetherReject_tDBOutput_25 = false;

java.sql.Connection conn_tDBOutput_25 = null;
String dbUser_tDBOutput_25 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_25 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_25 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_25 = context.dmd_db_password; 

    String dbPwd_tDBOutput_25 = decryptedPassword_tDBOutput_25;

    conn_tDBOutput_25 = java.sql.DriverManager.getConnection(url_tDBOutput_25,dbUser_tDBOutput_25,dbPwd_tDBOutput_25);
	
	resourceMap.put("conn_tDBOutput_25", conn_tDBOutput_25);
        conn_tDBOutput_25.setAutoCommit(false);
        int commitEvery_tDBOutput_25 = 10000;
        int commitCounter_tDBOutput_25 = 0;


   int batchSize_tDBOutput_25 = 10000;
   int batchSizeCounter_tDBOutput_25=0;

int count_tDBOutput_25=0;
            int rsTruncCountNumber_tDBOutput_25 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_25 = conn_tDBOutput_25.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_25 = stmtTruncCount_tDBOutput_25.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_25 + "\"")) {
                    if(rsTruncCount_tDBOutput_25.next()) {
                        rsTruncCountNumber_tDBOutput_25 = rsTruncCount_tDBOutput_25.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_25 = conn_tDBOutput_25.createStatement()) {
                stmtTrunc_tDBOutput_25.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_25 + "\"");
                deletedCount_tDBOutput_25 += rsTruncCountNumber_tDBOutput_25;
            }
	    String insert_tDBOutput_25 = "INSERT INTO \"" + tableName_tDBOutput_25 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_25 = conn_tDBOutput_25.prepareStatement(insert_tDBOutput_25);
	    resourceMap.put("pstmt_tDBOutput_25", pstmt_tDBOutput_25);
	    

 



/**
 * [tDBOutput_25 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_basisstrnth_insStruct lkp_basisstrnth_ins_tmp = new lkp_basisstrnth_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tDBInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_20", false);
		start_Hash.put("tDBInput_20", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_20";

	
		int tos_count_tDBInput_20 = 0;
		
	
    
	
		    int nb_line_tDBInput_20 = 0;
		    java.sql.Connection conn_tDBInput_20 = null;
				String driverClass_tDBInput_20 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_20 = java.lang.Class.forName(driverClass_tDBInput_20);
				String dbUser_tDBInput_20 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_20 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_20 = decryptedPassword_tDBInput_20;
				
				String url_tDBInput_20 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_20 = java.sql.DriverManager.getConnection(url_tDBInput_20,dbUser_tDBInput_20,dbPwd_tDBInput_20);
		        
				conn_tDBInput_20.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_20 = conn_tDBInput_20.createStatement();

		    String dbquery_tDBInput_20 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_basisofstrength\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_basisofstrength\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_basisofstrength\"";
			

            	globalMap.put("tDBInput_20_QUERY",dbquery_tDBInput_20);
		    java.sql.ResultSet rs_tDBInput_20 = null;

		    try {
		    	rs_tDBInput_20 = stmt_tDBInput_20.executeQuery(dbquery_tDBInput_20);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_20 = rs_tDBInput_20.getMetaData();
		    	int colQtyInRs_tDBInput_20 = rsmd_tDBInput_20.getColumnCount();

		    String tmpContent_tDBInput_20 = null;
		    
		    
		    while (rs_tDBInput_20.next()) {
		        nb_line_tDBInput_20++;
		        
							if(colQtyInRs_tDBInput_20 < 1) {
								row39.cd = null;
							} else {
		                          
            row39.cd = rs_tDBInput_20.getLong(1);
            if(rs_tDBInput_20.wasNull()){
                    row39.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_20 < 2) {
								row39.desc = null;
							} else {
	                         		
        	row39.desc = routines.system.JDBCUtil.getString(rs_tDBInput_20, 2, false);
		                    }
					


 



/**
 * [tDBInput_20 begin ] stop
 */
	
	/**
	 * [tDBInput_20 main ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 


	tos_count_tDBInput_20++;

/**
 * [tDBInput_20 main ] stop
 */
	
	/**
	 * [tDBInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row39");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

lkp_basisstrnth_ins = null;


// # Output table : 'lkp_basisstrnth_ins'
lkp_basisstrnth_ins_tmp.cd = row39.cd;
lkp_basisstrnth_ins_tmp.desc = row39.desc;
lkp_basisstrnth_ins = lkp_basisstrnth_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "lkp_basisstrnth_ins"
if(lkp_basisstrnth_ins != null) { 



	
	/**
	 * [tDBOutput_25 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_basisstrnth_ins");
					}
					



        whetherReject_tDBOutput_25 = false;
                    if(lkp_basisstrnth_ins.cd == null) {
pstmt_tDBOutput_25.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_25.setLong(1, lkp_basisstrnth_ins.cd);
}

                    if(lkp_basisstrnth_ins.desc == null) {
pstmt_tDBOutput_25.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_25.setString(2, lkp_basisstrnth_ins.desc);
}

			
    		pstmt_tDBOutput_25.addBatch();
    		nb_line_tDBOutput_25++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_25++;
    		  
    			if ((batchSize_tDBOutput_25 > 0) && (batchSize_tDBOutput_25 <= batchSizeCounter_tDBOutput_25)) {
                try {
						int countSum_tDBOutput_25 = 0;
						    
						for(int countEach_tDBOutput_25: pstmt_tDBOutput_25.executeBatch()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}
				    	
				    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
				    	
            	    	batchSizeCounter_tDBOutput_25 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_25){
				    	java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),sqle_tDBOutput_25=null;
				    	String errormessage_tDBOutput_25;
						if (ne_tDBOutput_25 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_25 = new java.sql.SQLException(e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(), ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
							errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
						}else{
							errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
						}
				    	
				    	int countSum_tDBOutput_25 = 0;
						for(int countEach_tDBOutput_25: e_tDBOutput_25.getUpdateCounts()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}
						
				    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
				    	
				    	System.err.println(errormessage_tDBOutput_25);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_25++;
                if(commitEvery_tDBOutput_25 <= commitCounter_tDBOutput_25) {
                if ((batchSize_tDBOutput_25 > 0) && (batchSizeCounter_tDBOutput_25 > 0)) {
                try {
                		int countSum_tDBOutput_25 = 0;
                		    
						for(int countEach_tDBOutput_25: pstmt_tDBOutput_25.executeBatch()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}
            	    	
            	    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
            	    	
                batchSizeCounter_tDBOutput_25 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_25){
			    	java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),sqle_tDBOutput_25=null;
			    	String errormessage_tDBOutput_25;
					if (ne_tDBOutput_25 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_25 = new java.sql.SQLException(e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(), ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
						errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
					}else{
						errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
					}
			    	
			    	int countSum_tDBOutput_25 = 0;
					for(int countEach_tDBOutput_25: e_tDBOutput_25.getUpdateCounts()) {
						countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
					}
					
			    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
			    	
			    	System.err.println(errormessage_tDBOutput_25);
			    	
				}
            }
                	conn_tDBOutput_25.commit();
                	
                	commitCounter_tDBOutput_25=0;
                }

 


	tos_count_tDBOutput_25++;

/**
 * [tDBOutput_25 main ] stop
 */
	
	/**
	 * [tDBOutput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	

 



/**
 * [tDBOutput_25 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	

 



/**
 * [tDBOutput_25 process_data_end ] stop
 */

} // End of branch "lkp_basisstrnth_ins"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_20 end ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

	}
}finally{
	if (rs_tDBInput_20 != null) {
		rs_tDBInput_20.close();
	}
	if (stmt_tDBInput_20 != null) {
		stmt_tDBInput_20.close();
	}
	if(conn_tDBInput_20 != null && !conn_tDBInput_20.isClosed()) {
		
			conn_tDBInput_20.commit();
			
		
			conn_tDBInput_20.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_20_NB_LINE",nb_line_tDBInput_20);
 

ok_Hash.put("tDBInput_20", true);
end_Hash.put("tDBInput_20", System.currentTimeMillis());




/**
 * [tDBInput_20 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tDBOutput_25 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	



	    try {
				int countSum_tDBOutput_25 = 0;
				if (pstmt_tDBOutput_25 != null && batchSizeCounter_tDBOutput_25 > 0) {
						
					for(int countEach_tDBOutput_25: pstmt_tDBOutput_25.executeBatch()) {
						countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_25){
	    	java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),sqle_tDBOutput_25=null;
	    	String errormessage_tDBOutput_25;
			if (ne_tDBOutput_25 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_25 = new java.sql.SQLException(e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(), ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
				errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
			}else{
				errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
			}
	    	
	    	int countSum_tDBOutput_25 = 0;
			for(int countEach_tDBOutput_25: e_tDBOutput_25.getUpdateCounts()) {
				countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
			}
			
	    		insertedCount_tDBOutput_25 += countSum_tDBOutput_25;
	    	
	    	System.err.println(errormessage_tDBOutput_25);
	    	
		}
	    
        if(pstmt_tDBOutput_25 != null) {
        		
            pstmt_tDBOutput_25.close();
            resourceMap.remove("pstmt_tDBOutput_25");
        }
    resourceMap.put("statementClosed_tDBOutput_25", true);
			
			conn_tDBOutput_25.commit();
			
		
    	conn_tDBOutput_25 .close();
    	
    	resourceMap.put("finish_tDBOutput_25", true);
    	

	nb_line_deleted_tDBOutput_25=nb_line_deleted_tDBOutput_25+ deletedCount_tDBOutput_25;
	nb_line_update_tDBOutput_25=nb_line_update_tDBOutput_25 + updatedCount_tDBOutput_25;
	nb_line_inserted_tDBOutput_25=nb_line_inserted_tDBOutput_25 + insertedCount_tDBOutput_25;
	nb_line_rejected_tDBOutput_25=nb_line_rejected_tDBOutput_25 + rejectedCount_tDBOutput_25;
	
        globalMap.put("tDBOutput_25_NB_LINE",nb_line_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_UPDATED",nb_line_update_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_DELETED",nb_line_deleted_tDBOutput_25);
        globalMap.put("tDBOutput_25_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_25);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_basisstrnth_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_25", true);
end_Hash.put("tDBOutput_25", System.currentTimeMillis());




/**
 * [tDBOutput_25 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_20:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBInput_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_20 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tDBOutput_25 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_25";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_25") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_25 = null;
                if ((pstmtToClose_tDBOutput_25 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_25")) != null) {
                    pstmtToClose_tDBOutput_25.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_25") == null){
            java.sql.Connection ctn_tDBOutput_25 = null;
            if((ctn_tDBOutput_25 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_25")) != null){
                try {
                    ctn_tDBOutput_25.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_25) {
                    String errorMessage_tDBOutput_25 = "failed to close the connection in tDBOutput_25 :" + sqlEx_tDBOutput_25.getMessage();
                    System.err.println(errorMessage_tDBOutput_25);
                }
            }
        }
    }
 



/**
 * [tDBOutput_25 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_cntrl_drugcatStruct implements routines.system.IPersistableRow<lkp_cntrl_drugcatStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_cntrl_drugcatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();
lkp_cntrl_drugcatStruct lkp_cntrl_drugcat = new lkp_cntrl_drugcatStruct();





	
	/**
	 * [tDBOutput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_26", false);
		start_Hash.put("tDBOutput_26", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_cntrl_drugcat");
					}
				
		int tos_count_tDBOutput_26 = 0;
		





String dbschema_tDBOutput_26 = null;
	dbschema_tDBOutput_26 = context.dmd_db_schema;
	

String tableName_tDBOutput_26 = null;
if(dbschema_tDBOutput_26 == null || dbschema_tDBOutput_26.trim().length() == 0) {
	tableName_tDBOutput_26 = ("dmd_lookup_controldrugcat");
} else {
	tableName_tDBOutput_26 = dbschema_tDBOutput_26 + "\".\"" + ("dmd_lookup_controldrugcat");
}

int nb_line_tDBOutput_26 = 0;
int nb_line_update_tDBOutput_26 = 0;
int nb_line_inserted_tDBOutput_26 = 0;
int nb_line_deleted_tDBOutput_26 = 0;
int nb_line_rejected_tDBOutput_26 = 0;

int deletedCount_tDBOutput_26=0;
int updatedCount_tDBOutput_26=0;
int insertedCount_tDBOutput_26=0;
int rejectedCount_tDBOutput_26=0;

boolean whetherReject_tDBOutput_26 = false;

java.sql.Connection conn_tDBOutput_26 = null;
String dbUser_tDBOutput_26 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_26 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_26 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_26 = context.dmd_db_password; 

    String dbPwd_tDBOutput_26 = decryptedPassword_tDBOutput_26;

    conn_tDBOutput_26 = java.sql.DriverManager.getConnection(url_tDBOutput_26,dbUser_tDBOutput_26,dbPwd_tDBOutput_26);
	
	resourceMap.put("conn_tDBOutput_26", conn_tDBOutput_26);
        conn_tDBOutput_26.setAutoCommit(false);
        int commitEvery_tDBOutput_26 = 10000;
        int commitCounter_tDBOutput_26 = 0;


   int batchSize_tDBOutput_26 = 10000;
   int batchSizeCounter_tDBOutput_26=0;

int count_tDBOutput_26=0;
            int rsTruncCountNumber_tDBOutput_26 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_26 = conn_tDBOutput_26.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_26 = stmtTruncCount_tDBOutput_26.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_26 + "\"")) {
                    if(rsTruncCount_tDBOutput_26.next()) {
                        rsTruncCountNumber_tDBOutput_26 = rsTruncCount_tDBOutput_26.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_26 = conn_tDBOutput_26.createStatement()) {
                stmtTrunc_tDBOutput_26.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_26 + "\"");
                deletedCount_tDBOutput_26 += rsTruncCountNumber_tDBOutput_26;
            }
	    String insert_tDBOutput_26 = "INSERT INTO \"" + tableName_tDBOutput_26 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_26 = conn_tDBOutput_26.prepareStatement(insert_tDBOutput_26);
	    resourceMap.put("pstmt_tDBOutput_26", pstmt_tDBOutput_26);
	    

 



/**
 * [tDBOutput_26 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_cntrl_drugcatStruct lkp_cntrl_drugcat_tmp = new lkp_cntrl_drugcatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tDBInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_27", false);
		start_Hash.put("tDBInput_27", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_27";

	
		int tos_count_tDBInput_27 = 0;
		
	
    
	
		    int nb_line_tDBInput_27 = 0;
		    java.sql.Connection conn_tDBInput_27 = null;
				String driverClass_tDBInput_27 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_27 = java.lang.Class.forName(driverClass_tDBInput_27);
				String dbUser_tDBInput_27 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_27 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_27 = decryptedPassword_tDBInput_27;
				
				String url_tDBInput_27 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_27 = java.sql.DriverManager.getConnection(url_tDBInput_27,dbUser_tDBInput_27,dbPwd_tDBInput_27);
		        
				conn_tDBInput_27.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_27 = conn_tDBInput_27.createStatement();

		    String dbquery_tDBInput_27 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_controldrugcat\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_controldrugcat\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_controldrugcat\"";
			

            	globalMap.put("tDBInput_27_QUERY",dbquery_tDBInput_27);
		    java.sql.ResultSet rs_tDBInput_27 = null;

		    try {
		    	rs_tDBInput_27 = stmt_tDBInput_27.executeQuery(dbquery_tDBInput_27);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_27 = rs_tDBInput_27.getMetaData();
		    	int colQtyInRs_tDBInput_27 = rsmd_tDBInput_27.getColumnCount();

		    String tmpContent_tDBInput_27 = null;
		    
		    
		    while (rs_tDBInput_27.next()) {
		        nb_line_tDBInput_27++;
		        
							if(colQtyInRs_tDBInput_27 < 1) {
								row40.cd = null;
							} else {
		                          
            row40.cd = rs_tDBInput_27.getLong(1);
            if(rs_tDBInput_27.wasNull()){
                    row40.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_27 < 2) {
								row40.desc = null;
							} else {
	                         		
        	row40.desc = routines.system.JDBCUtil.getString(rs_tDBInput_27, 2, false);
		                    }
					


 



/**
 * [tDBInput_27 begin ] stop
 */
	
	/**
	 * [tDBInput_27 main ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 


	tos_count_tDBInput_27++;

/**
 * [tDBInput_27 main ] stop
 */
	
	/**
	 * [tDBInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row40");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

lkp_cntrl_drugcat = null;


// # Output table : 'lkp_cntrl_drugcat'
lkp_cntrl_drugcat_tmp.cd = row40.cd;
lkp_cntrl_drugcat_tmp.desc = row40.desc;
lkp_cntrl_drugcat = lkp_cntrl_drugcat_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "lkp_cntrl_drugcat"
if(lkp_cntrl_drugcat != null) { 



	
	/**
	 * [tDBOutput_26 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_cntrl_drugcat");
					}
					



        whetherReject_tDBOutput_26 = false;
                    if(lkp_cntrl_drugcat.cd == null) {
pstmt_tDBOutput_26.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_26.setLong(1, lkp_cntrl_drugcat.cd);
}

                    if(lkp_cntrl_drugcat.desc == null) {
pstmt_tDBOutput_26.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_26.setString(2, lkp_cntrl_drugcat.desc);
}

			
    		pstmt_tDBOutput_26.addBatch();
    		nb_line_tDBOutput_26++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_26++;
    		  
    			if ((batchSize_tDBOutput_26 > 0) && (batchSize_tDBOutput_26 <= batchSizeCounter_tDBOutput_26)) {
                try {
						int countSum_tDBOutput_26 = 0;
						    
						for(int countEach_tDBOutput_26: pstmt_tDBOutput_26.executeBatch()) {
							countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
						}
				    	
				    		insertedCount_tDBOutput_26 += countSum_tDBOutput_26;
				    	
            	    	batchSizeCounter_tDBOutput_26 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_26){
				    	java.sql.SQLException ne_tDBOutput_26 = e_tDBOutput_26.getNextException(),sqle_tDBOutput_26=null;
				    	String errormessage_tDBOutput_26;
						if (ne_tDBOutput_26 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_26 = new java.sql.SQLException(e_tDBOutput_26.getMessage() + "\ncaused by: " + ne_tDBOutput_26.getMessage(), ne_tDBOutput_26.getSQLState(), ne_tDBOutput_26.getErrorCode(), ne_tDBOutput_26);
							errormessage_tDBOutput_26 = sqle_tDBOutput_26.getMessage();
						}else{
							errormessage_tDBOutput_26 = e_tDBOutput_26.getMessage();
						}
				    	
				    	int countSum_tDBOutput_26 = 0;
						for(int countEach_tDBOutput_26: e_tDBOutput_26.getUpdateCounts()) {
							countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
						}
						
				    		insertedCount_tDBOutput_26 += countSum_tDBOutput_26;
				    	
				    	System.err.println(errormessage_tDBOutput_26);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_26++;
                if(commitEvery_tDBOutput_26 <= commitCounter_tDBOutput_26) {
                if ((batchSize_tDBOutput_26 > 0) && (batchSizeCounter_tDBOutput_26 > 0)) {
                try {
                		int countSum_tDBOutput_26 = 0;
                		    
						for(int countEach_tDBOutput_26: pstmt_tDBOutput_26.executeBatch()) {
							countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
						}
            	    	
            	    		insertedCount_tDBOutput_26 += countSum_tDBOutput_26;
            	    	
                batchSizeCounter_tDBOutput_26 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_26){
			    	java.sql.SQLException ne_tDBOutput_26 = e_tDBOutput_26.getNextException(),sqle_tDBOutput_26=null;
			    	String errormessage_tDBOutput_26;
					if (ne_tDBOutput_26 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_26 = new java.sql.SQLException(e_tDBOutput_26.getMessage() + "\ncaused by: " + ne_tDBOutput_26.getMessage(), ne_tDBOutput_26.getSQLState(), ne_tDBOutput_26.getErrorCode(), ne_tDBOutput_26);
						errormessage_tDBOutput_26 = sqle_tDBOutput_26.getMessage();
					}else{
						errormessage_tDBOutput_26 = e_tDBOutput_26.getMessage();
					}
			    	
			    	int countSum_tDBOutput_26 = 0;
					for(int countEach_tDBOutput_26: e_tDBOutput_26.getUpdateCounts()) {
						countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
					}
					
			    		insertedCount_tDBOutput_26 += countSum_tDBOutput_26;
			    	
			    	System.err.println(errormessage_tDBOutput_26);
			    	
				}
            }
                	conn_tDBOutput_26.commit();
                	
                	commitCounter_tDBOutput_26=0;
                }

 


	tos_count_tDBOutput_26++;

/**
 * [tDBOutput_26 main ] stop
 */
	
	/**
	 * [tDBOutput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_26";

	

 



/**
 * [tDBOutput_26 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_26";

	

 



/**
 * [tDBOutput_26 process_data_end ] stop
 */

} // End of branch "lkp_cntrl_drugcat"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_27 end ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

	}
}finally{
	if (rs_tDBInput_27 != null) {
		rs_tDBInput_27.close();
	}
	if (stmt_tDBInput_27 != null) {
		stmt_tDBInput_27.close();
	}
	if(conn_tDBInput_27 != null && !conn_tDBInput_27.isClosed()) {
		
			conn_tDBInput_27.commit();
			
		
			conn_tDBInput_27.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_27_NB_LINE",nb_line_tDBInput_27);
 

ok_Hash.put("tDBInput_27", true);
end_Hash.put("tDBInput_27", System.currentTimeMillis());




/**
 * [tDBInput_27 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tDBOutput_26 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_26";

	



	    try {
				int countSum_tDBOutput_26 = 0;
				if (pstmt_tDBOutput_26 != null && batchSizeCounter_tDBOutput_26 > 0) {
						
					for(int countEach_tDBOutput_26: pstmt_tDBOutput_26.executeBatch()) {
						countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_26 += countSum_tDBOutput_26;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_26){
	    	java.sql.SQLException ne_tDBOutput_26 = e_tDBOutput_26.getNextException(),sqle_tDBOutput_26=null;
	    	String errormessage_tDBOutput_26;
			if (ne_tDBOutput_26 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_26 = new java.sql.SQLException(e_tDBOutput_26.getMessage() + "\ncaused by: " + ne_tDBOutput_26.getMessage(), ne_tDBOutput_26.getSQLState(), ne_tDBOutput_26.getErrorCode(), ne_tDBOutput_26);
				errormessage_tDBOutput_26 = sqle_tDBOutput_26.getMessage();
			}else{
				errormessage_tDBOutput_26 = e_tDBOutput_26.getMessage();
			}
	    	
	    	int countSum_tDBOutput_26 = 0;
			for(int countEach_tDBOutput_26: e_tDBOutput_26.getUpdateCounts()) {
				countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
			}
			
	    		insertedCount_tDBOutput_26 += countSum_tDBOutput_26;
	    	
	    	System.err.println(errormessage_tDBOutput_26);
	    	
		}
	    
        if(pstmt_tDBOutput_26 != null) {
        		
            pstmt_tDBOutput_26.close();
            resourceMap.remove("pstmt_tDBOutput_26");
        }
    resourceMap.put("statementClosed_tDBOutput_26", true);
			
			conn_tDBOutput_26.commit();
			
		
    	conn_tDBOutput_26 .close();
    	
    	resourceMap.put("finish_tDBOutput_26", true);
    	

	nb_line_deleted_tDBOutput_26=nb_line_deleted_tDBOutput_26+ deletedCount_tDBOutput_26;
	nb_line_update_tDBOutput_26=nb_line_update_tDBOutput_26 + updatedCount_tDBOutput_26;
	nb_line_inserted_tDBOutput_26=nb_line_inserted_tDBOutput_26 + insertedCount_tDBOutput_26;
	nb_line_rejected_tDBOutput_26=nb_line_rejected_tDBOutput_26 + rejectedCount_tDBOutput_26;
	
        globalMap.put("tDBOutput_26_NB_LINE",nb_line_tDBOutput_26);
        globalMap.put("tDBOutput_26_NB_LINE_UPDATED",nb_line_update_tDBOutput_26);
        globalMap.put("tDBOutput_26_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_26);
        globalMap.put("tDBOutput_26_NB_LINE_DELETED",nb_line_deleted_tDBOutput_26);
        globalMap.put("tDBOutput_26_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_26);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_cntrl_drugcat");
			  	}
			  	
 

ok_Hash.put("tDBOutput_26", true);
end_Hash.put("tDBOutput_26", System.currentTimeMillis());




/**
 * [tDBOutput_26 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_27:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_32Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_27 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tDBOutput_26 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_26";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_26") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_26 = null;
                if ((pstmtToClose_tDBOutput_26 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_26")) != null) {
                    pstmtToClose_tDBOutput_26.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_26") == null){
            java.sql.Connection ctn_tDBOutput_26 = null;
            if((ctn_tDBOutput_26 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_26")) != null){
                try {
                    ctn_tDBOutput_26.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_26) {
                    String errorMessage_tDBOutput_26 = "failed to close the connection in tDBOutput_26 :" + sqlEx_tDBOutput_26.getMessage();
                    System.err.println(errorMessage_tDBOutput_26);
                }
            }
        }
    }
 



/**
 * [tDBOutput_26 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_drugformind_insStruct implements routines.system.IPersistableRow<lkp_drugformind_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_drugformind_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();
lkp_drugformind_insStruct lkp_drugformind_ins = new lkp_drugformind_insStruct();





	
	/**
	 * [tDBOutput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_27", false);
		start_Hash.put("tDBOutput_27", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_drugformind_ins");
					}
				
		int tos_count_tDBOutput_27 = 0;
		





String dbschema_tDBOutput_27 = null;
	dbschema_tDBOutput_27 = context.dmd_db_schema;
	

String tableName_tDBOutput_27 = null;
if(dbschema_tDBOutput_27 == null || dbschema_tDBOutput_27.trim().length() == 0) {
	tableName_tDBOutput_27 = ("dmd_lookup_drugformind");
} else {
	tableName_tDBOutput_27 = dbschema_tDBOutput_27 + "\".\"" + ("dmd_lookup_drugformind");
}

int nb_line_tDBOutput_27 = 0;
int nb_line_update_tDBOutput_27 = 0;
int nb_line_inserted_tDBOutput_27 = 0;
int nb_line_deleted_tDBOutput_27 = 0;
int nb_line_rejected_tDBOutput_27 = 0;

int deletedCount_tDBOutput_27=0;
int updatedCount_tDBOutput_27=0;
int insertedCount_tDBOutput_27=0;
int rejectedCount_tDBOutput_27=0;

boolean whetherReject_tDBOutput_27 = false;

java.sql.Connection conn_tDBOutput_27 = null;
String dbUser_tDBOutput_27 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_27 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_27 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_27 = context.dmd_db_password; 

    String dbPwd_tDBOutput_27 = decryptedPassword_tDBOutput_27;

    conn_tDBOutput_27 = java.sql.DriverManager.getConnection(url_tDBOutput_27,dbUser_tDBOutput_27,dbPwd_tDBOutput_27);
	
	resourceMap.put("conn_tDBOutput_27", conn_tDBOutput_27);
        conn_tDBOutput_27.setAutoCommit(false);
        int commitEvery_tDBOutput_27 = 10000;
        int commitCounter_tDBOutput_27 = 0;


   int batchSize_tDBOutput_27 = 10000;
   int batchSizeCounter_tDBOutput_27=0;

int count_tDBOutput_27=0;
            int rsTruncCountNumber_tDBOutput_27 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_27 = conn_tDBOutput_27.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_27 = stmtTruncCount_tDBOutput_27.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_27 + "\"")) {
                    if(rsTruncCount_tDBOutput_27.next()) {
                        rsTruncCountNumber_tDBOutput_27 = rsTruncCount_tDBOutput_27.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_27 = conn_tDBOutput_27.createStatement()) {
                stmtTrunc_tDBOutput_27.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_27 + "\"");
                deletedCount_tDBOutput_27 += rsTruncCountNumber_tDBOutput_27;
            }
	    String insert_tDBOutput_27 = "INSERT INTO \"" + tableName_tDBOutput_27 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_27 = conn_tDBOutput_27.prepareStatement(insert_tDBOutput_27);
	    resourceMap.put("pstmt_tDBOutput_27", pstmt_tDBOutput_27);
	    

 



/**
 * [tDBOutput_27 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_drugformind_insStruct lkp_drugformind_ins_tmp = new lkp_drugformind_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tDBInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_32", false);
		start_Hash.put("tDBInput_32", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_32";

	
		int tos_count_tDBInput_32 = 0;
		
	
    
	
		    int nb_line_tDBInput_32 = 0;
		    java.sql.Connection conn_tDBInput_32 = null;
				String driverClass_tDBInput_32 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_32 = java.lang.Class.forName(driverClass_tDBInput_32);
				String dbUser_tDBInput_32 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_32 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_32 = decryptedPassword_tDBInput_32;
				
				String url_tDBInput_32 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_32 = java.sql.DriverManager.getConnection(url_tDBInput_32,dbUser_tDBInput_32,dbPwd_tDBInput_32);
		        
				conn_tDBInput_32.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_32 = conn_tDBInput_32.createStatement();

		    String dbquery_tDBInput_32 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_drugformind\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_drugformind\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_drugformind\"";
			

            	globalMap.put("tDBInput_32_QUERY",dbquery_tDBInput_32);
		    java.sql.ResultSet rs_tDBInput_32 = null;

		    try {
		    	rs_tDBInput_32 = stmt_tDBInput_32.executeQuery(dbquery_tDBInput_32);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_32 = rs_tDBInput_32.getMetaData();
		    	int colQtyInRs_tDBInput_32 = rsmd_tDBInput_32.getColumnCount();

		    String tmpContent_tDBInput_32 = null;
		    
		    
		    while (rs_tDBInput_32.next()) {
		        nb_line_tDBInput_32++;
		        
							if(colQtyInRs_tDBInput_32 < 1) {
								row41.cd = null;
							} else {
		                          
            row41.cd = rs_tDBInput_32.getLong(1);
            if(rs_tDBInput_32.wasNull()){
                    row41.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_32 < 2) {
								row41.desc = null;
							} else {
	                         		
        	row41.desc = routines.system.JDBCUtil.getString(rs_tDBInput_32, 2, false);
		                    }
					


 



/**
 * [tDBInput_32 begin ] stop
 */
	
	/**
	 * [tDBInput_32 main ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 


	tos_count_tDBInput_32++;

/**
 * [tDBInput_32 main ] stop
 */
	
	/**
	 * [tDBInput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

lkp_drugformind_ins = null;


// # Output table : 'lkp_drugformind_ins'
lkp_drugformind_ins_tmp.cd = row41.cd;
lkp_drugformind_ins_tmp.desc = row41.desc;
lkp_drugformind_ins = lkp_drugformind_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "lkp_drugformind_ins"
if(lkp_drugformind_ins != null) { 



	
	/**
	 * [tDBOutput_27 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_drugformind_ins");
					}
					



        whetherReject_tDBOutput_27 = false;
                    if(lkp_drugformind_ins.cd == null) {
pstmt_tDBOutput_27.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_27.setLong(1, lkp_drugformind_ins.cd);
}

                    if(lkp_drugformind_ins.desc == null) {
pstmt_tDBOutput_27.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_27.setString(2, lkp_drugformind_ins.desc);
}

			
    		pstmt_tDBOutput_27.addBatch();
    		nb_line_tDBOutput_27++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_27++;
    		  
    			if ((batchSize_tDBOutput_27 > 0) && (batchSize_tDBOutput_27 <= batchSizeCounter_tDBOutput_27)) {
                try {
						int countSum_tDBOutput_27 = 0;
						    
						for(int countEach_tDBOutput_27: pstmt_tDBOutput_27.executeBatch()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}
				    	
				    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
				    	
            	    	batchSizeCounter_tDBOutput_27 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_27){
				    	java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),sqle_tDBOutput_27=null;
				    	String errormessage_tDBOutput_27;
						if (ne_tDBOutput_27 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_27 = new java.sql.SQLException(e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(), ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
							errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
						}else{
							errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
						}
				    	
				    	int countSum_tDBOutput_27 = 0;
						for(int countEach_tDBOutput_27: e_tDBOutput_27.getUpdateCounts()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}
						
				    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
				    	
				    	System.err.println(errormessage_tDBOutput_27);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_27++;
                if(commitEvery_tDBOutput_27 <= commitCounter_tDBOutput_27) {
                if ((batchSize_tDBOutput_27 > 0) && (batchSizeCounter_tDBOutput_27 > 0)) {
                try {
                		int countSum_tDBOutput_27 = 0;
                		    
						for(int countEach_tDBOutput_27: pstmt_tDBOutput_27.executeBatch()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}
            	    	
            	    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
            	    	
                batchSizeCounter_tDBOutput_27 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_27){
			    	java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),sqle_tDBOutput_27=null;
			    	String errormessage_tDBOutput_27;
					if (ne_tDBOutput_27 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_27 = new java.sql.SQLException(e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(), ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
						errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
					}else{
						errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
					}
			    	
			    	int countSum_tDBOutput_27 = 0;
					for(int countEach_tDBOutput_27: e_tDBOutput_27.getUpdateCounts()) {
						countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
					}
					
			    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
			    	
			    	System.err.println(errormessage_tDBOutput_27);
			    	
				}
            }
                	conn_tDBOutput_27.commit();
                	
                	commitCounter_tDBOutput_27=0;
                }

 


	tos_count_tDBOutput_27++;

/**
 * [tDBOutput_27 main ] stop
 */
	
	/**
	 * [tDBOutput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	

 



/**
 * [tDBOutput_27 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	

 



/**
 * [tDBOutput_27 process_data_end ] stop
 */

} // End of branch "lkp_drugformind_ins"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_32 end ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

	}
}finally{
	if (rs_tDBInput_32 != null) {
		rs_tDBInput_32.close();
	}
	if (stmt_tDBInput_32 != null) {
		stmt_tDBInput_32.close();
	}
	if(conn_tDBInput_32 != null && !conn_tDBInput_32.isClosed()) {
		
			conn_tDBInput_32.commit();
			
		
			conn_tDBInput_32.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_32_NB_LINE",nb_line_tDBInput_32);
 

ok_Hash.put("tDBInput_32", true);
end_Hash.put("tDBInput_32", System.currentTimeMillis());




/**
 * [tDBInput_32 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tDBOutput_27 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	



	    try {
				int countSum_tDBOutput_27 = 0;
				if (pstmt_tDBOutput_27 != null && batchSizeCounter_tDBOutput_27 > 0) {
						
					for(int countEach_tDBOutput_27: pstmt_tDBOutput_27.executeBatch()) {
						countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_27){
	    	java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),sqle_tDBOutput_27=null;
	    	String errormessage_tDBOutput_27;
			if (ne_tDBOutput_27 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_27 = new java.sql.SQLException(e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(), ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
				errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
			}else{
				errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
			}
	    	
	    	int countSum_tDBOutput_27 = 0;
			for(int countEach_tDBOutput_27: e_tDBOutput_27.getUpdateCounts()) {
				countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
			}
			
	    		insertedCount_tDBOutput_27 += countSum_tDBOutput_27;
	    	
	    	System.err.println(errormessage_tDBOutput_27);
	    	
		}
	    
        if(pstmt_tDBOutput_27 != null) {
        		
            pstmt_tDBOutput_27.close();
            resourceMap.remove("pstmt_tDBOutput_27");
        }
    resourceMap.put("statementClosed_tDBOutput_27", true);
			
			conn_tDBOutput_27.commit();
			
		
    	conn_tDBOutput_27 .close();
    	
    	resourceMap.put("finish_tDBOutput_27", true);
    	

	nb_line_deleted_tDBOutput_27=nb_line_deleted_tDBOutput_27+ deletedCount_tDBOutput_27;
	nb_line_update_tDBOutput_27=nb_line_update_tDBOutput_27 + updatedCount_tDBOutput_27;
	nb_line_inserted_tDBOutput_27=nb_line_inserted_tDBOutput_27 + insertedCount_tDBOutput_27;
	nb_line_rejected_tDBOutput_27=nb_line_rejected_tDBOutput_27 + rejectedCount_tDBOutput_27;
	
        globalMap.put("tDBOutput_27_NB_LINE",nb_line_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_UPDATED",nb_line_update_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_DELETED",nb_line_deleted_tDBOutput_27);
        globalMap.put("tDBOutput_27_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_27);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_drugformind_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_27", true);
end_Hash.put("tDBOutput_27", System.currentTimeMillis());




/**
 * [tDBOutput_27 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_32:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_38Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_32 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tDBOutput_27 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_27";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_27") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_27 = null;
                if ((pstmtToClose_tDBOutput_27 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_27")) != null) {
                    pstmtToClose_tDBOutput_27.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_27") == null){
            java.sql.Connection ctn_tDBOutput_27 = null;
            if((ctn_tDBOutput_27 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_27")) != null){
                try {
                    ctn_tDBOutput_27.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_27) {
                    String errorMessage_tDBOutput_27 = "failed to close the connection in tDBOutput_27 :" + sqlEx_tDBOutput_27.getMessage();
                    System.err.println(errorMessage_tDBOutput_27);
                }
            }
        }
    }
 



/**
 * [tDBOutput_27 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_form_insStruct implements routines.system.IPersistableRow<lkp_form_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_form_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_38_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();
lkp_form_insStruct lkp_form_ins = new lkp_form_insStruct();





	
	/**
	 * [tDBOutput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_28", false);
		start_Hash.put("tDBOutput_28", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_form_ins");
					}
				
		int tos_count_tDBOutput_28 = 0;
		





String dbschema_tDBOutput_28 = null;
	dbschema_tDBOutput_28 = context.dmd_db_schema;
	

String tableName_tDBOutput_28 = null;
if(dbschema_tDBOutput_28 == null || dbschema_tDBOutput_28.trim().length() == 0) {
	tableName_tDBOutput_28 = ("dmd_lookup_form");
} else {
	tableName_tDBOutput_28 = dbschema_tDBOutput_28 + "\".\"" + ("dmd_lookup_form");
}

int nb_line_tDBOutput_28 = 0;
int nb_line_update_tDBOutput_28 = 0;
int nb_line_inserted_tDBOutput_28 = 0;
int nb_line_deleted_tDBOutput_28 = 0;
int nb_line_rejected_tDBOutput_28 = 0;

int deletedCount_tDBOutput_28=0;
int updatedCount_tDBOutput_28=0;
int insertedCount_tDBOutput_28=0;
int rejectedCount_tDBOutput_28=0;

boolean whetherReject_tDBOutput_28 = false;

java.sql.Connection conn_tDBOutput_28 = null;
String dbUser_tDBOutput_28 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_28 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_28 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_28 = context.dmd_db_password; 

    String dbPwd_tDBOutput_28 = decryptedPassword_tDBOutput_28;

    conn_tDBOutput_28 = java.sql.DriverManager.getConnection(url_tDBOutput_28,dbUser_tDBOutput_28,dbPwd_tDBOutput_28);
	
	resourceMap.put("conn_tDBOutput_28", conn_tDBOutput_28);
        conn_tDBOutput_28.setAutoCommit(false);
        int commitEvery_tDBOutput_28 = 10000;
        int commitCounter_tDBOutput_28 = 0;


   int batchSize_tDBOutput_28 = 10000;
   int batchSizeCounter_tDBOutput_28=0;

int count_tDBOutput_28=0;
            int rsTruncCountNumber_tDBOutput_28 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_28 = conn_tDBOutput_28.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_28 = stmtTruncCount_tDBOutput_28.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_28 + "\"")) {
                    if(rsTruncCount_tDBOutput_28.next()) {
                        rsTruncCountNumber_tDBOutput_28 = rsTruncCount_tDBOutput_28.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_28 = conn_tDBOutput_28.createStatement()) {
                stmtTrunc_tDBOutput_28.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_28 + "\"");
                deletedCount_tDBOutput_28 += rsTruncCountNumber_tDBOutput_28;
            }
	    String insert_tDBOutput_28 = "INSERT INTO \"" + tableName_tDBOutput_28 + "\" (\"cd\",\"cddt\",\"cdprev\",\"desc\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_28 = conn_tDBOutput_28.prepareStatement(insert_tDBOutput_28);
	    resourceMap.put("pstmt_tDBOutput_28", pstmt_tDBOutput_28);
	    

 



/**
 * [tDBOutput_28 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_form_insStruct lkp_form_ins_tmp = new lkp_form_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tDBInput_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_38", false);
		start_Hash.put("tDBInput_38", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_38";

	
		int tos_count_tDBInput_38 = 0;
		
	
    
	
		    int nb_line_tDBInput_38 = 0;
		    java.sql.Connection conn_tDBInput_38 = null;
				String driverClass_tDBInput_38 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_38 = java.lang.Class.forName(driverClass_tDBInput_38);
				String dbUser_tDBInput_38 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_38 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_38 = decryptedPassword_tDBInput_38;
				
				String url_tDBInput_38 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_38 = java.sql.DriverManager.getConnection(url_tDBInput_38,dbUser_tDBInput_38,dbPwd_tDBInput_38);
		        
				conn_tDBInput_38.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_38 = conn_tDBInput_38.createStatement();

		    String dbquery_tDBInput_38 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_form\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_form\".\"cddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_form\".\"cdprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_form\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_form\"";
			

            	globalMap.put("tDBInput_38_QUERY",dbquery_tDBInput_38);
		    java.sql.ResultSet rs_tDBInput_38 = null;

		    try {
		    	rs_tDBInput_38 = stmt_tDBInput_38.executeQuery(dbquery_tDBInput_38);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_38 = rs_tDBInput_38.getMetaData();
		    	int colQtyInRs_tDBInput_38 = rsmd_tDBInput_38.getColumnCount();

		    String tmpContent_tDBInput_38 = null;
		    
		    
		    while (rs_tDBInput_38.next()) {
		        nb_line_tDBInput_38++;
		        
							if(colQtyInRs_tDBInput_38 < 1) {
								row42.cd = null;
							} else {
	                         		
        	row42.cd = routines.system.JDBCUtil.getString(rs_tDBInput_38, 1, false);
		                    }
							if(colQtyInRs_tDBInput_38 < 2) {
								row42.cddt = null;
							} else {
										
			row42.cddt = routines.system.JDBCUtil.getDate(rs_tDBInput_38, 2);
		                    }
							if(colQtyInRs_tDBInput_38 < 3) {
								row42.cdprev = null;
							} else {
	                         		
        	row42.cdprev = routines.system.JDBCUtil.getString(rs_tDBInput_38, 3, false);
		                    }
							if(colQtyInRs_tDBInput_38 < 4) {
								row42.desc = null;
							} else {
	                         		
        	row42.desc = routines.system.JDBCUtil.getString(rs_tDBInput_38, 4, false);
		                    }
					


 



/**
 * [tDBInput_38 begin ] stop
 */
	
	/**
	 * [tDBInput_38 main ] start
	 */

	

	
	
	currentComponent="tDBInput_38";

	

 


	tos_count_tDBInput_38++;

/**
 * [tDBInput_38 main ] stop
 */
	
	/**
	 * [tDBInput_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_38";

	

 



/**
 * [tDBInput_38 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

lkp_form_ins = null;


// # Output table : 'lkp_form_ins'
lkp_form_ins_tmp.cd = row42.cd;
lkp_form_ins_tmp.cddt = row42.cddt;
lkp_form_ins_tmp.cdprev = row42.cdprev;
lkp_form_ins_tmp.desc = row42.desc;
lkp_form_ins = lkp_form_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "lkp_form_ins"
if(lkp_form_ins != null) { 



	
	/**
	 * [tDBOutput_28 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_form_ins");
					}
					



        whetherReject_tDBOutput_28 = false;
                    if(lkp_form_ins.cd == null) {
pstmt_tDBOutput_28.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_28.setString(1, lkp_form_ins.cd);
}

                    if(lkp_form_ins.cddt != null) {
pstmt_tDBOutput_28.setTimestamp(2, new java.sql.Timestamp(lkp_form_ins.cddt.getTime()));
} else {
pstmt_tDBOutput_28.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(lkp_form_ins.cdprev == null) {
pstmt_tDBOutput_28.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_28.setString(3, lkp_form_ins.cdprev);
}

                    if(lkp_form_ins.desc == null) {
pstmt_tDBOutput_28.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_28.setString(4, lkp_form_ins.desc);
}

			
    		pstmt_tDBOutput_28.addBatch();
    		nb_line_tDBOutput_28++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_28++;
    		  
    			if ((batchSize_tDBOutput_28 > 0) && (batchSize_tDBOutput_28 <= batchSizeCounter_tDBOutput_28)) {
                try {
						int countSum_tDBOutput_28 = 0;
						    
						for(int countEach_tDBOutput_28: pstmt_tDBOutput_28.executeBatch()) {
							countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
						}
				    	
				    		insertedCount_tDBOutput_28 += countSum_tDBOutput_28;
				    	
            	    	batchSizeCounter_tDBOutput_28 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_28){
				    	java.sql.SQLException ne_tDBOutput_28 = e_tDBOutput_28.getNextException(),sqle_tDBOutput_28=null;
				    	String errormessage_tDBOutput_28;
						if (ne_tDBOutput_28 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_28 = new java.sql.SQLException(e_tDBOutput_28.getMessage() + "\ncaused by: " + ne_tDBOutput_28.getMessage(), ne_tDBOutput_28.getSQLState(), ne_tDBOutput_28.getErrorCode(), ne_tDBOutput_28);
							errormessage_tDBOutput_28 = sqle_tDBOutput_28.getMessage();
						}else{
							errormessage_tDBOutput_28 = e_tDBOutput_28.getMessage();
						}
				    	
				    	int countSum_tDBOutput_28 = 0;
						for(int countEach_tDBOutput_28: e_tDBOutput_28.getUpdateCounts()) {
							countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
						}
						
				    		insertedCount_tDBOutput_28 += countSum_tDBOutput_28;
				    	
				    	System.err.println(errormessage_tDBOutput_28);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_28++;
                if(commitEvery_tDBOutput_28 <= commitCounter_tDBOutput_28) {
                if ((batchSize_tDBOutput_28 > 0) && (batchSizeCounter_tDBOutput_28 > 0)) {
                try {
                		int countSum_tDBOutput_28 = 0;
                		    
						for(int countEach_tDBOutput_28: pstmt_tDBOutput_28.executeBatch()) {
							countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
						}
            	    	
            	    		insertedCount_tDBOutput_28 += countSum_tDBOutput_28;
            	    	
                batchSizeCounter_tDBOutput_28 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_28){
			    	java.sql.SQLException ne_tDBOutput_28 = e_tDBOutput_28.getNextException(),sqle_tDBOutput_28=null;
			    	String errormessage_tDBOutput_28;
					if (ne_tDBOutput_28 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_28 = new java.sql.SQLException(e_tDBOutput_28.getMessage() + "\ncaused by: " + ne_tDBOutput_28.getMessage(), ne_tDBOutput_28.getSQLState(), ne_tDBOutput_28.getErrorCode(), ne_tDBOutput_28);
						errormessage_tDBOutput_28 = sqle_tDBOutput_28.getMessage();
					}else{
						errormessage_tDBOutput_28 = e_tDBOutput_28.getMessage();
					}
			    	
			    	int countSum_tDBOutput_28 = 0;
					for(int countEach_tDBOutput_28: e_tDBOutput_28.getUpdateCounts()) {
						countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
					}
					
			    		insertedCount_tDBOutput_28 += countSum_tDBOutput_28;
			    	
			    	System.err.println(errormessage_tDBOutput_28);
			    	
				}
            }
                	conn_tDBOutput_28.commit();
                	
                	commitCounter_tDBOutput_28=0;
                }

 


	tos_count_tDBOutput_28++;

/**
 * [tDBOutput_28 main ] stop
 */
	
	/**
	 * [tDBOutput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_28";

	

 



/**
 * [tDBOutput_28 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_28";

	

 



/**
 * [tDBOutput_28 process_data_end ] stop
 */

} // End of branch "lkp_form_ins"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_38";

	

 



/**
 * [tDBInput_38 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_38 end ] start
	 */

	

	
	
	currentComponent="tDBInput_38";

	

	}
}finally{
	if (rs_tDBInput_38 != null) {
		rs_tDBInput_38.close();
	}
	if (stmt_tDBInput_38 != null) {
		stmt_tDBInput_38.close();
	}
	if(conn_tDBInput_38 != null && !conn_tDBInput_38.isClosed()) {
		
			conn_tDBInput_38.commit();
			
		
			conn_tDBInput_38.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_38_NB_LINE",nb_line_tDBInput_38);
 

ok_Hash.put("tDBInput_38", true);
end_Hash.put("tDBInput_38", System.currentTimeMillis());




/**
 * [tDBInput_38 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tDBOutput_28 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_28";

	



	    try {
				int countSum_tDBOutput_28 = 0;
				if (pstmt_tDBOutput_28 != null && batchSizeCounter_tDBOutput_28 > 0) {
						
					for(int countEach_tDBOutput_28: pstmt_tDBOutput_28.executeBatch()) {
						countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_28 += countSum_tDBOutput_28;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_28){
	    	java.sql.SQLException ne_tDBOutput_28 = e_tDBOutput_28.getNextException(),sqle_tDBOutput_28=null;
	    	String errormessage_tDBOutput_28;
			if (ne_tDBOutput_28 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_28 = new java.sql.SQLException(e_tDBOutput_28.getMessage() + "\ncaused by: " + ne_tDBOutput_28.getMessage(), ne_tDBOutput_28.getSQLState(), ne_tDBOutput_28.getErrorCode(), ne_tDBOutput_28);
				errormessage_tDBOutput_28 = sqle_tDBOutput_28.getMessage();
			}else{
				errormessage_tDBOutput_28 = e_tDBOutput_28.getMessage();
			}
	    	
	    	int countSum_tDBOutput_28 = 0;
			for(int countEach_tDBOutput_28: e_tDBOutput_28.getUpdateCounts()) {
				countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
			}
			
	    		insertedCount_tDBOutput_28 += countSum_tDBOutput_28;
	    	
	    	System.err.println(errormessage_tDBOutput_28);
	    	
		}
	    
        if(pstmt_tDBOutput_28 != null) {
        		
            pstmt_tDBOutput_28.close();
            resourceMap.remove("pstmt_tDBOutput_28");
        }
    resourceMap.put("statementClosed_tDBOutput_28", true);
			
			conn_tDBOutput_28.commit();
			
		
    	conn_tDBOutput_28 .close();
    	
    	resourceMap.put("finish_tDBOutput_28", true);
    	

	nb_line_deleted_tDBOutput_28=nb_line_deleted_tDBOutput_28+ deletedCount_tDBOutput_28;
	nb_line_update_tDBOutput_28=nb_line_update_tDBOutput_28 + updatedCount_tDBOutput_28;
	nb_line_inserted_tDBOutput_28=nb_line_inserted_tDBOutput_28 + insertedCount_tDBOutput_28;
	nb_line_rejected_tDBOutput_28=nb_line_rejected_tDBOutput_28 + rejectedCount_tDBOutput_28;
	
        globalMap.put("tDBOutput_28_NB_LINE",nb_line_tDBOutput_28);
        globalMap.put("tDBOutput_28_NB_LINE_UPDATED",nb_line_update_tDBOutput_28);
        globalMap.put("tDBOutput_28_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_28);
        globalMap.put("tDBOutput_28_NB_LINE_DELETED",nb_line_deleted_tDBOutput_28);
        globalMap.put("tDBOutput_28_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_28);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_form_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_28", true);
end_Hash.put("tDBOutput_28", System.currentTimeMillis());




/**
 * [tDBOutput_28 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_38:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBInput_45Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_38 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_38";

	

 



/**
 * [tDBInput_38 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tDBOutput_28 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_28";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_28") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_28 = null;
                if ((pstmtToClose_tDBOutput_28 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_28")) != null) {
                    pstmtToClose_tDBOutput_28.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_28") == null){
            java.sql.Connection ctn_tDBOutput_28 = null;
            if((ctn_tDBOutput_28 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_28")) != null){
                try {
                    ctn_tDBOutput_28.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_28) {
                    String errorMessage_tDBOutput_28 = "failed to close the connection in tDBOutput_28 :" + sqlEx_tDBOutput_28.getMessage();
                    System.err.println(errorMessage_tDBOutput_28);
                }
            }
        }
    }
 



/**
 * [tDBOutput_28 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_38_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_ingred_insStruct implements routines.system.IPersistableRow<lkp_ingred_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public java.util.Date isiddt;

				public java.util.Date getIsiddt () {
					return this.isiddt;
				}
				
			    public String isidprev;

				public String getIsidprev () {
					return this.isidprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.isid = readString(dis);
					
					this.isiddt = readDate(dis);
					
					this.isidprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.isid,dos);
					
					// java.util.Date
				
						writeDate(this.isiddt,dos);
					
					// String
				
						writeString(this.isidprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("isid="+isid);
		sb.append(",isiddt="+String.valueOf(isiddt));
		sb.append(",isidprev="+isidprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_ingred_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public java.util.Date isiddt;

				public java.util.Date getIsiddt () {
					return this.isiddt;
				}
				
			    public String isidprev;

				public String getIsidprev () {
					return this.isidprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.isid = readString(dis);
					
					this.isiddt = readDate(dis);
					
					this.isidprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.isid,dos);
					
					// java.util.Date
				
						writeDate(this.isiddt,dos);
					
					// String
				
						writeString(this.isidprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("isid="+isid);
		sb.append(",isiddt="+String.valueOf(isiddt));
		sb.append(",isidprev="+isidprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_45Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_45_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();
lkp_ingred_insStruct lkp_ingred_ins = new lkp_ingred_insStruct();





	
	/**
	 * [tDBOutput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_29", false);
		start_Hash.put("tDBOutput_29", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_ingred_ins");
					}
				
		int tos_count_tDBOutput_29 = 0;
		





String dbschema_tDBOutput_29 = null;
	dbschema_tDBOutput_29 = context.dmd_db_schema;
	

String tableName_tDBOutput_29 = null;
if(dbschema_tDBOutput_29 == null || dbschema_tDBOutput_29.trim().length() == 0) {
	tableName_tDBOutput_29 = ("dmd_lookup_ingredient");
} else {
	tableName_tDBOutput_29 = dbschema_tDBOutput_29 + "\".\"" + ("dmd_lookup_ingredient");
}

int nb_line_tDBOutput_29 = 0;
int nb_line_update_tDBOutput_29 = 0;
int nb_line_inserted_tDBOutput_29 = 0;
int nb_line_deleted_tDBOutput_29 = 0;
int nb_line_rejected_tDBOutput_29 = 0;

int deletedCount_tDBOutput_29=0;
int updatedCount_tDBOutput_29=0;
int insertedCount_tDBOutput_29=0;
int rejectedCount_tDBOutput_29=0;

boolean whetherReject_tDBOutput_29 = false;

java.sql.Connection conn_tDBOutput_29 = null;
String dbUser_tDBOutput_29 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_29 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_29 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_29 = context.dmd_db_password; 

    String dbPwd_tDBOutput_29 = decryptedPassword_tDBOutput_29;

    conn_tDBOutput_29 = java.sql.DriverManager.getConnection(url_tDBOutput_29,dbUser_tDBOutput_29,dbPwd_tDBOutput_29);
	
	resourceMap.put("conn_tDBOutput_29", conn_tDBOutput_29);
        conn_tDBOutput_29.setAutoCommit(false);
        int commitEvery_tDBOutput_29 = 10000;
        int commitCounter_tDBOutput_29 = 0;


   int batchSize_tDBOutput_29 = 10000;
   int batchSizeCounter_tDBOutput_29=0;

int count_tDBOutput_29=0;
            int rsTruncCountNumber_tDBOutput_29 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_29 = conn_tDBOutput_29.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_29 = stmtTruncCount_tDBOutput_29.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_29 + "\"")) {
                    if(rsTruncCount_tDBOutput_29.next()) {
                        rsTruncCountNumber_tDBOutput_29 = rsTruncCount_tDBOutput_29.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_29 = conn_tDBOutput_29.createStatement()) {
                stmtTrunc_tDBOutput_29.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_29 + "\"");
                deletedCount_tDBOutput_29 += rsTruncCountNumber_tDBOutput_29;
            }
	    String insert_tDBOutput_29 = "INSERT INTO \"" + tableName_tDBOutput_29 + "\" (\"isid\",\"isiddt\",\"isidprev\",\"invalid\",\"nm\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_29 = conn_tDBOutput_29.prepareStatement(insert_tDBOutput_29);
	    resourceMap.put("pstmt_tDBOutput_29", pstmt_tDBOutput_29);
	    

 



/**
 * [tDBOutput_29 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_ingred_insStruct lkp_ingred_ins_tmp = new lkp_ingred_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tDBInput_45 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_45", false);
		start_Hash.put("tDBInput_45", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_45";

	
		int tos_count_tDBInput_45 = 0;
		
	
    
	
		    int nb_line_tDBInput_45 = 0;
		    java.sql.Connection conn_tDBInput_45 = null;
				String driverClass_tDBInput_45 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_45 = java.lang.Class.forName(driverClass_tDBInput_45);
				String dbUser_tDBInput_45 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_45 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_45 = decryptedPassword_tDBInput_45;
				
				String url_tDBInput_45 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_45 = java.sql.DriverManager.getConnection(url_tDBInput_45,dbUser_tDBInput_45,dbPwd_tDBInput_45);
		        
				conn_tDBInput_45.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_45 = conn_tDBInput_45.createStatement();

		    String dbquery_tDBInput_45 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_ingredient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_ingredient\".\"isiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_ingredient\".\"isidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_ingredient\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_ingredient\".\"nm\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_ingredient\"";
			

            	globalMap.put("tDBInput_45_QUERY",dbquery_tDBInput_45);
		    java.sql.ResultSet rs_tDBInput_45 = null;

		    try {
		    	rs_tDBInput_45 = stmt_tDBInput_45.executeQuery(dbquery_tDBInput_45);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_45 = rs_tDBInput_45.getMetaData();
		    	int colQtyInRs_tDBInput_45 = rsmd_tDBInput_45.getColumnCount();

		    String tmpContent_tDBInput_45 = null;
		    
		    
		    while (rs_tDBInput_45.next()) {
		        nb_line_tDBInput_45++;
		        
							if(colQtyInRs_tDBInput_45 < 1) {
								row43.isid = null;
							} else {
	                         		
        	row43.isid = routines.system.JDBCUtil.getString(rs_tDBInput_45, 1, false);
		                    }
							if(colQtyInRs_tDBInput_45 < 2) {
								row43.isiddt = null;
							} else {
										
			row43.isiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_45, 2);
		                    }
							if(colQtyInRs_tDBInput_45 < 3) {
								row43.isidprev = null;
							} else {
	                         		
        	row43.isidprev = routines.system.JDBCUtil.getString(rs_tDBInput_45, 3, false);
		                    }
							if(colQtyInRs_tDBInput_45 < 4) {
								row43.invalid = null;
							} else {
		                          
            row43.invalid = rs_tDBInput_45.getShort(4);
            if(rs_tDBInput_45.wasNull()){
                    row43.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_45 < 5) {
								row43.nm = null;
							} else {
	                         		
        	row43.nm = routines.system.JDBCUtil.getString(rs_tDBInput_45, 5, false);
		                    }
					


 



/**
 * [tDBInput_45 begin ] stop
 */
	
	/**
	 * [tDBInput_45 main ] start
	 */

	

	
	
	currentComponent="tDBInput_45";

	

 


	tos_count_tDBInput_45++;

/**
 * [tDBInput_45 main ] stop
 */
	
	/**
	 * [tDBInput_45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_45";

	

 



/**
 * [tDBInput_45 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

lkp_ingred_ins = null;


// # Output table : 'lkp_ingred_ins'
lkp_ingred_ins_tmp.isid = row43.isid;
lkp_ingred_ins_tmp.isiddt = row43.isiddt;
lkp_ingred_ins_tmp.isidprev = row43.isidprev;
lkp_ingred_ins_tmp.invalid = row43.invalid;
lkp_ingred_ins_tmp.nm = row43.nm;
lkp_ingred_ins = lkp_ingred_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "lkp_ingred_ins"
if(lkp_ingred_ins != null) { 



	
	/**
	 * [tDBOutput_29 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_ingred_ins");
					}
					



        whetherReject_tDBOutput_29 = false;
                    if(lkp_ingred_ins.isid == null) {
pstmt_tDBOutput_29.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_29.setString(1, lkp_ingred_ins.isid);
}

                    if(lkp_ingred_ins.isiddt != null) {
pstmt_tDBOutput_29.setTimestamp(2, new java.sql.Timestamp(lkp_ingred_ins.isiddt.getTime()));
} else {
pstmt_tDBOutput_29.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(lkp_ingred_ins.isidprev == null) {
pstmt_tDBOutput_29.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_29.setString(3, lkp_ingred_ins.isidprev);
}

                    if(lkp_ingred_ins.invalid == null) {
pstmt_tDBOutput_29.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_29.setShort(4, lkp_ingred_ins.invalid);
}

                    if(lkp_ingred_ins.nm == null) {
pstmt_tDBOutput_29.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_29.setString(5, lkp_ingred_ins.nm);
}

			
    		pstmt_tDBOutput_29.addBatch();
    		nb_line_tDBOutput_29++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_29++;
    		  
    			if ((batchSize_tDBOutput_29 > 0) && (batchSize_tDBOutput_29 <= batchSizeCounter_tDBOutput_29)) {
                try {
						int countSum_tDBOutput_29 = 0;
						    
						for(int countEach_tDBOutput_29: pstmt_tDBOutput_29.executeBatch()) {
							countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
						}
				    	
				    		insertedCount_tDBOutput_29 += countSum_tDBOutput_29;
				    	
            	    	batchSizeCounter_tDBOutput_29 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_29){
				    	java.sql.SQLException ne_tDBOutput_29 = e_tDBOutput_29.getNextException(),sqle_tDBOutput_29=null;
				    	String errormessage_tDBOutput_29;
						if (ne_tDBOutput_29 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_29 = new java.sql.SQLException(e_tDBOutput_29.getMessage() + "\ncaused by: " + ne_tDBOutput_29.getMessage(), ne_tDBOutput_29.getSQLState(), ne_tDBOutput_29.getErrorCode(), ne_tDBOutput_29);
							errormessage_tDBOutput_29 = sqle_tDBOutput_29.getMessage();
						}else{
							errormessage_tDBOutput_29 = e_tDBOutput_29.getMessage();
						}
				    	
				    	int countSum_tDBOutput_29 = 0;
						for(int countEach_tDBOutput_29: e_tDBOutput_29.getUpdateCounts()) {
							countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
						}
						
				    		insertedCount_tDBOutput_29 += countSum_tDBOutput_29;
				    	
				    	System.err.println(errormessage_tDBOutput_29);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_29++;
                if(commitEvery_tDBOutput_29 <= commitCounter_tDBOutput_29) {
                if ((batchSize_tDBOutput_29 > 0) && (batchSizeCounter_tDBOutput_29 > 0)) {
                try {
                		int countSum_tDBOutput_29 = 0;
                		    
						for(int countEach_tDBOutput_29: pstmt_tDBOutput_29.executeBatch()) {
							countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
						}
            	    	
            	    		insertedCount_tDBOutput_29 += countSum_tDBOutput_29;
            	    	
                batchSizeCounter_tDBOutput_29 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_29){
			    	java.sql.SQLException ne_tDBOutput_29 = e_tDBOutput_29.getNextException(),sqle_tDBOutput_29=null;
			    	String errormessage_tDBOutput_29;
					if (ne_tDBOutput_29 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_29 = new java.sql.SQLException(e_tDBOutput_29.getMessage() + "\ncaused by: " + ne_tDBOutput_29.getMessage(), ne_tDBOutput_29.getSQLState(), ne_tDBOutput_29.getErrorCode(), ne_tDBOutput_29);
						errormessage_tDBOutput_29 = sqle_tDBOutput_29.getMessage();
					}else{
						errormessage_tDBOutput_29 = e_tDBOutput_29.getMessage();
					}
			    	
			    	int countSum_tDBOutput_29 = 0;
					for(int countEach_tDBOutput_29: e_tDBOutput_29.getUpdateCounts()) {
						countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
					}
					
			    		insertedCount_tDBOutput_29 += countSum_tDBOutput_29;
			    	
			    	System.err.println(errormessage_tDBOutput_29);
			    	
				}
            }
                	conn_tDBOutput_29.commit();
                	
                	commitCounter_tDBOutput_29=0;
                }

 


	tos_count_tDBOutput_29++;

/**
 * [tDBOutput_29 main ] stop
 */
	
	/**
	 * [tDBOutput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_29";

	

 



/**
 * [tDBOutput_29 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_29";

	

 



/**
 * [tDBOutput_29 process_data_end ] stop
 */

} // End of branch "lkp_ingred_ins"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_45 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_45";

	

 



/**
 * [tDBInput_45 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_45 end ] start
	 */

	

	
	
	currentComponent="tDBInput_45";

	

	}
}finally{
	if (rs_tDBInput_45 != null) {
		rs_tDBInput_45.close();
	}
	if (stmt_tDBInput_45 != null) {
		stmt_tDBInput_45.close();
	}
	if(conn_tDBInput_45 != null && !conn_tDBInput_45.isClosed()) {
		
			conn_tDBInput_45.commit();
			
		
			conn_tDBInput_45.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_45_NB_LINE",nb_line_tDBInput_45);
 

ok_Hash.put("tDBInput_45", true);
end_Hash.put("tDBInput_45", System.currentTimeMillis());




/**
 * [tDBInput_45 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tDBOutput_29 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_29";

	



	    try {
				int countSum_tDBOutput_29 = 0;
				if (pstmt_tDBOutput_29 != null && batchSizeCounter_tDBOutput_29 > 0) {
						
					for(int countEach_tDBOutput_29: pstmt_tDBOutput_29.executeBatch()) {
						countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_29 += countSum_tDBOutput_29;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_29){
	    	java.sql.SQLException ne_tDBOutput_29 = e_tDBOutput_29.getNextException(),sqle_tDBOutput_29=null;
	    	String errormessage_tDBOutput_29;
			if (ne_tDBOutput_29 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_29 = new java.sql.SQLException(e_tDBOutput_29.getMessage() + "\ncaused by: " + ne_tDBOutput_29.getMessage(), ne_tDBOutput_29.getSQLState(), ne_tDBOutput_29.getErrorCode(), ne_tDBOutput_29);
				errormessage_tDBOutput_29 = sqle_tDBOutput_29.getMessage();
			}else{
				errormessage_tDBOutput_29 = e_tDBOutput_29.getMessage();
			}
	    	
	    	int countSum_tDBOutput_29 = 0;
			for(int countEach_tDBOutput_29: e_tDBOutput_29.getUpdateCounts()) {
				countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
			}
			
	    		insertedCount_tDBOutput_29 += countSum_tDBOutput_29;
	    	
	    	System.err.println(errormessage_tDBOutput_29);
	    	
		}
	    
        if(pstmt_tDBOutput_29 != null) {
        		
            pstmt_tDBOutput_29.close();
            resourceMap.remove("pstmt_tDBOutput_29");
        }
    resourceMap.put("statementClosed_tDBOutput_29", true);
			
			conn_tDBOutput_29.commit();
			
		
    	conn_tDBOutput_29 .close();
    	
    	resourceMap.put("finish_tDBOutput_29", true);
    	

	nb_line_deleted_tDBOutput_29=nb_line_deleted_tDBOutput_29+ deletedCount_tDBOutput_29;
	nb_line_update_tDBOutput_29=nb_line_update_tDBOutput_29 + updatedCount_tDBOutput_29;
	nb_line_inserted_tDBOutput_29=nb_line_inserted_tDBOutput_29 + insertedCount_tDBOutput_29;
	nb_line_rejected_tDBOutput_29=nb_line_rejected_tDBOutput_29 + rejectedCount_tDBOutput_29;
	
        globalMap.put("tDBOutput_29_NB_LINE",nb_line_tDBOutput_29);
        globalMap.put("tDBOutput_29_NB_LINE_UPDATED",nb_line_update_tDBOutput_29);
        globalMap.put("tDBOutput_29_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_29);
        globalMap.put("tDBOutput_29_NB_LINE_DELETED",nb_line_deleted_tDBOutput_29);
        globalMap.put("tDBOutput_29_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_29);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_ingred_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_29", true);
end_Hash.put("tDBOutput_29", System.currentTimeMillis());




/**
 * [tDBOutput_29 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_45:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBInput_53Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_45 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_45";

	

 



/**
 * [tDBInput_45 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tDBOutput_29 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_29";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_29") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_29 = null;
                if ((pstmtToClose_tDBOutput_29 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_29")) != null) {
                    pstmtToClose_tDBOutput_29.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_29") == null){
            java.sql.Connection ctn_tDBOutput_29 = null;
            if((ctn_tDBOutput_29 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_29")) != null){
                try {
                    ctn_tDBOutput_29.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_29) {
                    String errorMessage_tDBOutput_29 = "failed to close the connection in tDBOutput_29 :" + sqlEx_tDBOutput_29.getMessage();
                    System.err.println(errorMessage_tDBOutput_29);
                }
            }
        }
    }
 



/**
 * [tDBOutput_29 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_45_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_licauth_insStruct implements routines.system.IPersistableRow<lkp_licauth_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_licauth_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_53Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_53_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();
lkp_licauth_insStruct lkp_licauth_ins = new lkp_licauth_insStruct();





	
	/**
	 * [tDBOutput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_30", false);
		start_Hash.put("tDBOutput_30", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_licauth_ins");
					}
				
		int tos_count_tDBOutput_30 = 0;
		





String dbschema_tDBOutput_30 = null;
	dbschema_tDBOutput_30 = context.dmd_db_schema;
	

String tableName_tDBOutput_30 = null;
if(dbschema_tDBOutput_30 == null || dbschema_tDBOutput_30.trim().length() == 0) {
	tableName_tDBOutput_30 = ("dmd_lookup_licauth");
} else {
	tableName_tDBOutput_30 = dbschema_tDBOutput_30 + "\".\"" + ("dmd_lookup_licauth");
}

int nb_line_tDBOutput_30 = 0;
int nb_line_update_tDBOutput_30 = 0;
int nb_line_inserted_tDBOutput_30 = 0;
int nb_line_deleted_tDBOutput_30 = 0;
int nb_line_rejected_tDBOutput_30 = 0;

int deletedCount_tDBOutput_30=0;
int updatedCount_tDBOutput_30=0;
int insertedCount_tDBOutput_30=0;
int rejectedCount_tDBOutput_30=0;

boolean whetherReject_tDBOutput_30 = false;

java.sql.Connection conn_tDBOutput_30 = null;
String dbUser_tDBOutput_30 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_30 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_30 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_30 = context.dmd_db_password; 

    String dbPwd_tDBOutput_30 = decryptedPassword_tDBOutput_30;

    conn_tDBOutput_30 = java.sql.DriverManager.getConnection(url_tDBOutput_30,dbUser_tDBOutput_30,dbPwd_tDBOutput_30);
	
	resourceMap.put("conn_tDBOutput_30", conn_tDBOutput_30);
        conn_tDBOutput_30.setAutoCommit(false);
        int commitEvery_tDBOutput_30 = 10000;
        int commitCounter_tDBOutput_30 = 0;


   int batchSize_tDBOutput_30 = 10000;
   int batchSizeCounter_tDBOutput_30=0;

int count_tDBOutput_30=0;
            int rsTruncCountNumber_tDBOutput_30 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_30 = conn_tDBOutput_30.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_30 = stmtTruncCount_tDBOutput_30.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_30 + "\"")) {
                    if(rsTruncCount_tDBOutput_30.next()) {
                        rsTruncCountNumber_tDBOutput_30 = rsTruncCount_tDBOutput_30.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_30 = conn_tDBOutput_30.createStatement()) {
                stmtTrunc_tDBOutput_30.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_30 + "\"");
                deletedCount_tDBOutput_30 += rsTruncCountNumber_tDBOutput_30;
            }
	    String insert_tDBOutput_30 = "INSERT INTO \"" + tableName_tDBOutput_30 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_30 = conn_tDBOutput_30.prepareStatement(insert_tDBOutput_30);
	    resourceMap.put("pstmt_tDBOutput_30", pstmt_tDBOutput_30);
	    

 



/**
 * [tDBOutput_30 begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_licauth_insStruct lkp_licauth_ins_tmp = new lkp_licauth_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */



	
	/**
	 * [tDBInput_53 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_53", false);
		start_Hash.put("tDBInput_53", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_53";

	
		int tos_count_tDBInput_53 = 0;
		
	
    
	
		    int nb_line_tDBInput_53 = 0;
		    java.sql.Connection conn_tDBInput_53 = null;
				String driverClass_tDBInput_53 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_53 = java.lang.Class.forName(driverClass_tDBInput_53);
				String dbUser_tDBInput_53 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_53 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_53 = decryptedPassword_tDBInput_53;
				
				String url_tDBInput_53 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_53 = java.sql.DriverManager.getConnection(url_tDBInput_53,dbUser_tDBInput_53,dbPwd_tDBInput_53);
		        
				conn_tDBInput_53.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_53 = conn_tDBInput_53.createStatement();

		    String dbquery_tDBInput_53 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_licauth\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_licauth\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_licauth\"";
			

            	globalMap.put("tDBInput_53_QUERY",dbquery_tDBInput_53);
		    java.sql.ResultSet rs_tDBInput_53 = null;

		    try {
		    	rs_tDBInput_53 = stmt_tDBInput_53.executeQuery(dbquery_tDBInput_53);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_53 = rs_tDBInput_53.getMetaData();
		    	int colQtyInRs_tDBInput_53 = rsmd_tDBInput_53.getColumnCount();

		    String tmpContent_tDBInput_53 = null;
		    
		    
		    while (rs_tDBInput_53.next()) {
		        nb_line_tDBInput_53++;
		        
							if(colQtyInRs_tDBInput_53 < 1) {
								row44.cd = null;
							} else {
		                          
            row44.cd = rs_tDBInput_53.getLong(1);
            if(rs_tDBInput_53.wasNull()){
                    row44.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_53 < 2) {
								row44.desc = null;
							} else {
	                         		
        	row44.desc = routines.system.JDBCUtil.getString(rs_tDBInput_53, 2, false);
		                    }
					


 



/**
 * [tDBInput_53 begin ] stop
 */
	
	/**
	 * [tDBInput_53 main ] start
	 */

	

	
	
	currentComponent="tDBInput_53";

	

 


	tos_count_tDBInput_53++;

/**
 * [tDBInput_53 main ] stop
 */
	
	/**
	 * [tDBInput_53 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_53";

	

 



/**
 * [tDBInput_53 process_data_begin ] stop
 */

	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row44");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_19 = false;
		  boolean mainRowRejected_tMap_19 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

lkp_licauth_ins = null;


// # Output table : 'lkp_licauth_ins'
lkp_licauth_ins_tmp.cd = row44.cd;
lkp_licauth_ins_tmp.desc = row44.desc;
lkp_licauth_ins = lkp_licauth_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "lkp_licauth_ins"
if(lkp_licauth_ins != null) { 



	
	/**
	 * [tDBOutput_30 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_licauth_ins");
					}
					



        whetherReject_tDBOutput_30 = false;
                    if(lkp_licauth_ins.cd == null) {
pstmt_tDBOutput_30.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_30.setLong(1, lkp_licauth_ins.cd);
}

                    if(lkp_licauth_ins.desc == null) {
pstmt_tDBOutput_30.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_30.setString(2, lkp_licauth_ins.desc);
}

			
    		pstmt_tDBOutput_30.addBatch();
    		nb_line_tDBOutput_30++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_30++;
    		  
    			if ((batchSize_tDBOutput_30 > 0) && (batchSize_tDBOutput_30 <= batchSizeCounter_tDBOutput_30)) {
                try {
						int countSum_tDBOutput_30 = 0;
						    
						for(int countEach_tDBOutput_30: pstmt_tDBOutput_30.executeBatch()) {
							countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
						}
				    	
				    		insertedCount_tDBOutput_30 += countSum_tDBOutput_30;
				    	
            	    	batchSizeCounter_tDBOutput_30 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_30){
				    	java.sql.SQLException ne_tDBOutput_30 = e_tDBOutput_30.getNextException(),sqle_tDBOutput_30=null;
				    	String errormessage_tDBOutput_30;
						if (ne_tDBOutput_30 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_30 = new java.sql.SQLException(e_tDBOutput_30.getMessage() + "\ncaused by: " + ne_tDBOutput_30.getMessage(), ne_tDBOutput_30.getSQLState(), ne_tDBOutput_30.getErrorCode(), ne_tDBOutput_30);
							errormessage_tDBOutput_30 = sqle_tDBOutput_30.getMessage();
						}else{
							errormessage_tDBOutput_30 = e_tDBOutput_30.getMessage();
						}
				    	
				    	int countSum_tDBOutput_30 = 0;
						for(int countEach_tDBOutput_30: e_tDBOutput_30.getUpdateCounts()) {
							countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
						}
						
				    		insertedCount_tDBOutput_30 += countSum_tDBOutput_30;
				    	
				    	System.err.println(errormessage_tDBOutput_30);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_30++;
                if(commitEvery_tDBOutput_30 <= commitCounter_tDBOutput_30) {
                if ((batchSize_tDBOutput_30 > 0) && (batchSizeCounter_tDBOutput_30 > 0)) {
                try {
                		int countSum_tDBOutput_30 = 0;
                		    
						for(int countEach_tDBOutput_30: pstmt_tDBOutput_30.executeBatch()) {
							countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
						}
            	    	
            	    		insertedCount_tDBOutput_30 += countSum_tDBOutput_30;
            	    	
                batchSizeCounter_tDBOutput_30 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_30){
			    	java.sql.SQLException ne_tDBOutput_30 = e_tDBOutput_30.getNextException(),sqle_tDBOutput_30=null;
			    	String errormessage_tDBOutput_30;
					if (ne_tDBOutput_30 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_30 = new java.sql.SQLException(e_tDBOutput_30.getMessage() + "\ncaused by: " + ne_tDBOutput_30.getMessage(), ne_tDBOutput_30.getSQLState(), ne_tDBOutput_30.getErrorCode(), ne_tDBOutput_30);
						errormessage_tDBOutput_30 = sqle_tDBOutput_30.getMessage();
					}else{
						errormessage_tDBOutput_30 = e_tDBOutput_30.getMessage();
					}
			    	
			    	int countSum_tDBOutput_30 = 0;
					for(int countEach_tDBOutput_30: e_tDBOutput_30.getUpdateCounts()) {
						countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
					}
					
			    		insertedCount_tDBOutput_30 += countSum_tDBOutput_30;
			    	
			    	System.err.println(errormessage_tDBOutput_30);
			    	
				}
            }
                	conn_tDBOutput_30.commit();
                	
                	commitCounter_tDBOutput_30=0;
                }

 


	tos_count_tDBOutput_30++;

/**
 * [tDBOutput_30 main ] stop
 */
	
	/**
	 * [tDBOutput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_30";

	

 



/**
 * [tDBOutput_30 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_30";

	

 



/**
 * [tDBOutput_30 process_data_end ] stop
 */

} // End of branch "lkp_licauth_ins"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_53 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_53";

	

 



/**
 * [tDBInput_53 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_53 end ] start
	 */

	

	
	
	currentComponent="tDBInput_53";

	

	}
}finally{
	if (rs_tDBInput_53 != null) {
		rs_tDBInput_53.close();
	}
	if (stmt_tDBInput_53 != null) {
		stmt_tDBInput_53.close();
	}
	if(conn_tDBInput_53 != null && !conn_tDBInput_53.isClosed()) {
		
			conn_tDBInput_53.commit();
			
		
			conn_tDBInput_53.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_53_NB_LINE",nb_line_tDBInput_53);
 

ok_Hash.put("tDBInput_53", true);
end_Hash.put("tDBInput_53", System.currentTimeMillis());




/**
 * [tDBInput_53 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tDBOutput_30 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_30";

	



	    try {
				int countSum_tDBOutput_30 = 0;
				if (pstmt_tDBOutput_30 != null && batchSizeCounter_tDBOutput_30 > 0) {
						
					for(int countEach_tDBOutput_30: pstmt_tDBOutput_30.executeBatch()) {
						countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_30 += countSum_tDBOutput_30;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_30){
	    	java.sql.SQLException ne_tDBOutput_30 = e_tDBOutput_30.getNextException(),sqle_tDBOutput_30=null;
	    	String errormessage_tDBOutput_30;
			if (ne_tDBOutput_30 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_30 = new java.sql.SQLException(e_tDBOutput_30.getMessage() + "\ncaused by: " + ne_tDBOutput_30.getMessage(), ne_tDBOutput_30.getSQLState(), ne_tDBOutput_30.getErrorCode(), ne_tDBOutput_30);
				errormessage_tDBOutput_30 = sqle_tDBOutput_30.getMessage();
			}else{
				errormessage_tDBOutput_30 = e_tDBOutput_30.getMessage();
			}
	    	
	    	int countSum_tDBOutput_30 = 0;
			for(int countEach_tDBOutput_30: e_tDBOutput_30.getUpdateCounts()) {
				countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
			}
			
	    		insertedCount_tDBOutput_30 += countSum_tDBOutput_30;
	    	
	    	System.err.println(errormessage_tDBOutput_30);
	    	
		}
	    
        if(pstmt_tDBOutput_30 != null) {
        		
            pstmt_tDBOutput_30.close();
            resourceMap.remove("pstmt_tDBOutput_30");
        }
    resourceMap.put("statementClosed_tDBOutput_30", true);
			
			conn_tDBOutput_30.commit();
			
		
    	conn_tDBOutput_30 .close();
    	
    	resourceMap.put("finish_tDBOutput_30", true);
    	

	nb_line_deleted_tDBOutput_30=nb_line_deleted_tDBOutput_30+ deletedCount_tDBOutput_30;
	nb_line_update_tDBOutput_30=nb_line_update_tDBOutput_30 + updatedCount_tDBOutput_30;
	nb_line_inserted_tDBOutput_30=nb_line_inserted_tDBOutput_30 + insertedCount_tDBOutput_30;
	nb_line_rejected_tDBOutput_30=nb_line_rejected_tDBOutput_30 + rejectedCount_tDBOutput_30;
	
        globalMap.put("tDBOutput_30_NB_LINE",nb_line_tDBOutput_30);
        globalMap.put("tDBOutput_30_NB_LINE_UPDATED",nb_line_update_tDBOutput_30);
        globalMap.put("tDBOutput_30_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_30);
        globalMap.put("tDBOutput_30_NB_LINE_DELETED",nb_line_deleted_tDBOutput_30);
        globalMap.put("tDBOutput_30_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_30);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_licauth_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_30", true);
end_Hash.put("tDBOutput_30", System.currentTimeMillis());




/**
 * [tDBOutput_30 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_53:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBInput_62Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_53 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_53";

	

 



/**
 * [tDBInput_53 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tDBOutput_30 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_30";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_30") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_30 = null;
                if ((pstmtToClose_tDBOutput_30 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_30")) != null) {
                    pstmtToClose_tDBOutput_30.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_30") == null){
            java.sql.Connection ctn_tDBOutput_30 = null;
            if((ctn_tDBOutput_30 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_30")) != null){
                try {
                    ctn_tDBOutput_30.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_30) {
                    String errorMessage_tDBOutput_30 = "failed to close the connection in tDBOutput_30 :" + sqlEx_tDBOutput_30.getMessage();
                    System.err.println(errorMessage_tDBOutput_30);
                }
            }
        }
    }
 



/**
 * [tDBOutput_30 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_53_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_presstatus_insStruct implements routines.system.IPersistableRow<lkp_presstatus_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_presstatus_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_62Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_62_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
lkp_presstatus_insStruct lkp_presstatus_ins = new lkp_presstatus_insStruct();





	
	/**
	 * [tDBOutput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_31", false);
		start_Hash.put("tDBOutput_31", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_presstatus_ins");
					}
				
		int tos_count_tDBOutput_31 = 0;
		





String dbschema_tDBOutput_31 = null;
	dbschema_tDBOutput_31 = context.dmd_db_schema;
	

String tableName_tDBOutput_31 = null;
if(dbschema_tDBOutput_31 == null || dbschema_tDBOutput_31.trim().length() == 0) {
	tableName_tDBOutput_31 = ("dmd_lookup_prescribingstatus");
} else {
	tableName_tDBOutput_31 = dbschema_tDBOutput_31 + "\".\"" + ("dmd_lookup_prescribingstatus");
}

int nb_line_tDBOutput_31 = 0;
int nb_line_update_tDBOutput_31 = 0;
int nb_line_inserted_tDBOutput_31 = 0;
int nb_line_deleted_tDBOutput_31 = 0;
int nb_line_rejected_tDBOutput_31 = 0;

int deletedCount_tDBOutput_31=0;
int updatedCount_tDBOutput_31=0;
int insertedCount_tDBOutput_31=0;
int rejectedCount_tDBOutput_31=0;

boolean whetherReject_tDBOutput_31 = false;

java.sql.Connection conn_tDBOutput_31 = null;
String dbUser_tDBOutput_31 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_31 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_31 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_31 = context.dmd_db_password; 

    String dbPwd_tDBOutput_31 = decryptedPassword_tDBOutput_31;

    conn_tDBOutput_31 = java.sql.DriverManager.getConnection(url_tDBOutput_31,dbUser_tDBOutput_31,dbPwd_tDBOutput_31);
	
	resourceMap.put("conn_tDBOutput_31", conn_tDBOutput_31);
        conn_tDBOutput_31.setAutoCommit(false);
        int commitEvery_tDBOutput_31 = 10000;
        int commitCounter_tDBOutput_31 = 0;


   int batchSize_tDBOutput_31 = 10000;
   int batchSizeCounter_tDBOutput_31=0;

int count_tDBOutput_31=0;
            int rsTruncCountNumber_tDBOutput_31 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_31 = conn_tDBOutput_31.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_31 = stmtTruncCount_tDBOutput_31.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_31 + "\"")) {
                    if(rsTruncCount_tDBOutput_31.next()) {
                        rsTruncCountNumber_tDBOutput_31 = rsTruncCount_tDBOutput_31.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_31 = conn_tDBOutput_31.createStatement()) {
                stmtTrunc_tDBOutput_31.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_31 + "\"");
                deletedCount_tDBOutput_31 += rsTruncCountNumber_tDBOutput_31;
            }
	    String insert_tDBOutput_31 = "INSERT INTO \"" + tableName_tDBOutput_31 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_31 = conn_tDBOutput_31.prepareStatement(insert_tDBOutput_31);
	    resourceMap.put("pstmt_tDBOutput_31", pstmt_tDBOutput_31);
	    

 



/**
 * [tDBOutput_31 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_presstatus_insStruct lkp_presstatus_ins_tmp = new lkp_presstatus_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tDBInput_62 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_62", false);
		start_Hash.put("tDBInput_62", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_62";

	
		int tos_count_tDBInput_62 = 0;
		
	
    
	
		    int nb_line_tDBInput_62 = 0;
		    java.sql.Connection conn_tDBInput_62 = null;
				String driverClass_tDBInput_62 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_62 = java.lang.Class.forName(driverClass_tDBInput_62);
				String dbUser_tDBInput_62 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_62 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_62 = decryptedPassword_tDBInput_62;
				
				String url_tDBInput_62 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_62 = java.sql.DriverManager.getConnection(url_tDBInput_62,dbUser_tDBInput_62,dbPwd_tDBInput_62);
		        
				conn_tDBInput_62.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_62 = conn_tDBInput_62.createStatement();

		    String dbquery_tDBInput_62 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_prescribingstatus\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_prescribingstatus\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_prescribingstatus\"";
			

            	globalMap.put("tDBInput_62_QUERY",dbquery_tDBInput_62);
		    java.sql.ResultSet rs_tDBInput_62 = null;

		    try {
		    	rs_tDBInput_62 = stmt_tDBInput_62.executeQuery(dbquery_tDBInput_62);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_62 = rs_tDBInput_62.getMetaData();
		    	int colQtyInRs_tDBInput_62 = rsmd_tDBInput_62.getColumnCount();

		    String tmpContent_tDBInput_62 = null;
		    
		    
		    while (rs_tDBInput_62.next()) {
		        nb_line_tDBInput_62++;
		        
							if(colQtyInRs_tDBInput_62 < 1) {
								row45.cd = null;
							} else {
		                          
            row45.cd = rs_tDBInput_62.getLong(1);
            if(rs_tDBInput_62.wasNull()){
                    row45.cd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_62 < 2) {
								row45.desc = null;
							} else {
	                         		
        	row45.desc = routines.system.JDBCUtil.getString(rs_tDBInput_62, 2, false);
		                    }
					


 



/**
 * [tDBInput_62 begin ] stop
 */
	
	/**
	 * [tDBInput_62 main ] start
	 */

	

	
	
	currentComponent="tDBInput_62";

	

 


	tos_count_tDBInput_62++;

/**
 * [tDBInput_62 main ] stop
 */
	
	/**
	 * [tDBInput_62 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_62";

	

 



/**
 * [tDBInput_62 process_data_begin ] stop
 */

	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row45");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

lkp_presstatus_ins = null;


// # Output table : 'lkp_presstatus_ins'
lkp_presstatus_ins_tmp.cd = row45.cd;
lkp_presstatus_ins_tmp.desc = row45.desc;
lkp_presstatus_ins = lkp_presstatus_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "lkp_presstatus_ins"
if(lkp_presstatus_ins != null) { 



	
	/**
	 * [tDBOutput_31 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_presstatus_ins");
					}
					



        whetherReject_tDBOutput_31 = false;
                    if(lkp_presstatus_ins.cd == null) {
pstmt_tDBOutput_31.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_31.setLong(1, lkp_presstatus_ins.cd);
}

                    if(lkp_presstatus_ins.desc == null) {
pstmt_tDBOutput_31.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_31.setString(2, lkp_presstatus_ins.desc);
}

			
    		pstmt_tDBOutput_31.addBatch();
    		nb_line_tDBOutput_31++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_31++;
    		  
    			if ((batchSize_tDBOutput_31 > 0) && (batchSize_tDBOutput_31 <= batchSizeCounter_tDBOutput_31)) {
                try {
						int countSum_tDBOutput_31 = 0;
						    
						for(int countEach_tDBOutput_31: pstmt_tDBOutput_31.executeBatch()) {
							countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
						}
				    	
				    		insertedCount_tDBOutput_31 += countSum_tDBOutput_31;
				    	
            	    	batchSizeCounter_tDBOutput_31 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_31){
				    	java.sql.SQLException ne_tDBOutput_31 = e_tDBOutput_31.getNextException(),sqle_tDBOutput_31=null;
				    	String errormessage_tDBOutput_31;
						if (ne_tDBOutput_31 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_31 = new java.sql.SQLException(e_tDBOutput_31.getMessage() + "\ncaused by: " + ne_tDBOutput_31.getMessage(), ne_tDBOutput_31.getSQLState(), ne_tDBOutput_31.getErrorCode(), ne_tDBOutput_31);
							errormessage_tDBOutput_31 = sqle_tDBOutput_31.getMessage();
						}else{
							errormessage_tDBOutput_31 = e_tDBOutput_31.getMessage();
						}
				    	
				    	int countSum_tDBOutput_31 = 0;
						for(int countEach_tDBOutput_31: e_tDBOutput_31.getUpdateCounts()) {
							countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
						}
						
				    		insertedCount_tDBOutput_31 += countSum_tDBOutput_31;
				    	
				    	System.err.println(errormessage_tDBOutput_31);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_31++;
                if(commitEvery_tDBOutput_31 <= commitCounter_tDBOutput_31) {
                if ((batchSize_tDBOutput_31 > 0) && (batchSizeCounter_tDBOutput_31 > 0)) {
                try {
                		int countSum_tDBOutput_31 = 0;
                		    
						for(int countEach_tDBOutput_31: pstmt_tDBOutput_31.executeBatch()) {
							countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
						}
            	    	
            	    		insertedCount_tDBOutput_31 += countSum_tDBOutput_31;
            	    	
                batchSizeCounter_tDBOutput_31 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_31){
			    	java.sql.SQLException ne_tDBOutput_31 = e_tDBOutput_31.getNextException(),sqle_tDBOutput_31=null;
			    	String errormessage_tDBOutput_31;
					if (ne_tDBOutput_31 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_31 = new java.sql.SQLException(e_tDBOutput_31.getMessage() + "\ncaused by: " + ne_tDBOutput_31.getMessage(), ne_tDBOutput_31.getSQLState(), ne_tDBOutput_31.getErrorCode(), ne_tDBOutput_31);
						errormessage_tDBOutput_31 = sqle_tDBOutput_31.getMessage();
					}else{
						errormessage_tDBOutput_31 = e_tDBOutput_31.getMessage();
					}
			    	
			    	int countSum_tDBOutput_31 = 0;
					for(int countEach_tDBOutput_31: e_tDBOutput_31.getUpdateCounts()) {
						countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
					}
					
			    		insertedCount_tDBOutput_31 += countSum_tDBOutput_31;
			    	
			    	System.err.println(errormessage_tDBOutput_31);
			    	
				}
            }
                	conn_tDBOutput_31.commit();
                	
                	commitCounter_tDBOutput_31=0;
                }

 


	tos_count_tDBOutput_31++;

/**
 * [tDBOutput_31 main ] stop
 */
	
	/**
	 * [tDBOutput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_31";

	

 



/**
 * [tDBOutput_31 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_31";

	

 



/**
 * [tDBOutput_31 process_data_end ] stop
 */

} // End of branch "lkp_presstatus_ins"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_62 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_62";

	

 



/**
 * [tDBInput_62 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_62 end ] start
	 */

	

	
	
	currentComponent="tDBInput_62";

	

	}
}finally{
	if (rs_tDBInput_62 != null) {
		rs_tDBInput_62.close();
	}
	if (stmt_tDBInput_62 != null) {
		stmt_tDBInput_62.close();
	}
	if(conn_tDBInput_62 != null && !conn_tDBInput_62.isClosed()) {
		
			conn_tDBInput_62.commit();
			
		
			conn_tDBInput_62.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_62_NB_LINE",nb_line_tDBInput_62);
 

ok_Hash.put("tDBInput_62", true);
end_Hash.put("tDBInput_62", System.currentTimeMillis());




/**
 * [tDBInput_62 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tDBOutput_31 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_31";

	



	    try {
				int countSum_tDBOutput_31 = 0;
				if (pstmt_tDBOutput_31 != null && batchSizeCounter_tDBOutput_31 > 0) {
						
					for(int countEach_tDBOutput_31: pstmt_tDBOutput_31.executeBatch()) {
						countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_31 += countSum_tDBOutput_31;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_31){
	    	java.sql.SQLException ne_tDBOutput_31 = e_tDBOutput_31.getNextException(),sqle_tDBOutput_31=null;
	    	String errormessage_tDBOutput_31;
			if (ne_tDBOutput_31 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_31 = new java.sql.SQLException(e_tDBOutput_31.getMessage() + "\ncaused by: " + ne_tDBOutput_31.getMessage(), ne_tDBOutput_31.getSQLState(), ne_tDBOutput_31.getErrorCode(), ne_tDBOutput_31);
				errormessage_tDBOutput_31 = sqle_tDBOutput_31.getMessage();
			}else{
				errormessage_tDBOutput_31 = e_tDBOutput_31.getMessage();
			}
	    	
	    	int countSum_tDBOutput_31 = 0;
			for(int countEach_tDBOutput_31: e_tDBOutput_31.getUpdateCounts()) {
				countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
			}
			
	    		insertedCount_tDBOutput_31 += countSum_tDBOutput_31;
	    	
	    	System.err.println(errormessage_tDBOutput_31);
	    	
		}
	    
        if(pstmt_tDBOutput_31 != null) {
        		
            pstmt_tDBOutput_31.close();
            resourceMap.remove("pstmt_tDBOutput_31");
        }
    resourceMap.put("statementClosed_tDBOutput_31", true);
			
			conn_tDBOutput_31.commit();
			
		
    	conn_tDBOutput_31 .close();
    	
    	resourceMap.put("finish_tDBOutput_31", true);
    	

	nb_line_deleted_tDBOutput_31=nb_line_deleted_tDBOutput_31+ deletedCount_tDBOutput_31;
	nb_line_update_tDBOutput_31=nb_line_update_tDBOutput_31 + updatedCount_tDBOutput_31;
	nb_line_inserted_tDBOutput_31=nb_line_inserted_tDBOutput_31 + insertedCount_tDBOutput_31;
	nb_line_rejected_tDBOutput_31=nb_line_rejected_tDBOutput_31 + rejectedCount_tDBOutput_31;
	
        globalMap.put("tDBOutput_31_NB_LINE",nb_line_tDBOutput_31);
        globalMap.put("tDBOutput_31_NB_LINE_UPDATED",nb_line_update_tDBOutput_31);
        globalMap.put("tDBOutput_31_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_31);
        globalMap.put("tDBOutput_31_NB_LINE_DELETED",nb_line_deleted_tDBOutput_31);
        globalMap.put("tDBOutput_31_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_31);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_presstatus_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_31", true);
end_Hash.put("tDBOutput_31", System.currentTimeMillis());




/**
 * [tDBOutput_31 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_62:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tDBInput_73Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_62 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_62";

	

 



/**
 * [tDBInput_62 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tDBOutput_31 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_31";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_31") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_31 = null;
                if ((pstmtToClose_tDBOutput_31 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_31")) != null) {
                    pstmtToClose_tDBOutput_31.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_31") == null){
            java.sql.Connection ctn_tDBOutput_31 = null;
            if((ctn_tDBOutput_31 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_31")) != null){
                try {
                    ctn_tDBOutput_31.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_31) {
                    String errorMessage_tDBOutput_31 = "failed to close the connection in tDBOutput_31 :" + sqlEx_tDBOutput_31.getMessage();
                    System.err.println(errorMessage_tDBOutput_31);
                }
            }
        }
    }
 



/**
 * [tDBOutput_31 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_62_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_route_insStruct implements routines.system.IPersistableRow<lkp_route_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_route_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
					this.source = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// String
				
						writeString(this.source,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
		sb.append(",source="+source);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_73Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_73_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();
lkp_route_insStruct lkp_route_ins = new lkp_route_insStruct();





	
	/**
	 * [tDBOutput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_32", false);
		start_Hash.put("tDBOutput_32", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_route_ins");
					}
				
		int tos_count_tDBOutput_32 = 0;
		





String dbschema_tDBOutput_32 = null;
	dbschema_tDBOutput_32 = context.dmd_db_schema;
	

String tableName_tDBOutput_32 = null;
if(dbschema_tDBOutput_32 == null || dbschema_tDBOutput_32.trim().length() == 0) {
	tableName_tDBOutput_32 = ("dmd_lookup_route");
} else {
	tableName_tDBOutput_32 = dbschema_tDBOutput_32 + "\".\"" + ("dmd_lookup_route");
}

int nb_line_tDBOutput_32 = 0;
int nb_line_update_tDBOutput_32 = 0;
int nb_line_inserted_tDBOutput_32 = 0;
int nb_line_deleted_tDBOutput_32 = 0;
int nb_line_rejected_tDBOutput_32 = 0;

int deletedCount_tDBOutput_32=0;
int updatedCount_tDBOutput_32=0;
int insertedCount_tDBOutput_32=0;
int rejectedCount_tDBOutput_32=0;

boolean whetherReject_tDBOutput_32 = false;

java.sql.Connection conn_tDBOutput_32 = null;
String dbUser_tDBOutput_32 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_32 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_32 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_32 = context.dmd_db_password; 

    String dbPwd_tDBOutput_32 = decryptedPassword_tDBOutput_32;

    conn_tDBOutput_32 = java.sql.DriverManager.getConnection(url_tDBOutput_32,dbUser_tDBOutput_32,dbPwd_tDBOutput_32);
	
	resourceMap.put("conn_tDBOutput_32", conn_tDBOutput_32);
        conn_tDBOutput_32.setAutoCommit(false);
        int commitEvery_tDBOutput_32 = 10000;
        int commitCounter_tDBOutput_32 = 0;


   int batchSize_tDBOutput_32 = 10000;
   int batchSizeCounter_tDBOutput_32=0;

int count_tDBOutput_32=0;
            int rsTruncCountNumber_tDBOutput_32 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_32 = conn_tDBOutput_32.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_32 = stmtTruncCount_tDBOutput_32.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_32 + "\"")) {
                    if(rsTruncCount_tDBOutput_32.next()) {
                        rsTruncCountNumber_tDBOutput_32 = rsTruncCount_tDBOutput_32.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_32 = conn_tDBOutput_32.createStatement()) {
                stmtTrunc_tDBOutput_32.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_32 + "\"");
                deletedCount_tDBOutput_32 += rsTruncCountNumber_tDBOutput_32;
            }
	    String insert_tDBOutput_32 = "INSERT INTO \"" + tableName_tDBOutput_32 + "\" (\"cd\",\"cddt\",\"cdprev\",\"desc\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_32 = conn_tDBOutput_32.prepareStatement(insert_tDBOutput_32);
	    resourceMap.put("pstmt_tDBOutput_32", pstmt_tDBOutput_32);
	    

 



/**
 * [tDBOutput_32 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_route_insStruct lkp_route_ins_tmp = new lkp_route_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tDBInput_73 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_73", false);
		start_Hash.put("tDBInput_73", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_73";

	
		int tos_count_tDBInput_73 = 0;
		
	
    
	
		    int nb_line_tDBInput_73 = 0;
		    java.sql.Connection conn_tDBInput_73 = null;
				String driverClass_tDBInput_73 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_73 = java.lang.Class.forName(driverClass_tDBInput_73);
				String dbUser_tDBInput_73 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_73 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_73 = decryptedPassword_tDBInput_73;
				
				String url_tDBInput_73 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_73 = java.sql.DriverManager.getConnection(url_tDBInput_73,dbUser_tDBInput_73,dbPwd_tDBInput_73);
		        
				conn_tDBInput_73.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_73 = conn_tDBInput_73.createStatement();

		    String dbquery_tDBInput_73 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_route\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_route\".\"cddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_route\".\"cdprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_route\".\"desc\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_route\".\"source\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_route\"";
			

            	globalMap.put("tDBInput_73_QUERY",dbquery_tDBInput_73);
		    java.sql.ResultSet rs_tDBInput_73 = null;

		    try {
		    	rs_tDBInput_73 = stmt_tDBInput_73.executeQuery(dbquery_tDBInput_73);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_73 = rs_tDBInput_73.getMetaData();
		    	int colQtyInRs_tDBInput_73 = rsmd_tDBInput_73.getColumnCount();

		    String tmpContent_tDBInput_73 = null;
		    
		    
		    while (rs_tDBInput_73.next()) {
		        nb_line_tDBInput_73++;
		        
							if(colQtyInRs_tDBInput_73 < 1) {
								row46.cd = null;
							} else {
	                         		
        	row46.cd = routines.system.JDBCUtil.getString(rs_tDBInput_73, 1, false);
		                    }
							if(colQtyInRs_tDBInput_73 < 2) {
								row46.cddt = null;
							} else {
										
			row46.cddt = routines.system.JDBCUtil.getDate(rs_tDBInput_73, 2);
		                    }
							if(colQtyInRs_tDBInput_73 < 3) {
								row46.cdprev = null;
							} else {
	                         		
        	row46.cdprev = routines.system.JDBCUtil.getString(rs_tDBInput_73, 3, false);
		                    }
							if(colQtyInRs_tDBInput_73 < 4) {
								row46.desc = null;
							} else {
	                         		
        	row46.desc = routines.system.JDBCUtil.getString(rs_tDBInput_73, 4, false);
		                    }
							if(colQtyInRs_tDBInput_73 < 5) {
								row46.source = null;
							} else {
	                         		
        	row46.source = routines.system.JDBCUtil.getString(rs_tDBInput_73, 5, false);
		                    }
					


 



/**
 * [tDBInput_73 begin ] stop
 */
	
	/**
	 * [tDBInput_73 main ] start
	 */

	

	
	
	currentComponent="tDBInput_73";

	

 


	tos_count_tDBInput_73++;

/**
 * [tDBInput_73 main ] stop
 */
	
	/**
	 * [tDBInput_73 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_73";

	

 



/**
 * [tDBInput_73 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row46");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

lkp_route_ins = null;


// # Output table : 'lkp_route_ins'
lkp_route_ins_tmp.cd = row46.cd;
lkp_route_ins_tmp.cddt = row46.cddt;
lkp_route_ins_tmp.cdprev = row46.cdprev;
lkp_route_ins_tmp.desc = row46.desc;
lkp_route_ins = lkp_route_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "lkp_route_ins"
if(lkp_route_ins != null) { 



	
	/**
	 * [tDBOutput_32 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_route_ins");
					}
					



        whetherReject_tDBOutput_32 = false;
                    if(lkp_route_ins.cd == null) {
pstmt_tDBOutput_32.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_32.setString(1, lkp_route_ins.cd);
}

                    if(lkp_route_ins.cddt != null) {
pstmt_tDBOutput_32.setTimestamp(2, new java.sql.Timestamp(lkp_route_ins.cddt.getTime()));
} else {
pstmt_tDBOutput_32.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(lkp_route_ins.cdprev == null) {
pstmt_tDBOutput_32.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_32.setString(3, lkp_route_ins.cdprev);
}

                    if(lkp_route_ins.desc == null) {
pstmt_tDBOutput_32.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_32.setString(4, lkp_route_ins.desc);
}

			
    		pstmt_tDBOutput_32.addBatch();
    		nb_line_tDBOutput_32++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_32++;
    		  
    			if ((batchSize_tDBOutput_32 > 0) && (batchSize_tDBOutput_32 <= batchSizeCounter_tDBOutput_32)) {
                try {
						int countSum_tDBOutput_32 = 0;
						    
						for(int countEach_tDBOutput_32: pstmt_tDBOutput_32.executeBatch()) {
							countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
						}
				    	
				    		insertedCount_tDBOutput_32 += countSum_tDBOutput_32;
				    	
            	    	batchSizeCounter_tDBOutput_32 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_32){
				    	java.sql.SQLException ne_tDBOutput_32 = e_tDBOutput_32.getNextException(),sqle_tDBOutput_32=null;
				    	String errormessage_tDBOutput_32;
						if (ne_tDBOutput_32 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_32 = new java.sql.SQLException(e_tDBOutput_32.getMessage() + "\ncaused by: " + ne_tDBOutput_32.getMessage(), ne_tDBOutput_32.getSQLState(), ne_tDBOutput_32.getErrorCode(), ne_tDBOutput_32);
							errormessage_tDBOutput_32 = sqle_tDBOutput_32.getMessage();
						}else{
							errormessage_tDBOutput_32 = e_tDBOutput_32.getMessage();
						}
				    	
				    	int countSum_tDBOutput_32 = 0;
						for(int countEach_tDBOutput_32: e_tDBOutput_32.getUpdateCounts()) {
							countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
						}
						
				    		insertedCount_tDBOutput_32 += countSum_tDBOutput_32;
				    	
				    	System.err.println(errormessage_tDBOutput_32);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_32++;
                if(commitEvery_tDBOutput_32 <= commitCounter_tDBOutput_32) {
                if ((batchSize_tDBOutput_32 > 0) && (batchSizeCounter_tDBOutput_32 > 0)) {
                try {
                		int countSum_tDBOutput_32 = 0;
                		    
						for(int countEach_tDBOutput_32: pstmt_tDBOutput_32.executeBatch()) {
							countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
						}
            	    	
            	    		insertedCount_tDBOutput_32 += countSum_tDBOutput_32;
            	    	
                batchSizeCounter_tDBOutput_32 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_32){
			    	java.sql.SQLException ne_tDBOutput_32 = e_tDBOutput_32.getNextException(),sqle_tDBOutput_32=null;
			    	String errormessage_tDBOutput_32;
					if (ne_tDBOutput_32 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_32 = new java.sql.SQLException(e_tDBOutput_32.getMessage() + "\ncaused by: " + ne_tDBOutput_32.getMessage(), ne_tDBOutput_32.getSQLState(), ne_tDBOutput_32.getErrorCode(), ne_tDBOutput_32);
						errormessage_tDBOutput_32 = sqle_tDBOutput_32.getMessage();
					}else{
						errormessage_tDBOutput_32 = e_tDBOutput_32.getMessage();
					}
			    	
			    	int countSum_tDBOutput_32 = 0;
					for(int countEach_tDBOutput_32: e_tDBOutput_32.getUpdateCounts()) {
						countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
					}
					
			    		insertedCount_tDBOutput_32 += countSum_tDBOutput_32;
			    	
			    	System.err.println(errormessage_tDBOutput_32);
			    	
				}
            }
                	conn_tDBOutput_32.commit();
                	
                	commitCounter_tDBOutput_32=0;
                }

 


	tos_count_tDBOutput_32++;

/**
 * [tDBOutput_32 main ] stop
 */
	
	/**
	 * [tDBOutput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_32";

	

 



/**
 * [tDBOutput_32 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_32";

	

 



/**
 * [tDBOutput_32 process_data_end ] stop
 */

} // End of branch "lkp_route_ins"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_73 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_73";

	

 



/**
 * [tDBInput_73 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_73 end ] start
	 */

	

	
	
	currentComponent="tDBInput_73";

	

	}
}finally{
	if (rs_tDBInput_73 != null) {
		rs_tDBInput_73.close();
	}
	if (stmt_tDBInput_73 != null) {
		stmt_tDBInput_73.close();
	}
	if(conn_tDBInput_73 != null && !conn_tDBInput_73.isClosed()) {
		
			conn_tDBInput_73.commit();
			
		
			conn_tDBInput_73.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_73_NB_LINE",nb_line_tDBInput_73);
 

ok_Hash.put("tDBInput_73", true);
end_Hash.put("tDBInput_73", System.currentTimeMillis());




/**
 * [tDBInput_73 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tDBOutput_32 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_32";

	



	    try {
				int countSum_tDBOutput_32 = 0;
				if (pstmt_tDBOutput_32 != null && batchSizeCounter_tDBOutput_32 > 0) {
						
					for(int countEach_tDBOutput_32: pstmt_tDBOutput_32.executeBatch()) {
						countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_32 += countSum_tDBOutput_32;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_32){
	    	java.sql.SQLException ne_tDBOutput_32 = e_tDBOutput_32.getNextException(),sqle_tDBOutput_32=null;
	    	String errormessage_tDBOutput_32;
			if (ne_tDBOutput_32 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_32 = new java.sql.SQLException(e_tDBOutput_32.getMessage() + "\ncaused by: " + ne_tDBOutput_32.getMessage(), ne_tDBOutput_32.getSQLState(), ne_tDBOutput_32.getErrorCode(), ne_tDBOutput_32);
				errormessage_tDBOutput_32 = sqle_tDBOutput_32.getMessage();
			}else{
				errormessage_tDBOutput_32 = e_tDBOutput_32.getMessage();
			}
	    	
	    	int countSum_tDBOutput_32 = 0;
			for(int countEach_tDBOutput_32: e_tDBOutput_32.getUpdateCounts()) {
				countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
			}
			
	    		insertedCount_tDBOutput_32 += countSum_tDBOutput_32;
	    	
	    	System.err.println(errormessage_tDBOutput_32);
	    	
		}
	    
        if(pstmt_tDBOutput_32 != null) {
        		
            pstmt_tDBOutput_32.close();
            resourceMap.remove("pstmt_tDBOutput_32");
        }
    resourceMap.put("statementClosed_tDBOutput_32", true);
			
			conn_tDBOutput_32.commit();
			
		
    	conn_tDBOutput_32 .close();
    	
    	resourceMap.put("finish_tDBOutput_32", true);
    	

	nb_line_deleted_tDBOutput_32=nb_line_deleted_tDBOutput_32+ deletedCount_tDBOutput_32;
	nb_line_update_tDBOutput_32=nb_line_update_tDBOutput_32 + updatedCount_tDBOutput_32;
	nb_line_inserted_tDBOutput_32=nb_line_inserted_tDBOutput_32 + insertedCount_tDBOutput_32;
	nb_line_rejected_tDBOutput_32=nb_line_rejected_tDBOutput_32 + rejectedCount_tDBOutput_32;
	
        globalMap.put("tDBOutput_32_NB_LINE",nb_line_tDBOutput_32);
        globalMap.put("tDBOutput_32_NB_LINE_UPDATED",nb_line_update_tDBOutput_32);
        globalMap.put("tDBOutput_32_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_32);
        globalMap.put("tDBOutput_32_NB_LINE_DELETED",nb_line_deleted_tDBOutput_32);
        globalMap.put("tDBOutput_32_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_32);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_route_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_32", true);
end_Hash.put("tDBOutput_32", System.currentTimeMillis());




/**
 * [tDBOutput_32 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_73:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tDBInput_76Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_73 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_73";

	

 



/**
 * [tDBInput_73 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tDBOutput_32 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_32";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_32") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_32 = null;
                if ((pstmtToClose_tDBOutput_32 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_32")) != null) {
                    pstmtToClose_tDBOutput_32.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_32") == null){
            java.sql.Connection ctn_tDBOutput_32 = null;
            if((ctn_tDBOutput_32 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_32")) != null){
                try {
                    ctn_tDBOutput_32.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_32) {
                    String errorMessage_tDBOutput_32 = "failed to close the connection in tDBOutput_32 :" + sqlEx_tDBOutput_32.getMessage();
                    System.err.println(errorMessage_tDBOutput_32);
                }
            }
        }
    }
 



/**
 * [tDBOutput_32 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_73_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_supplier_insStruct implements routines.system.IPersistableRow<lkp_supplier_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_supplier_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_76Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_76_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row47Struct row47 = new row47Struct();
lkp_supplier_insStruct lkp_supplier_ins = new lkp_supplier_insStruct();





	
	/**
	 * [tDBOutput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_33", false);
		start_Hash.put("tDBOutput_33", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_33";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_supplier_ins");
					}
				
		int tos_count_tDBOutput_33 = 0;
		





String dbschema_tDBOutput_33 = null;
	dbschema_tDBOutput_33 = context.dmd_db_schema;
	

String tableName_tDBOutput_33 = null;
if(dbschema_tDBOutput_33 == null || dbschema_tDBOutput_33.trim().length() == 0) {
	tableName_tDBOutput_33 = ("dmd_lookup_supplier");
} else {
	tableName_tDBOutput_33 = dbschema_tDBOutput_33 + "\".\"" + ("dmd_lookup_supplier");
}

int nb_line_tDBOutput_33 = 0;
int nb_line_update_tDBOutput_33 = 0;
int nb_line_inserted_tDBOutput_33 = 0;
int nb_line_deleted_tDBOutput_33 = 0;
int nb_line_rejected_tDBOutput_33 = 0;

int deletedCount_tDBOutput_33=0;
int updatedCount_tDBOutput_33=0;
int insertedCount_tDBOutput_33=0;
int rejectedCount_tDBOutput_33=0;

boolean whetherReject_tDBOutput_33 = false;

java.sql.Connection conn_tDBOutput_33 = null;
String dbUser_tDBOutput_33 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_33 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_33 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_33 = context.dmd_db_password; 

    String dbPwd_tDBOutput_33 = decryptedPassword_tDBOutput_33;

    conn_tDBOutput_33 = java.sql.DriverManager.getConnection(url_tDBOutput_33,dbUser_tDBOutput_33,dbPwd_tDBOutput_33);
	
	resourceMap.put("conn_tDBOutput_33", conn_tDBOutput_33);
        conn_tDBOutput_33.setAutoCommit(false);
        int commitEvery_tDBOutput_33 = 10000;
        int commitCounter_tDBOutput_33 = 0;


   int batchSize_tDBOutput_33 = 10000;
   int batchSizeCounter_tDBOutput_33=0;

int count_tDBOutput_33=0;
            int rsTruncCountNumber_tDBOutput_33 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_33 = conn_tDBOutput_33.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_33 = stmtTruncCount_tDBOutput_33.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_33 + "\"")) {
                    if(rsTruncCount_tDBOutput_33.next()) {
                        rsTruncCountNumber_tDBOutput_33 = rsTruncCount_tDBOutput_33.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_33 = conn_tDBOutput_33.createStatement()) {
                stmtTrunc_tDBOutput_33.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_33 + "\"");
                deletedCount_tDBOutput_33 += rsTruncCountNumber_tDBOutput_33;
            }
	    String insert_tDBOutput_33 = "INSERT INTO \"" + tableName_tDBOutput_33 + "\" (\"cd\",\"cddt\",\"cdprev\",\"invalid\",\"desc\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_33 = conn_tDBOutput_33.prepareStatement(insert_tDBOutput_33);
	    resourceMap.put("pstmt_tDBOutput_33", pstmt_tDBOutput_33);
	    

 



/**
 * [tDBOutput_33 begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_supplier_insStruct lkp_supplier_ins_tmp = new lkp_supplier_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tDBInput_76 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_76", false);
		start_Hash.put("tDBInput_76", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_76";

	
		int tos_count_tDBInput_76 = 0;
		
	
    
	
		    int nb_line_tDBInput_76 = 0;
		    java.sql.Connection conn_tDBInput_76 = null;
				String driverClass_tDBInput_76 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_76 = java.lang.Class.forName(driverClass_tDBInput_76);
				String dbUser_tDBInput_76 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_76 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_76 = decryptedPassword_tDBInput_76;
				
				String url_tDBInput_76 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_76 = java.sql.DriverManager.getConnection(url_tDBInput_76,dbUser_tDBInput_76,dbPwd_tDBInput_76);
		        
				conn_tDBInput_76.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_76 = conn_tDBInput_76.createStatement();

		    String dbquery_tDBInput_76 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_supplier\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_supplier\".\"cddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_supplier\".\"cdprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_supplier\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_supplier\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_supplier\"";
			

            	globalMap.put("tDBInput_76_QUERY",dbquery_tDBInput_76);
		    java.sql.ResultSet rs_tDBInput_76 = null;

		    try {
		    	rs_tDBInput_76 = stmt_tDBInput_76.executeQuery(dbquery_tDBInput_76);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_76 = rs_tDBInput_76.getMetaData();
		    	int colQtyInRs_tDBInput_76 = rsmd_tDBInput_76.getColumnCount();

		    String tmpContent_tDBInput_76 = null;
		    
		    
		    while (rs_tDBInput_76.next()) {
		        nb_line_tDBInput_76++;
		        
							if(colQtyInRs_tDBInput_76 < 1) {
								row47.cd = null;
							} else {
	                         		
        	row47.cd = routines.system.JDBCUtil.getString(rs_tDBInput_76, 1, false);
		                    }
							if(colQtyInRs_tDBInput_76 < 2) {
								row47.cddt = null;
							} else {
										
			row47.cddt = routines.system.JDBCUtil.getDate(rs_tDBInput_76, 2);
		                    }
							if(colQtyInRs_tDBInput_76 < 3) {
								row47.cdprev = null;
							} else {
	                         		
        	row47.cdprev = routines.system.JDBCUtil.getString(rs_tDBInput_76, 3, false);
		                    }
							if(colQtyInRs_tDBInput_76 < 4) {
								row47.invalid = null;
							} else {
		                          
            row47.invalid = rs_tDBInput_76.getShort(4);
            if(rs_tDBInput_76.wasNull()){
                    row47.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_76 < 5) {
								row47.desc = null;
							} else {
	                         		
        	row47.desc = routines.system.JDBCUtil.getString(rs_tDBInput_76, 5, false);
		                    }
					


 



/**
 * [tDBInput_76 begin ] stop
 */
	
	/**
	 * [tDBInput_76 main ] start
	 */

	

	
	
	currentComponent="tDBInput_76";

	

 


	tos_count_tDBInput_76++;

/**
 * [tDBInput_76 main ] stop
 */
	
	/**
	 * [tDBInput_76 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_76";

	

 



/**
 * [tDBInput_76 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row47");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

lkp_supplier_ins = null;


// # Output table : 'lkp_supplier_ins'
lkp_supplier_ins_tmp.cd = row47.cd;
lkp_supplier_ins_tmp.cddt = row47.cddt;
lkp_supplier_ins_tmp.cdprev = row47.cdprev;
lkp_supplier_ins_tmp.invalid = row47.invalid;
lkp_supplier_ins_tmp.desc = row47.desc;
lkp_supplier_ins = lkp_supplier_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "lkp_supplier_ins"
if(lkp_supplier_ins != null) { 



	
	/**
	 * [tDBOutput_33 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_33";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_supplier_ins");
					}
					



        whetherReject_tDBOutput_33 = false;
                    if(lkp_supplier_ins.cd == null) {
pstmt_tDBOutput_33.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_33.setString(1, lkp_supplier_ins.cd);
}

                    if(lkp_supplier_ins.cddt != null) {
pstmt_tDBOutput_33.setTimestamp(2, new java.sql.Timestamp(lkp_supplier_ins.cddt.getTime()));
} else {
pstmt_tDBOutput_33.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(lkp_supplier_ins.cdprev == null) {
pstmt_tDBOutput_33.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_33.setString(3, lkp_supplier_ins.cdprev);
}

                    if(lkp_supplier_ins.invalid == null) {
pstmt_tDBOutput_33.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_33.setShort(4, lkp_supplier_ins.invalid);
}

                    if(lkp_supplier_ins.desc == null) {
pstmt_tDBOutput_33.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_33.setString(5, lkp_supplier_ins.desc);
}

			
    		pstmt_tDBOutput_33.addBatch();
    		nb_line_tDBOutput_33++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_33++;
    		  
    			if ((batchSize_tDBOutput_33 > 0) && (batchSize_tDBOutput_33 <= batchSizeCounter_tDBOutput_33)) {
                try {
						int countSum_tDBOutput_33 = 0;
						    
						for(int countEach_tDBOutput_33: pstmt_tDBOutput_33.executeBatch()) {
							countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
						}
				    	
				    		insertedCount_tDBOutput_33 += countSum_tDBOutput_33;
				    	
            	    	batchSizeCounter_tDBOutput_33 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_33){
				    	java.sql.SQLException ne_tDBOutput_33 = e_tDBOutput_33.getNextException(),sqle_tDBOutput_33=null;
				    	String errormessage_tDBOutput_33;
						if (ne_tDBOutput_33 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_33 = new java.sql.SQLException(e_tDBOutput_33.getMessage() + "\ncaused by: " + ne_tDBOutput_33.getMessage(), ne_tDBOutput_33.getSQLState(), ne_tDBOutput_33.getErrorCode(), ne_tDBOutput_33);
							errormessage_tDBOutput_33 = sqle_tDBOutput_33.getMessage();
						}else{
							errormessage_tDBOutput_33 = e_tDBOutput_33.getMessage();
						}
				    	
				    	int countSum_tDBOutput_33 = 0;
						for(int countEach_tDBOutput_33: e_tDBOutput_33.getUpdateCounts()) {
							countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
						}
						
				    		insertedCount_tDBOutput_33 += countSum_tDBOutput_33;
				    	
				    	System.err.println(errormessage_tDBOutput_33);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_33++;
                if(commitEvery_tDBOutput_33 <= commitCounter_tDBOutput_33) {
                if ((batchSize_tDBOutput_33 > 0) && (batchSizeCounter_tDBOutput_33 > 0)) {
                try {
                		int countSum_tDBOutput_33 = 0;
                		    
						for(int countEach_tDBOutput_33: pstmt_tDBOutput_33.executeBatch()) {
							countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
						}
            	    	
            	    		insertedCount_tDBOutput_33 += countSum_tDBOutput_33;
            	    	
                batchSizeCounter_tDBOutput_33 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_33){
			    	java.sql.SQLException ne_tDBOutput_33 = e_tDBOutput_33.getNextException(),sqle_tDBOutput_33=null;
			    	String errormessage_tDBOutput_33;
					if (ne_tDBOutput_33 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_33 = new java.sql.SQLException(e_tDBOutput_33.getMessage() + "\ncaused by: " + ne_tDBOutput_33.getMessage(), ne_tDBOutput_33.getSQLState(), ne_tDBOutput_33.getErrorCode(), ne_tDBOutput_33);
						errormessage_tDBOutput_33 = sqle_tDBOutput_33.getMessage();
					}else{
						errormessage_tDBOutput_33 = e_tDBOutput_33.getMessage();
					}
			    	
			    	int countSum_tDBOutput_33 = 0;
					for(int countEach_tDBOutput_33: e_tDBOutput_33.getUpdateCounts()) {
						countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
					}
					
			    		insertedCount_tDBOutput_33 += countSum_tDBOutput_33;
			    	
			    	System.err.println(errormessage_tDBOutput_33);
			    	
				}
            }
                	conn_tDBOutput_33.commit();
                	
                	commitCounter_tDBOutput_33=0;
                }

 


	tos_count_tDBOutput_33++;

/**
 * [tDBOutput_33 main ] stop
 */
	
	/**
	 * [tDBOutput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_33";

	

 



/**
 * [tDBOutput_33 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_33";

	

 



/**
 * [tDBOutput_33 process_data_end ] stop
 */

} // End of branch "lkp_supplier_ins"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_76 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_76";

	

 



/**
 * [tDBInput_76 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_76 end ] start
	 */

	

	
	
	currentComponent="tDBInput_76";

	

	}
}finally{
	if (rs_tDBInput_76 != null) {
		rs_tDBInput_76.close();
	}
	if (stmt_tDBInput_76 != null) {
		stmt_tDBInput_76.close();
	}
	if(conn_tDBInput_76 != null && !conn_tDBInput_76.isClosed()) {
		
			conn_tDBInput_76.commit();
			
		
			conn_tDBInput_76.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_76_NB_LINE",nb_line_tDBInput_76);
 

ok_Hash.put("tDBInput_76", true);
end_Hash.put("tDBInput_76", System.currentTimeMillis());




/**
 * [tDBInput_76 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tDBOutput_33 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_33";

	



	    try {
				int countSum_tDBOutput_33 = 0;
				if (pstmt_tDBOutput_33 != null && batchSizeCounter_tDBOutput_33 > 0) {
						
					for(int countEach_tDBOutput_33: pstmt_tDBOutput_33.executeBatch()) {
						countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_33 += countSum_tDBOutput_33;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_33){
	    	java.sql.SQLException ne_tDBOutput_33 = e_tDBOutput_33.getNextException(),sqle_tDBOutput_33=null;
	    	String errormessage_tDBOutput_33;
			if (ne_tDBOutput_33 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_33 = new java.sql.SQLException(e_tDBOutput_33.getMessage() + "\ncaused by: " + ne_tDBOutput_33.getMessage(), ne_tDBOutput_33.getSQLState(), ne_tDBOutput_33.getErrorCode(), ne_tDBOutput_33);
				errormessage_tDBOutput_33 = sqle_tDBOutput_33.getMessage();
			}else{
				errormessage_tDBOutput_33 = e_tDBOutput_33.getMessage();
			}
	    	
	    	int countSum_tDBOutput_33 = 0;
			for(int countEach_tDBOutput_33: e_tDBOutput_33.getUpdateCounts()) {
				countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
			}
			
	    		insertedCount_tDBOutput_33 += countSum_tDBOutput_33;
	    	
	    	System.err.println(errormessage_tDBOutput_33);
	    	
		}
	    
        if(pstmt_tDBOutput_33 != null) {
        		
            pstmt_tDBOutput_33.close();
            resourceMap.remove("pstmt_tDBOutput_33");
        }
    resourceMap.put("statementClosed_tDBOutput_33", true);
			
			conn_tDBOutput_33.commit();
			
		
    	conn_tDBOutput_33 .close();
    	
    	resourceMap.put("finish_tDBOutput_33", true);
    	

	nb_line_deleted_tDBOutput_33=nb_line_deleted_tDBOutput_33+ deletedCount_tDBOutput_33;
	nb_line_update_tDBOutput_33=nb_line_update_tDBOutput_33 + updatedCount_tDBOutput_33;
	nb_line_inserted_tDBOutput_33=nb_line_inserted_tDBOutput_33 + insertedCount_tDBOutput_33;
	nb_line_rejected_tDBOutput_33=nb_line_rejected_tDBOutput_33 + rejectedCount_tDBOutput_33;
	
        globalMap.put("tDBOutput_33_NB_LINE",nb_line_tDBOutput_33);
        globalMap.put("tDBOutput_33_NB_LINE_UPDATED",nb_line_update_tDBOutput_33);
        globalMap.put("tDBOutput_33_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_33);
        globalMap.put("tDBOutput_33_NB_LINE_DELETED",nb_line_deleted_tDBOutput_33);
        globalMap.put("tDBOutput_33_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_33);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_supplier_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_33", true);
end_Hash.put("tDBOutput_33", System.currentTimeMillis());




/**
 * [tDBOutput_33 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_76:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tDBInput_77Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_76 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_76";

	

 



/**
 * [tDBInput_76 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tDBOutput_33 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_33";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_33") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_33 = null;
                if ((pstmtToClose_tDBOutput_33 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_33")) != null) {
                    pstmtToClose_tDBOutput_33.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_33") == null){
            java.sql.Connection ctn_tDBOutput_33 = null;
            if((ctn_tDBOutput_33 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_33")) != null){
                try {
                    ctn_tDBOutput_33.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_33) {
                    String errorMessage_tDBOutput_33 = "failed to close the connection in tDBOutput_33 :" + sqlEx_tDBOutput_33.getMessage();
                    System.err.println(errorMessage_tDBOutput_33);
                }
            }
        }
    }
 



/**
 * [tDBOutput_33 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_76_SUBPROCESS_STATE", 1);
	}
	


public static class lkp_uom_insStruct implements routines.system.IPersistableRow<lkp_uom_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lkp_uom_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_77Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_77_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();
lkp_uom_insStruct lkp_uom_ins = new lkp_uom_insStruct();





	
	/**
	 * [tDBOutput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_34", false);
		start_Hash.put("tDBOutput_34", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_34";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lkp_uom_ins");
					}
				
		int tos_count_tDBOutput_34 = 0;
		





String dbschema_tDBOutput_34 = null;
	dbschema_tDBOutput_34 = context.dmd_db_schema;
	

String tableName_tDBOutput_34 = null;
if(dbschema_tDBOutput_34 == null || dbschema_tDBOutput_34.trim().length() == 0) {
	tableName_tDBOutput_34 = ("dmd_lookup_uom");
} else {
	tableName_tDBOutput_34 = dbschema_tDBOutput_34 + "\".\"" + ("dmd_lookup_uom");
}

int nb_line_tDBOutput_34 = 0;
int nb_line_update_tDBOutput_34 = 0;
int nb_line_inserted_tDBOutput_34 = 0;
int nb_line_deleted_tDBOutput_34 = 0;
int nb_line_rejected_tDBOutput_34 = 0;

int deletedCount_tDBOutput_34=0;
int updatedCount_tDBOutput_34=0;
int insertedCount_tDBOutput_34=0;
int rejectedCount_tDBOutput_34=0;

boolean whetherReject_tDBOutput_34 = false;

java.sql.Connection conn_tDBOutput_34 = null;
String dbUser_tDBOutput_34 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_34 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_34 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_34 = context.dmd_db_password; 

    String dbPwd_tDBOutput_34 = decryptedPassword_tDBOutput_34;

    conn_tDBOutput_34 = java.sql.DriverManager.getConnection(url_tDBOutput_34,dbUser_tDBOutput_34,dbPwd_tDBOutput_34);
	
	resourceMap.put("conn_tDBOutput_34", conn_tDBOutput_34);
        conn_tDBOutput_34.setAutoCommit(false);
        int commitEvery_tDBOutput_34 = 10000;
        int commitCounter_tDBOutput_34 = 0;


   int batchSize_tDBOutput_34 = 10000;
   int batchSizeCounter_tDBOutput_34=0;

int count_tDBOutput_34=0;
            int rsTruncCountNumber_tDBOutput_34 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_34 = conn_tDBOutput_34.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_34 = stmtTruncCount_tDBOutput_34.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_34 + "\"")) {
                    if(rsTruncCount_tDBOutput_34.next()) {
                        rsTruncCountNumber_tDBOutput_34 = rsTruncCount_tDBOutput_34.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_34 = conn_tDBOutput_34.createStatement()) {
                stmtTrunc_tDBOutput_34.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_34 + "\"");
                deletedCount_tDBOutput_34 += rsTruncCountNumber_tDBOutput_34;
            }
	    String insert_tDBOutput_34 = "INSERT INTO \"" + tableName_tDBOutput_34 + "\" (\"cd\",\"cddt\",\"cdprev\",\"desc\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_34 = conn_tDBOutput_34.prepareStatement(insert_tDBOutput_34);
	    resourceMap.put("pstmt_tDBOutput_34", pstmt_tDBOutput_34);
	    

 



/**
 * [tDBOutput_34 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
lkp_uom_insStruct lkp_uom_ins_tmp = new lkp_uom_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tDBInput_77 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_77", false);
		start_Hash.put("tDBInput_77", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_77";

	
		int tos_count_tDBInput_77 = 0;
		
	
    
	
		    int nb_line_tDBInput_77 = 0;
		    java.sql.Connection conn_tDBInput_77 = null;
				String driverClass_tDBInput_77 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_77 = java.lang.Class.forName(driverClass_tDBInput_77);
				String dbUser_tDBInput_77 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_77 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_77 = decryptedPassword_tDBInput_77;
				
				String url_tDBInput_77 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_77 = java.sql.DriverManager.getConnection(url_tDBInput_77,dbUser_tDBInput_77,dbPwd_tDBInput_77);
		        
				conn_tDBInput_77.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_77 = conn_tDBInput_77.createStatement();

		    String dbquery_tDBInput_77 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_uom\".\"cd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_uom\".\"cddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_uom\".\"cdprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_uom\".\"desc\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_lookup_uom\"";
			

            	globalMap.put("tDBInput_77_QUERY",dbquery_tDBInput_77);
		    java.sql.ResultSet rs_tDBInput_77 = null;

		    try {
		    	rs_tDBInput_77 = stmt_tDBInput_77.executeQuery(dbquery_tDBInput_77);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_77 = rs_tDBInput_77.getMetaData();
		    	int colQtyInRs_tDBInput_77 = rsmd_tDBInput_77.getColumnCount();

		    String tmpContent_tDBInput_77 = null;
		    
		    
		    while (rs_tDBInput_77.next()) {
		        nb_line_tDBInput_77++;
		        
							if(colQtyInRs_tDBInput_77 < 1) {
								row48.cd = null;
							} else {
	                         		
        	row48.cd = routines.system.JDBCUtil.getString(rs_tDBInput_77, 1, false);
		                    }
							if(colQtyInRs_tDBInput_77 < 2) {
								row48.cddt = null;
							} else {
										
			row48.cddt = routines.system.JDBCUtil.getDate(rs_tDBInput_77, 2);
		                    }
							if(colQtyInRs_tDBInput_77 < 3) {
								row48.cdprev = null;
							} else {
	                         		
        	row48.cdprev = routines.system.JDBCUtil.getString(rs_tDBInput_77, 3, false);
		                    }
							if(colQtyInRs_tDBInput_77 < 4) {
								row48.desc = null;
							} else {
	                         		
        	row48.desc = routines.system.JDBCUtil.getString(rs_tDBInput_77, 4, false);
		                    }
					


 



/**
 * [tDBInput_77 begin ] stop
 */
	
	/**
	 * [tDBInput_77 main ] start
	 */

	

	
	
	currentComponent="tDBInput_77";

	

 


	tos_count_tDBInput_77++;

/**
 * [tDBInput_77 main ] stop
 */
	
	/**
	 * [tDBInput_77 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_77";

	

 



/**
 * [tDBInput_77 process_data_begin ] stop
 */

	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

lkp_uom_ins = null;


// # Output table : 'lkp_uom_ins'
lkp_uom_ins_tmp.cd = row48.cd;
lkp_uom_ins_tmp.cddt = row48.cddt;
lkp_uom_ins_tmp.cdprev = row48.cdprev;
lkp_uom_ins_tmp.desc = row48.desc;
lkp_uom_ins = lkp_uom_ins_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "lkp_uom_ins"
if(lkp_uom_ins != null) { 



	
	/**
	 * [tDBOutput_34 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_34";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lkp_uom_ins");
					}
					



        whetherReject_tDBOutput_34 = false;
                    if(lkp_uom_ins.cd == null) {
pstmt_tDBOutput_34.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_34.setString(1, lkp_uom_ins.cd);
}

                    if(lkp_uom_ins.cddt != null) {
pstmt_tDBOutput_34.setTimestamp(2, new java.sql.Timestamp(lkp_uom_ins.cddt.getTime()));
} else {
pstmt_tDBOutput_34.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(lkp_uom_ins.cdprev == null) {
pstmt_tDBOutput_34.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_34.setString(3, lkp_uom_ins.cdprev);
}

                    if(lkp_uom_ins.desc == null) {
pstmt_tDBOutput_34.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_34.setString(4, lkp_uom_ins.desc);
}

			
    		pstmt_tDBOutput_34.addBatch();
    		nb_line_tDBOutput_34++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_34++;
    		  
    			if ((batchSize_tDBOutput_34 > 0) && (batchSize_tDBOutput_34 <= batchSizeCounter_tDBOutput_34)) {
                try {
						int countSum_tDBOutput_34 = 0;
						    
						for(int countEach_tDBOutput_34: pstmt_tDBOutput_34.executeBatch()) {
							countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
						}
				    	
				    		insertedCount_tDBOutput_34 += countSum_tDBOutput_34;
				    	
            	    	batchSizeCounter_tDBOutput_34 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_34){
				    	java.sql.SQLException ne_tDBOutput_34 = e_tDBOutput_34.getNextException(),sqle_tDBOutput_34=null;
				    	String errormessage_tDBOutput_34;
						if (ne_tDBOutput_34 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_34 = new java.sql.SQLException(e_tDBOutput_34.getMessage() + "\ncaused by: " + ne_tDBOutput_34.getMessage(), ne_tDBOutput_34.getSQLState(), ne_tDBOutput_34.getErrorCode(), ne_tDBOutput_34);
							errormessage_tDBOutput_34 = sqle_tDBOutput_34.getMessage();
						}else{
							errormessage_tDBOutput_34 = e_tDBOutput_34.getMessage();
						}
				    	
				    	int countSum_tDBOutput_34 = 0;
						for(int countEach_tDBOutput_34: e_tDBOutput_34.getUpdateCounts()) {
							countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
						}
						
				    		insertedCount_tDBOutput_34 += countSum_tDBOutput_34;
				    	
				    	System.err.println(errormessage_tDBOutput_34);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_34++;
                if(commitEvery_tDBOutput_34 <= commitCounter_tDBOutput_34) {
                if ((batchSize_tDBOutput_34 > 0) && (batchSizeCounter_tDBOutput_34 > 0)) {
                try {
                		int countSum_tDBOutput_34 = 0;
                		    
						for(int countEach_tDBOutput_34: pstmt_tDBOutput_34.executeBatch()) {
							countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
						}
            	    	
            	    		insertedCount_tDBOutput_34 += countSum_tDBOutput_34;
            	    	
                batchSizeCounter_tDBOutput_34 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_34){
			    	java.sql.SQLException ne_tDBOutput_34 = e_tDBOutput_34.getNextException(),sqle_tDBOutput_34=null;
			    	String errormessage_tDBOutput_34;
					if (ne_tDBOutput_34 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_34 = new java.sql.SQLException(e_tDBOutput_34.getMessage() + "\ncaused by: " + ne_tDBOutput_34.getMessage(), ne_tDBOutput_34.getSQLState(), ne_tDBOutput_34.getErrorCode(), ne_tDBOutput_34);
						errormessage_tDBOutput_34 = sqle_tDBOutput_34.getMessage();
					}else{
						errormessage_tDBOutput_34 = e_tDBOutput_34.getMessage();
					}
			    	
			    	int countSum_tDBOutput_34 = 0;
					for(int countEach_tDBOutput_34: e_tDBOutput_34.getUpdateCounts()) {
						countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
					}
					
			    		insertedCount_tDBOutput_34 += countSum_tDBOutput_34;
			    	
			    	System.err.println(errormessage_tDBOutput_34);
			    	
				}
            }
                	conn_tDBOutput_34.commit();
                	
                	commitCounter_tDBOutput_34=0;
                }

 


	tos_count_tDBOutput_34++;

/**
 * [tDBOutput_34 main ] stop
 */
	
	/**
	 * [tDBOutput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_34";

	

 



/**
 * [tDBOutput_34 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_34";

	

 



/**
 * [tDBOutput_34 process_data_end ] stop
 */

} // End of branch "lkp_uom_ins"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_77 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_77";

	

 



/**
 * [tDBInput_77 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_77 end ] start
	 */

	

	
	
	currentComponent="tDBInput_77";

	

	}
}finally{
	if (rs_tDBInput_77 != null) {
		rs_tDBInput_77.close();
	}
	if (stmt_tDBInput_77 != null) {
		stmt_tDBInput_77.close();
	}
	if(conn_tDBInput_77 != null && !conn_tDBInput_77.isClosed()) {
		
			conn_tDBInput_77.commit();
			
		
			conn_tDBInput_77.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_77_NB_LINE",nb_line_tDBInput_77);
 

ok_Hash.put("tDBInput_77", true);
end_Hash.put("tDBInput_77", System.currentTimeMillis());




/**
 * [tDBInput_77 end ] stop
 */

	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tDBOutput_34 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_34";

	



	    try {
				int countSum_tDBOutput_34 = 0;
				if (pstmt_tDBOutput_34 != null && batchSizeCounter_tDBOutput_34 > 0) {
						
					for(int countEach_tDBOutput_34: pstmt_tDBOutput_34.executeBatch()) {
						countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_34 += countSum_tDBOutput_34;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_34){
	    	java.sql.SQLException ne_tDBOutput_34 = e_tDBOutput_34.getNextException(),sqle_tDBOutput_34=null;
	    	String errormessage_tDBOutput_34;
			if (ne_tDBOutput_34 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_34 = new java.sql.SQLException(e_tDBOutput_34.getMessage() + "\ncaused by: " + ne_tDBOutput_34.getMessage(), ne_tDBOutput_34.getSQLState(), ne_tDBOutput_34.getErrorCode(), ne_tDBOutput_34);
				errormessage_tDBOutput_34 = sqle_tDBOutput_34.getMessage();
			}else{
				errormessage_tDBOutput_34 = e_tDBOutput_34.getMessage();
			}
	    	
	    	int countSum_tDBOutput_34 = 0;
			for(int countEach_tDBOutput_34: e_tDBOutput_34.getUpdateCounts()) {
				countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
			}
			
	    		insertedCount_tDBOutput_34 += countSum_tDBOutput_34;
	    	
	    	System.err.println(errormessage_tDBOutput_34);
	    	
		}
	    
        if(pstmt_tDBOutput_34 != null) {
        		
            pstmt_tDBOutput_34.close();
            resourceMap.remove("pstmt_tDBOutput_34");
        }
    resourceMap.put("statementClosed_tDBOutput_34", true);
			
			conn_tDBOutput_34.commit();
			
		
    	conn_tDBOutput_34 .close();
    	
    	resourceMap.put("finish_tDBOutput_34", true);
    	

	nb_line_deleted_tDBOutput_34=nb_line_deleted_tDBOutput_34+ deletedCount_tDBOutput_34;
	nb_line_update_tDBOutput_34=nb_line_update_tDBOutput_34 + updatedCount_tDBOutput_34;
	nb_line_inserted_tDBOutput_34=nb_line_inserted_tDBOutput_34 + insertedCount_tDBOutput_34;
	nb_line_rejected_tDBOutput_34=nb_line_rejected_tDBOutput_34 + rejectedCount_tDBOutput_34;
	
        globalMap.put("tDBOutput_34_NB_LINE",nb_line_tDBOutput_34);
        globalMap.put("tDBOutput_34_NB_LINE_UPDATED",nb_line_update_tDBOutput_34);
        globalMap.put("tDBOutput_34_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_34);
        globalMap.put("tDBOutput_34_NB_LINE_DELETED",nb_line_deleted_tDBOutput_34);
        globalMap.put("tDBOutput_34_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_34);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lkp_uom_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_34", true);
end_Hash.put("tDBOutput_34", System.currentTimeMillis());




/**
 * [tDBOutput_34 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_77:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_77 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_77";

	

 



/**
 * [tDBInput_77 finally ] stop
 */

	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tDBOutput_34 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_34";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_34") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_34 = null;
                if ((pstmtToClose_tDBOutput_34 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_34")) != null) {
                    pstmtToClose_tDBOutput_34.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_34") == null){
            java.sql.Connection ctn_tDBOutput_34 = null;
            if((ctn_tDBOutput_34 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_34")) != null){
                try {
                    ctn_tDBOutput_34.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_34) {
                    String errorMessage_tDBOutput_34 = "failed to close the connection in tDBOutput_34 :" + sqlEx_tDBOutput_34.getMessage();
                    System.err.println(errorMessage_tDBOutput_34);
                }
            }
        }
    }
 



/**
 * [tDBOutput_34 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_77_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ingre_insStruct implements routines.system.IPersistableRow<ingre_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ingre_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class drugroute_insStruct implements routines.system.IPersistableRow<drugroute_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(drugroute_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class drugform_insStruct implements routines.system.IPersistableRow<drugform_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(drugform_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_controldrug_insStruct implements routines.system.IPersistableRow<dmd_vmp_controldrug_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_controldrug_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_amp_excipient_insStruct implements routines.system.IPersistableRow<dmd_amp_excipient_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_amp_excipient_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_amp_drugroute_insStruct implements routines.system.IPersistableRow<dmd_amp_drugroute_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_amp_drugroute_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vtm_ins_dataStruct implements routines.system.IPersistableRow<dmd_vtm_ins_dataStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vtm_ins_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_ins_rowStruct implements routines.system.IPersistableRow<amp_ins_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_ins_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_ins_rowStruct implements routines.system.IPersistableRow<dmd_vmp_ins_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_ins_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmpStruct implements routines.system.IPersistableRow<dmd_vmpStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.row_action = readString(dis);
					
					this.dmd_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.row_action,dos);
					
					// String
				
						writeString(this.dmd_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("row_action="+row_action);
		sb.append(",dmd_id="+dmd_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_ampStruct implements routines.system.IPersistableRow<dmd_ampStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_ampStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vtm_insStruct implements routines.system.IPersistableRow<dmd_vtm_insStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vtm_insStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_amp_drugrouteStruct implements routines.system.IPersistableRow<dmd_amp_drugrouteStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_amp_drugrouteStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_amp_excipientStruct implements routines.system.IPersistableRow<dmd_amp_excipientStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_amp_excipientStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_controldrug_mapStruct implements routines.system.IPersistableRow<dmd_vmp_controldrug_mapStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_controldrug_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_drugform_mapStruct implements routines.system.IPersistableRow<dmd_vmp_drugform_mapStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_drugform_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_drugrouteStruct implements routines.system.IPersistableRow<dmd_vmp_drugrouteStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_drugrouteStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dmd_vmp_ingredient_mapStruct implements routines.system.IPersistableRow<dmd_vmp_ingredient_mapStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.row_action = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",row_action="+row_action);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dmd_vmp_ingredient_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class action_filtered_rowStruct implements routines.system.IPersistableRow<action_filtered_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public java.util.Date created_dt;

				public java.util.Date getCreated_dt () {
					return this.created_dt;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public long serial_num;

				public long getSerial_num () {
					return this.serial_num;
				}
				
			    public Boolean is_dmd_updated;

				public Boolean getIs_dmd_updated () {
					return this.is_dmd_updated;
				}
				
			    public java.util.Date dmd_update_dt;

				public java.util.Date getDmd_update_dt () {
					return this.dmd_update_dt;
				}
				
			    public Boolean is_formulary_updated;

				public Boolean getIs_formulary_updated () {
					return this.is_formulary_updated;
				}
				
			    public java.util.Date formulary_update_dt;

				public java.util.Date getFormulary_update_dt () {
					return this.formulary_update_dt;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.created_dt = readDate(dis);
					
					this.row_action = readString(dis);
					
			        this.serial_num = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_dmd_updated = null;
           				} else {
           			    	this.is_dmd_updated = dis.readBoolean();
           				}
					
					this.dmd_update_dt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_formulary_updated = null;
           				} else {
           			    	this.is_formulary_updated = dis.readBoolean();
           				}
					
					this.formulary_update_dt = readDate(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// java.util.Date
				
						writeDate(this.created_dt,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// long
				
		            	dos.writeLong(this.serial_num);
					
					// Boolean
				
						if(this.is_dmd_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_dmd_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.dmd_update_dt,dos);
					
					// Boolean
				
						if(this.is_formulary_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_formulary_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.formulary_update_dt,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",created_dt="+String.valueOf(created_dt));
		sb.append(",row_action="+row_action);
		sb.append(",serial_num="+String.valueOf(serial_num));
		sb.append(",is_dmd_updated="+String.valueOf(is_dmd_updated));
		sb.append(",dmd_update_dt="+String.valueOf(dmd_update_dt));
		sb.append(",is_formulary_updated="+String.valueOf(is_formulary_updated));
		sb.append(",formulary_update_dt="+String.valueOf(formulary_update_dt));
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(action_filtered_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public java.util.Date created_dt;

				public java.util.Date getCreated_dt () {
					return this.created_dt;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public long serial_num;

				public long getSerial_num () {
					return this.serial_num;
				}
				
			    public Boolean is_dmd_updated;

				public Boolean getIs_dmd_updated () {
					return this.is_dmd_updated;
				}
				
			    public java.util.Date dmd_update_dt;

				public java.util.Date getDmd_update_dt () {
					return this.dmd_update_dt;
				}
				
			    public Boolean is_formulary_updated;

				public Boolean getIs_formulary_updated () {
					return this.is_formulary_updated;
				}
				
			    public java.util.Date formulary_update_dt;

				public java.util.Date getFormulary_update_dt () {
					return this.formulary_update_dt;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.created_dt = readDate(dis);
					
					this.row_action = readString(dis);
					
			        this.serial_num = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_dmd_updated = null;
           				} else {
           			    	this.is_dmd_updated = dis.readBoolean();
           				}
					
					this.dmd_update_dt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_formulary_updated = null;
           				} else {
           			    	this.is_formulary_updated = dis.readBoolean();
           				}
					
					this.formulary_update_dt = readDate(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// java.util.Date
				
						writeDate(this.created_dt,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// long
				
		            	dos.writeLong(this.serial_num);
					
					// Boolean
				
						if(this.is_dmd_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_dmd_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.dmd_update_dt,dos);
					
					// Boolean
				
						if(this.is_formulary_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_formulary_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.formulary_update_dt,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",created_dt="+String.valueOf(created_dt));
		sb.append(",row_action="+row_action);
		sb.append(",serial_num="+String.valueOf(serial_num));
		sb.append(",is_dmd_updated="+String.valueOf(is_dmd_updated));
		sb.append(",dmd_update_dt="+String.valueOf(dmd_update_dt));
		sb.append(",is_formulary_updated="+String.valueOf(is_formulary_updated));
		sb.append(",formulary_update_dt="+String.valueOf(formulary_update_dt));
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public java.util.Date created_dt;

				public java.util.Date getCreated_dt () {
					return this.created_dt;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public long serial_num;

				public long getSerial_num () {
					return this.serial_num;
				}
				
			    public Boolean is_dmd_updated;

				public Boolean getIs_dmd_updated () {
					return this.is_dmd_updated;
				}
				
			    public java.util.Date dmd_update_dt;

				public java.util.Date getDmd_update_dt () {
					return this.dmd_update_dt;
				}
				
			    public Boolean is_formulary_updated;

				public Boolean getIs_formulary_updated () {
					return this.is_formulary_updated;
				}
				
			    public java.util.Date formulary_update_dt;

				public java.util.Date getFormulary_update_dt () {
					return this.formulary_update_dt;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.created_dt = readDate(dis);
					
					this.row_action = readString(dis);
					
			        this.serial_num = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_dmd_updated = null;
           				} else {
           			    	this.is_dmd_updated = dis.readBoolean();
           				}
					
					this.dmd_update_dt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_formulary_updated = null;
           				} else {
           			    	this.is_formulary_updated = dis.readBoolean();
           				}
					
					this.formulary_update_dt = readDate(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// java.util.Date
				
						writeDate(this.created_dt,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// long
				
		            	dos.writeLong(this.serial_num);
					
					// Boolean
				
						if(this.is_dmd_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_dmd_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.dmd_update_dt,dos);
					
					// Boolean
				
						if(this.is_formulary_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_formulary_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.formulary_update_dt,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",created_dt="+String.valueOf(created_dt));
		sb.append(",row_action="+row_action);
		sb.append(",serial_num="+String.valueOf(serial_num));
		sb.append(",is_dmd_updated="+String.valueOf(is_dmd_updated));
		sb.append(",dmd_update_dt="+String.valueOf(dmd_update_dt));
		sb.append(",is_formulary_updated="+String.valueOf(is_formulary_updated));
		sb.append(",formulary_update_dt="+String.valueOf(formulary_update_dt));
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String dmd_id;

				public String getDmd_id () {
					return this.dmd_id;
				}
				
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public String dmd_entity_name;

				public String getDmd_entity_name () {
					return this.dmd_entity_name;
				}
				
			    public java.util.Date created_dt;

				public java.util.Date getCreated_dt () {
					return this.created_dt;
				}
				
			    public String row_action;

				public String getRow_action () {
					return this.row_action;
				}
				
			    public long serial_num;

				public long getSerial_num () {
					return this.serial_num;
				}
				
			    public Boolean is_dmd_updated;

				public Boolean getIs_dmd_updated () {
					return this.is_dmd_updated;
				}
				
			    public java.util.Date dmd_update_dt;

				public java.util.Date getDmd_update_dt () {
					return this.dmd_update_dt;
				}
				
			    public Boolean is_formulary_updated;

				public Boolean getIs_formulary_updated () {
					return this.is_formulary_updated;
				}
				
			    public java.util.Date formulary_update_dt;

				public java.util.Date getFormulary_update_dt () {
					return this.formulary_update_dt;
				}
				
			    public String dmd_version;

				public String getDmd_version () {
					return this.dmd_version;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.dmd_id = readString(dis);
					
					this.sync_process_id = readString(dis);
					
					this.dmd_entity_name = readString(dis);
					
					this.created_dt = readDate(dis);
					
					this.row_action = readString(dis);
					
			        this.serial_num = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_dmd_updated = null;
           				} else {
           			    	this.is_dmd_updated = dis.readBoolean();
           				}
					
					this.dmd_update_dt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_formulary_updated = null;
           				} else {
           			    	this.is_formulary_updated = dis.readBoolean();
           				}
					
					this.formulary_update_dt = readDate(dis);
					
					this.dmd_version = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dmd_id,dos);
					
					// String
				
						writeString(this.sync_process_id,dos);
					
					// String
				
						writeString(this.dmd_entity_name,dos);
					
					// java.util.Date
				
						writeDate(this.created_dt,dos);
					
					// String
				
						writeString(this.row_action,dos);
					
					// long
				
		            	dos.writeLong(this.serial_num);
					
					// Boolean
				
						if(this.is_dmd_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_dmd_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.dmd_update_dt,dos);
					
					// Boolean
				
						if(this.is_formulary_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_formulary_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.formulary_update_dt,dos);
					
					// String
				
						writeString(this.dmd_version,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dmd_id="+dmd_id);
		sb.append(",sync_process_id="+sync_process_id);
		sb.append(",dmd_entity_name="+dmd_entity_name);
		sb.append(",created_dt="+String.valueOf(created_dt));
		sb.append(",row_action="+row_action);
		sb.append(",serial_num="+String.valueOf(serial_num));
		sb.append(",is_dmd_updated="+String.valueOf(is_dmd_updated));
		sb.append(",dmd_update_dt="+String.valueOf(dmd_update_dt));
		sb.append(",is_formulary_updated="+String.valueOf(is_formulary_updated));
		sb.append(",formulary_update_dt="+String.valueOf(formulary_update_dt));
		sb.append(",dmd_version="+dmd_version);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_9Process(globalMap);
		tDBInput_10Process(globalMap);
		tDBInput_11Process(globalMap);
		tDBInput_12Process(globalMap);
		tDBInput_13Process(globalMap);
		tDBInput_14Process(globalMap);
		tDBInput_15Process(globalMap);

		row6Struct row6 = new row6Struct();
row35Struct row35 = new row35Struct();
action_filtered_rowStruct action_filtered_row = new action_filtered_rowStruct();
dmd_vmpStruct dmd_vmp = new dmd_vmpStruct();
dmd_vmp_ins_rowStruct dmd_vmp_ins_row = new dmd_vmp_ins_rowStruct();
row8Struct row8 = new row8Struct();
dmd_ampStruct dmd_amp = new dmd_ampStruct();
amp_ins_rowStruct amp_ins_row = new amp_ins_rowStruct();
row12Struct row12 = new row12Struct();
dmd_vtm_insStruct dmd_vtm_ins = new dmd_vtm_insStruct();
dmd_vtm_ins_dataStruct dmd_vtm_ins_data = new dmd_vtm_ins_dataStruct();
row22Struct row22 = new row22Struct();
dmd_amp_drugrouteStruct dmd_amp_drugroute = new dmd_amp_drugrouteStruct();
dmd_amp_drugroute_insStruct dmd_amp_drugroute_ins = new dmd_amp_drugroute_insStruct();
row24Struct row24 = new row24Struct();
dmd_amp_excipientStruct dmd_amp_excipient = new dmd_amp_excipientStruct();
dmd_amp_excipient_insStruct dmd_amp_excipient_ins = new dmd_amp_excipient_insStruct();
row26Struct row26 = new row26Struct();
dmd_vmp_controldrug_mapStruct dmd_vmp_controldrug_map = new dmd_vmp_controldrug_mapStruct();
dmd_vmp_controldrug_insStruct dmd_vmp_controldrug_ins = new dmd_vmp_controldrug_insStruct();
row28Struct row28 = new row28Struct();
dmd_vmp_drugform_mapStruct dmd_vmp_drugform_map = new dmd_vmp_drugform_mapStruct();
drugform_insStruct drugform_ins = new drugform_insStruct();
row30Struct row30 = new row30Struct();
dmd_vmp_drugrouteStruct dmd_vmp_drugroute = new dmd_vmp_drugrouteStruct();
drugroute_insStruct drugroute_ins = new drugroute_insStruct();
row32Struct row32 = new row32Struct();
dmd_vmp_ingredient_mapStruct dmd_vmp_ingredient_map = new dmd_vmp_ingredient_mapStruct();
ingre_insStruct ingre_ins = new ingre_insStruct();
row34Struct row34 = new row34Struct();









	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_ins_row");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.dmd_db_schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dmd_vmp");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dmd_vmp");
}

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_3 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_3 = context.dmd_db_password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"vpid\",\"vpiddt\",\"vpidprev\",\"vtmid\",\"invalid\",\"nm\",\"abbrevnm\",\"basiscd\",\"nmdt\",\"nmprev\",\"basis_prevcd\",\"nmchangecd\",\"comprodcd\",\"pres_statcd\",\"sug_f\",\"glu_f\",\"pres_f\",\"cfc_f\",\"non_availcd\",\"non_availdt\",\"df_indcd\",\"udfs\",\"udfs_uomcd\",\"unit_dose_uomcd\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
dmd_vmp_ins_rowStruct dmd_vmp_ins_row_tmp = new dmd_vmp_ins_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */






	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_ins_row");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = context.dmd_db_schema;
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("dmd_amp");
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("dmd_amp");
}

int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_7 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_7 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_7 = context.dmd_db_password; 

    String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

    conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7,dbUser_tDBOutput_7,dbPwd_tDBOutput_7);
	
	resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
        conn_tDBOutput_7.setAutoCommit(false);
        int commitEvery_tDBOutput_7 = 10000;
        int commitCounter_tDBOutput_7 = 0;


   int batchSize_tDBOutput_7 = 10000;
   int batchSizeCounter_tDBOutput_7=0;

int count_tDBOutput_7=0;
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"apid\",\"invalid\",\"vpid\",\"nm\",\"abbrevnm\",\"desc\",\"nmdt\",\"nm_prev\",\"suppcd\",\"lic_authcd\",\"lic_auth_prevcd\",\"lic_authchangecd\",\"lic_authchangedt\",\"combprodcd\",\"flavourcd\",\"ema\",\"parallel_import\",\"avail_restrictcd\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
amp_ins_rowStruct amp_ins_row_tmp = new amp_ins_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */






	
	/**
	 * [tLogRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_13", false);
		start_Hash.put("tLogRow_13", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tLogRow_13 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
		java.io.PrintStream consoleOut_tLogRow_13 = null;	

 		StringBuilder strBuffer_tLogRow_13 = null;
		int nb_line_tLogRow_13 = 0;
///////////////////////    			



 



/**
 * [tLogRow_13 begin ] stop
 */



	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vtm_ins_data");
					}
				
		int tos_count_tDBOutput_10 = 0;
		





String dbschema_tDBOutput_10 = null;
	dbschema_tDBOutput_10 = context.dmd_db_schema;
	

String tableName_tDBOutput_10 = null;
if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
	tableName_tDBOutput_10 = ("dmd_vtm");
} else {
	tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("dmd_vtm");
}

int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;
int rejectedCount_tDBOutput_10=0;

boolean whetherReject_tDBOutput_10 = false;

java.sql.Connection conn_tDBOutput_10 = null;
String dbUser_tDBOutput_10 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_10 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_10 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_10 = context.dmd_db_password; 

    String dbPwd_tDBOutput_10 = decryptedPassword_tDBOutput_10;

    conn_tDBOutput_10 = java.sql.DriverManager.getConnection(url_tDBOutput_10,dbUser_tDBOutput_10,dbPwd_tDBOutput_10);
	
	resourceMap.put("conn_tDBOutput_10", conn_tDBOutput_10);
        conn_tDBOutput_10.setAutoCommit(false);
        int commitEvery_tDBOutput_10 = 10000;
        int commitCounter_tDBOutput_10 = 0;


   int batchSize_tDBOutput_10 = 10000;
   int batchSizeCounter_tDBOutput_10=0;

int count_tDBOutput_10=0;
	    String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10 + "\" (\"vtmid\",\"invalid\",\"nm\",\"abbrevnm\",\"vtmidprev\",\"vtmiddt\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
	    resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
	    

 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vtm_ins");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
dmd_vtm_ins_dataStruct dmd_vtm_ins_data_tmp = new dmd_vtm_ins_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */






	
	/**
	 * [tLogRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_14", false);
		start_Hash.put("tLogRow_14", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tLogRow_14 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
		java.io.PrintStream consoleOut_tLogRow_14 = null;	

 		StringBuilder strBuffer_tLogRow_14 = null;
		int nb_line_tLogRow_14 = 0;
///////////////////////    			



 



/**
 * [tLogRow_14 begin ] stop
 */



	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp_drugroute_ins");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.dmd_db_schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("dmd_amp_drugroute");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("dmd_amp_drugroute");
}

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_5 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_5 = context.dmd_db_password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"apid\",\"routecd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp_drugroute");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
dmd_amp_drugroute_insStruct dmd_amp_drugroute_ins_tmp = new dmd_amp_drugroute_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */






	
	/**
	 * [tLogRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_15", false);
		start_Hash.put("tLogRow_15", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tLogRow_15 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
		java.io.PrintStream consoleOut_tLogRow_15 = null;	

 		StringBuilder strBuffer_tLogRow_15 = null;
		int nb_line_tLogRow_15 = 0;
///////////////////////    			



 



/**
 * [tLogRow_15 begin ] stop
 */



	
	/**
	 * [tDBOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_17", false);
		start_Hash.put("tDBOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp_excipient_ins");
					}
				
		int tos_count_tDBOutput_17 = 0;
		





String dbschema_tDBOutput_17 = null;
	dbschema_tDBOutput_17 = context.dmd_db_schema;
	

String tableName_tDBOutput_17 = null;
if(dbschema_tDBOutput_17 == null || dbschema_tDBOutput_17.trim().length() == 0) {
	tableName_tDBOutput_17 = ("dmd_amp_excipient");
} else {
	tableName_tDBOutput_17 = dbschema_tDBOutput_17 + "\".\"" + ("dmd_amp_excipient");
}

int nb_line_tDBOutput_17 = 0;
int nb_line_update_tDBOutput_17 = 0;
int nb_line_inserted_tDBOutput_17 = 0;
int nb_line_deleted_tDBOutput_17 = 0;
int nb_line_rejected_tDBOutput_17 = 0;

int deletedCount_tDBOutput_17=0;
int updatedCount_tDBOutput_17=0;
int insertedCount_tDBOutput_17=0;
int rejectedCount_tDBOutput_17=0;

boolean whetherReject_tDBOutput_17 = false;

java.sql.Connection conn_tDBOutput_17 = null;
String dbUser_tDBOutput_17 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_17 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_17 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_17 = context.dmd_db_password; 

    String dbPwd_tDBOutput_17 = decryptedPassword_tDBOutput_17;

    conn_tDBOutput_17 = java.sql.DriverManager.getConnection(url_tDBOutput_17,dbUser_tDBOutput_17,dbPwd_tDBOutput_17);
	
	resourceMap.put("conn_tDBOutput_17", conn_tDBOutput_17);
        conn_tDBOutput_17.setAutoCommit(false);
        int commitEvery_tDBOutput_17 = 10000;
        int commitCounter_tDBOutput_17 = 0;


   int batchSize_tDBOutput_17 = 10000;
   int batchSizeCounter_tDBOutput_17=0;

int count_tDBOutput_17=0;
	    String insert_tDBOutput_17 = "INSERT INTO \"" + tableName_tDBOutput_17 + "\" (\"apid\",\"isid\",\"strnth\",\"strnth_uomcd\",\"col_val_hash\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_17 = conn_tDBOutput_17.prepareStatement(insert_tDBOutput_17);
	    resourceMap.put("pstmt_tDBOutput_17", pstmt_tDBOutput_17);
	    

 



/**
 * [tDBOutput_17 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_amp_excipient");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
dmd_amp_excipient_insStruct dmd_amp_excipient_ins_tmp = new dmd_amp_excipient_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */






	
	/**
	 * [tLogRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_16", false);
		start_Hash.put("tLogRow_16", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tLogRow_16 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_16 = "|";
		java.io.PrintStream consoleOut_tLogRow_16 = null;	

 		StringBuilder strBuffer_tLogRow_16 = null;
		int nb_line_tLogRow_16 = 0;
///////////////////////    			



 



/**
 * [tLogRow_16 begin ] stop
 */



	
	/**
	 * [tDBOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_18", false);
		start_Hash.put("tDBOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_controldrug_ins");
					}
				
		int tos_count_tDBOutput_18 = 0;
		





String dbschema_tDBOutput_18 = null;
	dbschema_tDBOutput_18 = context.dmd_db_schema;
	

String tableName_tDBOutput_18 = null;
if(dbschema_tDBOutput_18 == null || dbschema_tDBOutput_18.trim().length() == 0) {
	tableName_tDBOutput_18 = ("dmd_vmp_controldrug");
} else {
	tableName_tDBOutput_18 = dbschema_tDBOutput_18 + "\".\"" + ("dmd_vmp_controldrug");
}

int nb_line_tDBOutput_18 = 0;
int nb_line_update_tDBOutput_18 = 0;
int nb_line_inserted_tDBOutput_18 = 0;
int nb_line_deleted_tDBOutput_18 = 0;
int nb_line_rejected_tDBOutput_18 = 0;

int deletedCount_tDBOutput_18=0;
int updatedCount_tDBOutput_18=0;
int insertedCount_tDBOutput_18=0;
int rejectedCount_tDBOutput_18=0;

boolean whetherReject_tDBOutput_18 = false;

java.sql.Connection conn_tDBOutput_18 = null;
String dbUser_tDBOutput_18 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_18 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_18 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_18 = context.dmd_db_password; 

    String dbPwd_tDBOutput_18 = decryptedPassword_tDBOutput_18;

    conn_tDBOutput_18 = java.sql.DriverManager.getConnection(url_tDBOutput_18,dbUser_tDBOutput_18,dbPwd_tDBOutput_18);
	
	resourceMap.put("conn_tDBOutput_18", conn_tDBOutput_18);
        conn_tDBOutput_18.setAutoCommit(false);
        int commitEvery_tDBOutput_18 = 10000;
        int commitCounter_tDBOutput_18 = 0;


   int batchSize_tDBOutput_18 = 10000;
   int batchSizeCounter_tDBOutput_18=0;

int count_tDBOutput_18=0;
	    String insert_tDBOutput_18 = "INSERT INTO \"" + tableName_tDBOutput_18 + "\" (\"vpid\",\"catcd\",\"catdt\",\"cat_prevcd\",\"col_val_hash\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_18 = conn_tDBOutput_18.prepareStatement(insert_tDBOutput_18);
	    resourceMap.put("pstmt_tDBOutput_18", pstmt_tDBOutput_18);
	    

 



/**
 * [tDBOutput_18 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_controldrug_map");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
dmd_vmp_controldrug_insStruct dmd_vmp_controldrug_ins_tmp = new dmd_vmp_controldrug_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */






	
	/**
	 * [tLogRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_17", false);
		start_Hash.put("tLogRow_17", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tLogRow_17 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_17 = "|";
		java.io.PrintStream consoleOut_tLogRow_17 = null;	

 		StringBuilder strBuffer_tLogRow_17 = null;
		int nb_line_tLogRow_17 = 0;
///////////////////////    			



 



/**
 * [tLogRow_17 begin ] stop
 */



	
	/**
	 * [tDBOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_19", false);
		start_Hash.put("tDBOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"drugform_ins");
					}
				
		int tos_count_tDBOutput_19 = 0;
		





String dbschema_tDBOutput_19 = null;
	dbschema_tDBOutput_19 = context.dmd_db_schema;
	

String tableName_tDBOutput_19 = null;
if(dbschema_tDBOutput_19 == null || dbschema_tDBOutput_19.trim().length() == 0) {
	tableName_tDBOutput_19 = ("dmd_vmp_drugform");
} else {
	tableName_tDBOutput_19 = dbschema_tDBOutput_19 + "\".\"" + ("dmd_vmp_drugform");
}

int nb_line_tDBOutput_19 = 0;
int nb_line_update_tDBOutput_19 = 0;
int nb_line_inserted_tDBOutput_19 = 0;
int nb_line_deleted_tDBOutput_19 = 0;
int nb_line_rejected_tDBOutput_19 = 0;

int deletedCount_tDBOutput_19=0;
int updatedCount_tDBOutput_19=0;
int insertedCount_tDBOutput_19=0;
int rejectedCount_tDBOutput_19=0;

boolean whetherReject_tDBOutput_19 = false;

java.sql.Connection conn_tDBOutput_19 = null;
String dbUser_tDBOutput_19 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_19 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_19 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_19 = context.dmd_db_password; 

    String dbPwd_tDBOutput_19 = decryptedPassword_tDBOutput_19;

    conn_tDBOutput_19 = java.sql.DriverManager.getConnection(url_tDBOutput_19,dbUser_tDBOutput_19,dbPwd_tDBOutput_19);
	
	resourceMap.put("conn_tDBOutput_19", conn_tDBOutput_19);
        conn_tDBOutput_19.setAutoCommit(false);
        int commitEvery_tDBOutput_19 = 10000;
        int commitCounter_tDBOutput_19 = 0;


   int batchSize_tDBOutput_19 = 10000;
   int batchSizeCounter_tDBOutput_19=0;

int count_tDBOutput_19=0;
	    String insert_tDBOutput_19 = "INSERT INTO \"" + tableName_tDBOutput_19 + "\" (\"vpid\",\"formcd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_19 = conn_tDBOutput_19.prepareStatement(insert_tDBOutput_19);
	    resourceMap.put("pstmt_tDBOutput_19", pstmt_tDBOutput_19);
	    

 



/**
 * [tDBOutput_19 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_drugform_map");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
					globalMap.get( "tHash_Lookup_row29" ))
					;					
					
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
drugform_insStruct drugform_ins_tmp = new drugform_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */






	
	/**
	 * [tLogRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_18", false);
		start_Hash.put("tLogRow_18", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tLogRow_18 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_18 = "|";
		java.io.PrintStream consoleOut_tLogRow_18 = null;	

 		StringBuilder strBuffer_tLogRow_18 = null;
		int nb_line_tLogRow_18 = 0;
///////////////////////    			



 



/**
 * [tLogRow_18 begin ] stop
 */



	
	/**
	 * [tDBOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_20", false);
		start_Hash.put("tDBOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"drugroute_ins");
					}
				
		int tos_count_tDBOutput_20 = 0;
		





String dbschema_tDBOutput_20 = null;
	dbschema_tDBOutput_20 = context.dmd_db_schema;
	

String tableName_tDBOutput_20 = null;
if(dbschema_tDBOutput_20 == null || dbschema_tDBOutput_20.trim().length() == 0) {
	tableName_tDBOutput_20 = ("dmd_vmp_drugroute");
} else {
	tableName_tDBOutput_20 = dbschema_tDBOutput_20 + "\".\"" + ("dmd_vmp_drugroute");
}

int nb_line_tDBOutput_20 = 0;
int nb_line_update_tDBOutput_20 = 0;
int nb_line_inserted_tDBOutput_20 = 0;
int nb_line_deleted_tDBOutput_20 = 0;
int nb_line_rejected_tDBOutput_20 = 0;

int deletedCount_tDBOutput_20=0;
int updatedCount_tDBOutput_20=0;
int insertedCount_tDBOutput_20=0;
int rejectedCount_tDBOutput_20=0;

boolean whetherReject_tDBOutput_20 = false;

java.sql.Connection conn_tDBOutput_20 = null;
String dbUser_tDBOutput_20 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_20 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_20 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_20 = context.dmd_db_password; 

    String dbPwd_tDBOutput_20 = decryptedPassword_tDBOutput_20;

    conn_tDBOutput_20 = java.sql.DriverManager.getConnection(url_tDBOutput_20,dbUser_tDBOutput_20,dbPwd_tDBOutput_20);
	
	resourceMap.put("conn_tDBOutput_20", conn_tDBOutput_20);
        conn_tDBOutput_20.setAutoCommit(false);
        int commitEvery_tDBOutput_20 = 10000;
        int commitCounter_tDBOutput_20 = 0;


   int batchSize_tDBOutput_20 = 10000;
   int batchSizeCounter_tDBOutput_20=0;

int count_tDBOutput_20=0;
	    String insert_tDBOutput_20 = "INSERT INTO \"" + tableName_tDBOutput_20 + "\" (\"vpid\",\"routecd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_20 = conn_tDBOutput_20.prepareStatement(insert_tDBOutput_20);
	    resourceMap.put("pstmt_tDBOutput_20", pstmt_tDBOutput_20);
	    

 



/**
 * [tDBOutput_20 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_drugroute");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
					globalMap.get( "tHash_Lookup_row31" ))
					;					
					
	

row31Struct row31HashKey = new row31Struct();
row31Struct row31Default = new row31Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
drugroute_insStruct drugroute_ins_tmp = new drugroute_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */






	
	/**
	 * [tLogRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_19", false);
		start_Hash.put("tLogRow_19", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tLogRow_19 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_19 = "|";
		java.io.PrintStream consoleOut_tLogRow_19 = null;	

 		StringBuilder strBuffer_tLogRow_19 = null;
		int nb_line_tLogRow_19 = 0;
///////////////////////    			



 



/**
 * [tLogRow_19 begin ] stop
 */



	
	/**
	 * [tDBOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_21", false);
		start_Hash.put("tDBOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ingre_ins");
					}
				
		int tos_count_tDBOutput_21 = 0;
		





String dbschema_tDBOutput_21 = null;
	dbschema_tDBOutput_21 = context.dmd_db_schema;
	

String tableName_tDBOutput_21 = null;
if(dbschema_tDBOutput_21 == null || dbschema_tDBOutput_21.trim().length() == 0) {
	tableName_tDBOutput_21 = ("dmd_vmp_ingredient");
} else {
	tableName_tDBOutput_21 = dbschema_tDBOutput_21 + "\".\"" + ("dmd_vmp_ingredient");
}

int nb_line_tDBOutput_21 = 0;
int nb_line_update_tDBOutput_21 = 0;
int nb_line_inserted_tDBOutput_21 = 0;
int nb_line_deleted_tDBOutput_21 = 0;
int nb_line_rejected_tDBOutput_21 = 0;

int deletedCount_tDBOutput_21=0;
int updatedCount_tDBOutput_21=0;
int insertedCount_tDBOutput_21=0;
int rejectedCount_tDBOutput_21=0;

boolean whetherReject_tDBOutput_21 = false;

java.sql.Connection conn_tDBOutput_21 = null;
String dbUser_tDBOutput_21 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_21 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_21 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_21 = context.dmd_db_password; 

    String dbPwd_tDBOutput_21 = decryptedPassword_tDBOutput_21;

    conn_tDBOutput_21 = java.sql.DriverManager.getConnection(url_tDBOutput_21,dbUser_tDBOutput_21,dbPwd_tDBOutput_21);
	
	resourceMap.put("conn_tDBOutput_21", conn_tDBOutput_21);
        conn_tDBOutput_21.setAutoCommit(false);
        int commitEvery_tDBOutput_21 = 10000;
        int commitCounter_tDBOutput_21 = 0;


   int batchSize_tDBOutput_21 = 10000;
   int batchSizeCounter_tDBOutput_21=0;

int count_tDBOutput_21=0;
	    String insert_tDBOutput_21 = "INSERT INTO \"" + tableName_tDBOutput_21 + "\" (\"vpid\",\"isid\",\"basis_strntcd\",\"bs_subid\",\"strnt_nmrtr_val\",\"strnt_nmrtr_uomcd\",\"strnt_dnmtr_val\",\"strnt_dnmtr_uomcd\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_21 = conn_tDBOutput_21.prepareStatement(insert_tDBOutput_21);
	    resourceMap.put("pstmt_tDBOutput_21", pstmt_tDBOutput_21);
	    

 



/**
 * [tDBOutput_21 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dmd_vmp_ingredient_map");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
					globalMap.get( "tHash_Lookup_row33" ))
					;					
					
	

row33Struct row33HashKey = new row33Struct();
row33Struct row33Default = new row33Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
ingre_insStruct ingre_ins_tmp = new ingre_insStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"action_filtered_row");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
dmd_vmpStruct dmd_vmp_tmp = new dmd_vmpStruct();
dmd_ampStruct dmd_amp_tmp = new dmd_ampStruct();
dmd_vtm_insStruct dmd_vtm_ins_tmp = new dmd_vtm_insStruct();
dmd_amp_drugrouteStruct dmd_amp_drugroute_tmp = new dmd_amp_drugrouteStruct();
dmd_amp_excipientStruct dmd_amp_excipient_tmp = new dmd_amp_excipientStruct();
dmd_vmp_controldrug_mapStruct dmd_vmp_controldrug_map_tmp = new dmd_vmp_controldrug_mapStruct();
dmd_vmp_drugform_mapStruct dmd_vmp_drugform_map_tmp = new dmd_vmp_drugform_mapStruct();
dmd_vmp_drugrouteStruct dmd_vmp_drugroute_tmp = new dmd_vmp_drugrouteStruct();
dmd_vmp_ingredient_mapStruct dmd_vmp_ingredient_map_tmp = new dmd_vmp_ingredient_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String dmd_id;
					String dmd_entity_name;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.dmd_id == null) ? 0 : this.dmd_id.hashCode());
								
								result = prime * result + ((this.dmd_entity_name == null) ? 0 : this.dmd_entity_name.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.dmd_id == null) {
										if (other.dmd_id != null) 
											return false;
								
									} else if (!this.dmd_id.equals(other.dmd_id))
								 
										return false;
								
									if (this.dmd_entity_name == null) {
										if (other.dmd_entity_name != null) 
											return false;
								
									} else if (!this.dmd_entity_name.equals(other.dmd_entity_name))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.dmd_db_user;
				
				
	final String decryptedPassword_tDBInput_4 = context.dmd_db_password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.dmd_db_host + ":" + context.dmd_db_port + "/" + context.dmd_db_name + "?" + context.dmd_db_additionalparams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_id\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"sync_process_id\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_entity_name\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"created_dt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"row_action\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"serial_num\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"is_dmd_updated\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_update_dt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"is_formulary_updated\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"formulary_update_dt\", \n  \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\".\"dmd_version\"\nFROM \""+context.dmd_db_name+"\".\""+context.dmd_db_schema+"\".\"dmd_sync_log\"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row6.dmd_id = null;
							} else {
	                         		
        	row6.dmd_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row6.sync_process_id = null;
							} else {
	                         		
        	row6.sync_process_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row6.dmd_entity_name = null;
							} else {
	                         		
        	row6.dmd_entity_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row6.created_dt = null;
							} else {
										
			row6.created_dt = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 4);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row6.row_action = null;
							} else {
	                         		
        	row6.row_action = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row6.serial_num = 0;
							} else {
		                          
            row6.serial_num = rs_tDBInput_4.getLong(6);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row6.is_dmd_updated = null;
							} else {
	                         		
            row6.is_dmd_updated = rs_tDBInput_4.getBoolean(7);
            if(rs_tDBInput_4.wasNull()){
                    row6.is_dmd_updated = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row6.dmd_update_dt = null;
							} else {
										
			row6.dmd_update_dt = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 8);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row6.is_formulary_updated = null;
							} else {
	                         		
            row6.is_formulary_updated = rs_tDBInput_4.getBoolean(9);
            if(rs_tDBInput_4.wasNull()){
                    row6.is_formulary_updated = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row6.formulary_update_dt = null;
							} else {
										
			row6.formulary_update_dt = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 10);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row6.dmd_version = null;
							} else {
	                         		
        	row6.dmd_version = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
row35 = null;			
if(row6.dmd_id == null){
	finder_tUniqRow_1.dmd_id = null;
}else{
	finder_tUniqRow_1.dmd_id = row6.dmd_id.toLowerCase();
}
if(row6.dmd_entity_name == null){
	finder_tUniqRow_1.dmd_entity_name = null;
}else{
	finder_tUniqRow_1.dmd_entity_name = row6.dmd_entity_name.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row6.dmd_id == null){
	new_tUniqRow_1.dmd_id = null;
}else{
	new_tUniqRow_1.dmd_id = row6.dmd_id.toLowerCase();
}
if(row6.dmd_entity_name == null){
	new_tUniqRow_1.dmd_entity_name = null;
}else{
	new_tUniqRow_1.dmd_entity_name = row6.dmd_entity_name.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row35 == null){ 
	
	row35 = new row35Struct();
}row35.dmd_id = row6.dmd_id;			row35.sync_process_id = row6.sync_process_id;			row35.dmd_entity_name = row6.dmd_entity_name;			row35.created_dt = row6.created_dt;			row35.row_action = row6.row_action;			row35.serial_num = row6.serial_num;			row35.is_dmd_updated = row6.is_dmd_updated;			row35.dmd_update_dt = row6.dmd_update_dt;			row35.is_formulary_updated = row6.is_formulary_updated;			row35.formulary_update_dt = row6.formulary_update_dt;			row35.dmd_version = row6.dmd_version;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

          action_filtered_row = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row35.row_action == null? false : row35.row_action.compareTo("i") == 0)
                           , "row_action.compareTo(\"i\") == 0 failed");
            ope_tFilterRow_1.matches((row35.row_action == null? false : row35.row_action.compareTo("u") == 0)
                           , "row_action.compareTo(\"u\") == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(action_filtered_row == null){ 
                action_filtered_row = new action_filtered_rowStruct();
              }
               action_filtered_row.dmd_id = row35.dmd_id;
               action_filtered_row.sync_process_id = row35.sync_process_id;
               action_filtered_row.dmd_entity_name = row35.dmd_entity_name;
               action_filtered_row.created_dt = row35.created_dt;
               action_filtered_row.row_action = row35.row_action;
               action_filtered_row.serial_num = row35.serial_num;
               action_filtered_row.is_dmd_updated = row35.is_dmd_updated;
               action_filtered_row.dmd_update_dt = row35.dmd_update_dt;
               action_filtered_row.is_formulary_updated = row35.is_formulary_updated;
               action_filtered_row.formulary_update_dt = row35.formulary_update_dt;
               action_filtered_row.dmd_version = row35.dmd_version;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "action_filtered_row"
if(action_filtered_row != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"action_filtered_row");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

dmd_vmp = null;
dmd_amp = null;
dmd_vtm_ins = null;
dmd_amp_drugroute = null;
dmd_amp_excipient = null;
dmd_vmp_controldrug_map = null;
dmd_vmp_drugform_map = null;
dmd_vmp_drugroute = null;
dmd_vmp_ingredient_map = null;


// # Output table : 'dmd_vmp'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_vmp")

 ) {
dmd_vmp_tmp.row_action = action_filtered_row.row_action ;
dmd_vmp_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_vmp = dmd_vmp_tmp;
} // closing filter/reject

// # Output table : 'dmd_amp'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_amp")

 ) {
dmd_amp_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_amp_tmp.row_action = action_filtered_row.row_action ;
dmd_amp = dmd_amp_tmp;
} // closing filter/reject

// # Output table : 'dmd_vtm_ins'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_vtm")

 ) {
dmd_vtm_ins_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_vtm_ins_tmp.row_action = action_filtered_row.row_action ;
dmd_vtm_ins = dmd_vtm_ins_tmp;
} // closing filter/reject

// # Output table : 'dmd_amp_drugroute'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_amp_drugroute")

 ) {
dmd_amp_drugroute_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_amp_drugroute_tmp.row_action = action_filtered_row.row_action ;
dmd_amp_drugroute = dmd_amp_drugroute_tmp;
} // closing filter/reject

// # Output table : 'dmd_amp_excipient'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_amp_excipient")

 ) {
dmd_amp_excipient_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_amp_excipient_tmp.row_action = action_filtered_row.row_action ;
dmd_amp_excipient = dmd_amp_excipient_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_controldrug_map'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_vmp_controldrug")

 ) {
dmd_vmp_controldrug_map_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_vmp_controldrug_map_tmp.row_action = action_filtered_row.row_action ;
dmd_vmp_controldrug_map = dmd_vmp_controldrug_map_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_drugform_map'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_vmp_drugform")

 ) {
dmd_vmp_drugform_map_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_vmp_drugform_map_tmp.row_action = action_filtered_row.row_action ;
dmd_vmp_drugform_map = dmd_vmp_drugform_map_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_drugroute'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_vmp_drugroute")

 ) {
dmd_vmp_drugroute_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_vmp_drugroute_tmp.row_action = action_filtered_row.row_action ;
dmd_vmp_drugroute = dmd_vmp_drugroute_tmp;
} // closing filter/reject

// # Output table : 'dmd_vmp_ingredient_map'
// # Filter conditions 
if( 

action_filtered_row.dmd_entity_name != null && action_filtered_row.dmd_entity_name.equals("dmd_vmp_ingredient")

 ) {
dmd_vmp_ingredient_map_tmp.dmd_id = action_filtered_row.dmd_id ;
dmd_vmp_ingredient_map_tmp.row_action = action_filtered_row.row_action ;
dmd_vmp_ingredient_map = dmd_vmp_ingredient_map_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "dmd_vmp"
if(dmd_vmp != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row7HashKey.vpid = dmd_vmp.dmd_id ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
	
		  								forceLooprow7 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow7 = true;
			           		  	} // G 21
                    		  	
                    		

							row7Struct row7 = null;
                    		  	 
							

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row7'
									
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								
								if(!forceLooprow7) { // G 46
								
							
								 
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow7 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

dmd_vmp_ins_row = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'dmd_vmp_ins_row'
dmd_vmp_ins_row_tmp.vpid = row7.vpid;
dmd_vmp_ins_row_tmp.vpiddt = row7.vpiddt;
dmd_vmp_ins_row_tmp.vpidprev = row7.vpidprev;
dmd_vmp_ins_row_tmp.vtmid = row7.vtmid;
dmd_vmp_ins_row_tmp.invalid = row7.invalid;
dmd_vmp_ins_row_tmp.nm = row7.nm;
dmd_vmp_ins_row_tmp.abbrevnm = row7.abbrevnm;
dmd_vmp_ins_row_tmp.basiscd = row7.basiscd;
dmd_vmp_ins_row_tmp.nmdt = row7.nmdt;
dmd_vmp_ins_row_tmp.nmprev = row7.nmprev;
dmd_vmp_ins_row_tmp.basis_prevcd = row7.basis_prevcd;
dmd_vmp_ins_row_tmp.nmchangecd = row7.nmchangecd;
dmd_vmp_ins_row_tmp.comprodcd = row7.comprodcd;
dmd_vmp_ins_row_tmp.pres_statcd = row7.pres_statcd;
dmd_vmp_ins_row_tmp.sug_f = row7.sug_f;
dmd_vmp_ins_row_tmp.glu_f = row7.glu_f;
dmd_vmp_ins_row_tmp.pres_f = row7.pres_f;
dmd_vmp_ins_row_tmp.cfc_f = row7.cfc_f;
dmd_vmp_ins_row_tmp.non_availcd = row7.non_availcd;
dmd_vmp_ins_row_tmp.non_availdt = row7.non_availdt;
dmd_vmp_ins_row_tmp.df_indcd = row7.df_indcd;
dmd_vmp_ins_row_tmp.udfs = row7.udfs;
dmd_vmp_ins_row_tmp.udfs_uomcd = row7.udfs_uomcd;
dmd_vmp_ins_row_tmp.unit_dose_uomcd = row7.unit_dose_uomcd;
dmd_vmp_ins_row_tmp.col_val_hash = row7.col_val_hash;
dmd_vmp_ins_row = dmd_vmp_ins_row_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "dmd_vmp_ins_row"
if(dmd_vmp_ins_row != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_ins_row");
					}
					



            row8 = null;
        whetherReject_tDBOutput_3 = false;
                    if(dmd_vmp_ins_row.vpid == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, dmd_vmp_ins_row.vpid);
}

                    if(dmd_vmp_ins_row.vpiddt != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(dmd_vmp_ins_row.vpiddt.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(dmd_vmp_ins_row.vpidprev == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, dmd_vmp_ins_row.vpidprev);
}

                    if(dmd_vmp_ins_row.vtmid == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, dmd_vmp_ins_row.vtmid);
}

                    if(dmd_vmp_ins_row.invalid == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setShort(5, dmd_vmp_ins_row.invalid);
}

                    if(dmd_vmp_ins_row.nm == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, dmd_vmp_ins_row.nm);
}

                    if(dmd_vmp_ins_row.abbrevnm == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, dmd_vmp_ins_row.abbrevnm);
}

                    if(dmd_vmp_ins_row.basiscd == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(8, dmd_vmp_ins_row.basiscd);
}

                    if(dmd_vmp_ins_row.nmdt != null) {
pstmt_tDBOutput_3.setTimestamp(9, new java.sql.Timestamp(dmd_vmp_ins_row.nmdt.getTime()));
} else {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(dmd_vmp_ins_row.nmprev == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, dmd_vmp_ins_row.nmprev);
}

                    if(dmd_vmp_ins_row.basis_prevcd == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(11, dmd_vmp_ins_row.basis_prevcd);
}

                    if(dmd_vmp_ins_row.nmchangecd == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(12, dmd_vmp_ins_row.nmchangecd);
}

                    if(dmd_vmp_ins_row.comprodcd == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(13, dmd_vmp_ins_row.comprodcd);
}

                    if(dmd_vmp_ins_row.pres_statcd == null) {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(14, dmd_vmp_ins_row.pres_statcd);
}

                    if(dmd_vmp_ins_row.sug_f == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(15, dmd_vmp_ins_row.sug_f);
}

                    if(dmd_vmp_ins_row.glu_f == null) {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(16, dmd_vmp_ins_row.glu_f);
}

                    if(dmd_vmp_ins_row.pres_f == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(17, dmd_vmp_ins_row.pres_f);
}

                    if(dmd_vmp_ins_row.cfc_f == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(18, dmd_vmp_ins_row.cfc_f);
}

                    if(dmd_vmp_ins_row.non_availcd == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(19, dmd_vmp_ins_row.non_availcd);
}

                    if(dmd_vmp_ins_row.non_availdt != null) {
pstmt_tDBOutput_3.setTimestamp(20, new java.sql.Timestamp(dmd_vmp_ins_row.non_availdt.getTime()));
} else {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(dmd_vmp_ins_row.df_indcd == null) {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(21, dmd_vmp_ins_row.df_indcd);
}

                    pstmt_tDBOutput_3.setBigDecimal(22, dmd_vmp_ins_row.udfs);

                    if(dmd_vmp_ins_row.udfs_uomcd == null) {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(23, dmd_vmp_ins_row.udfs_uomcd);
}

                    if(dmd_vmp_ins_row.unit_dose_uomcd == null) {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(24, dmd_vmp_ins_row.unit_dose_uomcd);
}

                    if(dmd_vmp_ins_row.col_val_hash == null) {
pstmt_tDBOutput_3.setNull(25, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(25, dmd_vmp_ins_row.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
                            row8 = new row8Struct();
                                row8.vpid = dmd_vmp_ins_row.vpid;
                                row8.vpiddt = dmd_vmp_ins_row.vpiddt;
                                row8.vpidprev = dmd_vmp_ins_row.vpidprev;
                                row8.vtmid = dmd_vmp_ins_row.vtmid;
                                row8.invalid = dmd_vmp_ins_row.invalid;
                                row8.nm = dmd_vmp_ins_row.nm;
                                row8.abbrevnm = dmd_vmp_ins_row.abbrevnm;
                                row8.basiscd = dmd_vmp_ins_row.basiscd;
                                row8.nmdt = dmd_vmp_ins_row.nmdt;
                                row8.nmprev = dmd_vmp_ins_row.nmprev;
                                row8.basis_prevcd = dmd_vmp_ins_row.basis_prevcd;
                                row8.nmchangecd = dmd_vmp_ins_row.nmchangecd;
                                row8.comprodcd = dmd_vmp_ins_row.comprodcd;
                                row8.pres_statcd = dmd_vmp_ins_row.pres_statcd;
                                row8.sug_f = dmd_vmp_ins_row.sug_f;
                                row8.glu_f = dmd_vmp_ins_row.glu_f;
                                row8.pres_f = dmd_vmp_ins_row.pres_f;
                                row8.cfc_f = dmd_vmp_ins_row.cfc_f;
                                row8.non_availcd = dmd_vmp_ins_row.non_availcd;
                                row8.non_availdt = dmd_vmp_ins_row.non_availdt;
                                row8.df_indcd = dmd_vmp_ins_row.df_indcd;
                                row8.udfs = dmd_vmp_ins_row.udfs;
                                row8.udfs_uomcd = dmd_vmp_ins_row.udfs_uomcd;
                                row8.unit_dose_uomcd = dmd_vmp_ins_row.unit_dose_uomcd;
                                row8.col_val_hash = dmd_vmp_ins_row.col_val_hash;
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
            	    	
            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    		if (ne_tDBOutput_3 != null) {
			    			throw(sqle_tDBOutput_3);
			    		}else{
			            	throw(e_tDBOutput_3);
			            }
			    	
				}
            }
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row8.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.vpiddt != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(row8.vpiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.vpidprev != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.vpidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.vtmid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.vtmid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.nm != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.basiscd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.basiscd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.nmdt != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(row8.nmdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.nmprev != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.nmprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.basis_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.basis_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.nmchangecd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.nmchangecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.comprodcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.comprodcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.pres_statcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.pres_statcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.sug_f != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.sug_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.glu_f != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.glu_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.pres_f != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.pres_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.cfc_f != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.cfc_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.non_availcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.non_availcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.non_availdt != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(row8.non_availdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.df_indcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.df_indcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.udfs != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								row8.udfs.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.udfs_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.udfs_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.unit_dose_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.unit_dose_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "dmd_vmp_ins_row"



	
		} // close loop of lookup 'row7' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "dmd_vmp"




// Start of branch "dmd_amp"
if(dmd_amp != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row11HashKey.apid = dmd_amp.dmd_id ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLooprow11 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow11 = true;
			           		  	} // G 21
                    		  	
                    		

							row11Struct row11 = null;
                    		  	 
							

								while ((tHash_Lookup_row11 != null && tHash_Lookup_row11.hasNext()) || forceLooprow11) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row11'
									
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								
								if(!forceLooprow11) { // G 46
								
							
								 
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow11 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

amp_ins_row = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'amp_ins_row'
amp_ins_row_tmp.apid = row11.apid;
amp_ins_row_tmp.invalid = row11.invalid;
amp_ins_row_tmp.vpid = row11.vpid;
amp_ins_row_tmp.nm = row11.nm;
amp_ins_row_tmp.abbrevnm = row11.abbrevnm;
amp_ins_row_tmp.desc = row11.desc;
amp_ins_row_tmp.nmdt = row11.nmdt;
amp_ins_row_tmp.nm_prev = row11.nm_prev;
amp_ins_row_tmp.suppcd = row11.suppcd;
amp_ins_row_tmp.lic_authcd = row11.lic_authcd;
amp_ins_row_tmp.lic_auth_prevcd = row11.lic_auth_prevcd;
amp_ins_row_tmp.lic_authchangecd = row11.lic_authchangecd;
amp_ins_row_tmp.lic_authchangedt = row11.lic_authchangedt;
amp_ins_row_tmp.combprodcd = row11.combprodcd;
amp_ins_row_tmp.flavourcd = row11.flavourcd;
amp_ins_row_tmp.ema = row11.ema;
amp_ins_row_tmp.parallel_import = row11.parallel_import;
amp_ins_row_tmp.avail_restrictcd = row11.avail_restrictcd;
amp_ins_row_tmp.col_val_hash = row11.col_val_hash;
amp_ins_row = amp_ins_row_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "amp_ins_row"
if(amp_ins_row != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_ins_row");
					}
					



            row12 = null;
        whetherReject_tDBOutput_7 = false;
                    if(amp_ins_row.apid == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, amp_ins_row.apid);
}

                    if(amp_ins_row.invalid == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setShort(2, amp_ins_row.invalid);
}

                    if(amp_ins_row.vpid == null) {
pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(3, amp_ins_row.vpid);
}

                    if(amp_ins_row.nm == null) {
pstmt_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(4, amp_ins_row.nm);
}

                    if(amp_ins_row.abbrevnm == null) {
pstmt_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(5, amp_ins_row.abbrevnm);
}

                    if(amp_ins_row.desc == null) {
pstmt_tDBOutput_7.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(6, amp_ins_row.desc);
}

                    if(amp_ins_row.nmdt != null) {
pstmt_tDBOutput_7.setTimestamp(7, new java.sql.Timestamp(amp_ins_row.nmdt.getTime()));
} else {
pstmt_tDBOutput_7.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(amp_ins_row.nm_prev == null) {
pstmt_tDBOutput_7.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(8, amp_ins_row.nm_prev);
}

                    if(amp_ins_row.suppcd == null) {
pstmt_tDBOutput_7.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(9, amp_ins_row.suppcd);
}

                    if(amp_ins_row.lic_authcd == null) {
pstmt_tDBOutput_7.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(10, amp_ins_row.lic_authcd);
}

                    if(amp_ins_row.lic_auth_prevcd == null) {
pstmt_tDBOutput_7.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(11, amp_ins_row.lic_auth_prevcd);
}

                    if(amp_ins_row.lic_authchangecd == null) {
pstmt_tDBOutput_7.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(12, amp_ins_row.lic_authchangecd);
}

                    if(amp_ins_row.lic_authchangedt != null) {
pstmt_tDBOutput_7.setTimestamp(13, new java.sql.Timestamp(amp_ins_row.lic_authchangedt.getTime()));
} else {
pstmt_tDBOutput_7.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(amp_ins_row.combprodcd == null) {
pstmt_tDBOutput_7.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(14, amp_ins_row.combprodcd);
}

                    if(amp_ins_row.flavourcd == null) {
pstmt_tDBOutput_7.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(15, amp_ins_row.flavourcd);
}

                    if(amp_ins_row.ema == null) {
pstmt_tDBOutput_7.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(16, amp_ins_row.ema);
}

                    if(amp_ins_row.parallel_import == null) {
pstmt_tDBOutput_7.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(17, amp_ins_row.parallel_import);
}

                    if(amp_ins_row.avail_restrictcd == null) {
pstmt_tDBOutput_7.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(18, amp_ins_row.avail_restrictcd);
}

                    if(amp_ins_row.col_val_hash == null) {
pstmt_tDBOutput_7.setNull(19, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_7.setObject(19, amp_ins_row.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_7.addBatch();
    		nb_line_tDBOutput_7++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_7++;
    		  
            if(!whetherReject_tDBOutput_7) {
                            row12 = new row12Struct();
                                row12.apid = amp_ins_row.apid;
                                row12.invalid = amp_ins_row.invalid;
                                row12.vpid = amp_ins_row.vpid;
                                row12.nm = amp_ins_row.nm;
                                row12.abbrevnm = amp_ins_row.abbrevnm;
                                row12.desc = amp_ins_row.desc;
                                row12.nmdt = amp_ins_row.nmdt;
                                row12.nm_prev = amp_ins_row.nm_prev;
                                row12.suppcd = amp_ins_row.suppcd;
                                row12.lic_authcd = amp_ins_row.lic_authcd;
                                row12.lic_auth_prevcd = amp_ins_row.lic_auth_prevcd;
                                row12.lic_authchangecd = amp_ins_row.lic_authchangecd;
                                row12.lic_authchangedt = amp_ins_row.lic_authchangedt;
                                row12.combprodcd = amp_ins_row.combprodcd;
                                row12.flavourcd = amp_ins_row.flavourcd;
                                row12.ema = amp_ins_row.ema;
                                row12.parallel_import = amp_ins_row.parallel_import;
                                row12.avail_restrictcd = amp_ins_row.avail_restrictcd;
                                row12.col_val_hash = amp_ins_row.col_val_hash;
            }
    			if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
						int countSum_tDBOutput_7 = 0;
						    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
				    	
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
            	    	batchSizeCounter_tDBOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_7){
				    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
				    	String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						}else{
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}
				    	
				    	int countSum_tDBOutput_7 = 0;
						for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
						
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
				    	System.err.println(errormessage_tDBOutput_7);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_7++;
                if(commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
                if ((batchSize_tDBOutput_7 > 0) && (batchSizeCounter_tDBOutput_7 > 0)) {
                try {
                		int countSum_tDBOutput_7 = 0;
                		    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
            	    	
            	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
            	    	
                batchSizeCounter_tDBOutput_7 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_7){
			    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
			    	String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
					}else{
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}
			    	
			    	int countSum_tDBOutput_7 = 0;
					for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					
			    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
			    	
			    	System.err.println(errormessage_tDBOutput_7);
			    	
				}
            }
                	conn_tDBOutput_7.commit();
                	
                	commitCounter_tDBOutput_7=0;
                }

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row12.apid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.nm != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.desc != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.desc)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.nmdt != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								FormatterUtils.format_Date(row12.nmdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.nm_prev != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.nm_prev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.suppcd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.suppcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.lic_authcd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.lic_authcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.lic_auth_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.lic_auth_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.lic_authchangecd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.lic_authchangecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.lic_authchangedt != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								FormatterUtils.format_Date(row12.lic_authchangedt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.combprodcd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.combprodcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.flavourcd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.flavourcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.ema != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.ema)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.parallel_import != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.parallel_import)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.avail_restrictcd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.avail_restrictcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row12.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row12.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "amp_ins_row"



	
		} // close loop of lookup 'row11' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "dmd_amp"




// Start of branch "dmd_vtm_ins"
if(dmd_vtm_ins != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vtm_ins");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row15HashKey.vtmid = dmd_vtm_ins.dmd_id ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
	
		  								forceLooprow15 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow15 = true;
			           		  	} // G 21
                    		  	
                    		

							row15Struct row15 = null;
                    		  	 
							

								while ((tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) || forceLooprow15) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row15'
									
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								
								if(!forceLooprow15) { // G 46
								
							
								 
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow15 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

dmd_vtm_ins_data = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'dmd_vtm_ins_data'
dmd_vtm_ins_data_tmp.vtmid = row15.vtmid;
dmd_vtm_ins_data_tmp.invalid = row15.invalid;
dmd_vtm_ins_data_tmp.nm = row15.nm;
dmd_vtm_ins_data_tmp.abbrevnm = row15.abbrevnm;
dmd_vtm_ins_data_tmp.vtmidprev = row15.vtmidprev;
dmd_vtm_ins_data_tmp.vtmiddt = row15.vtmiddt;
dmd_vtm_ins_data_tmp.col_val_hash = row15.col_val_hash;
dmd_vtm_ins_data = dmd_vtm_ins_data_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "dmd_vtm_ins_data"
if(dmd_vtm_ins_data != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vtm_ins_data");
					}
					



            row22 = null;
        whetherReject_tDBOutput_10 = false;
                    if(dmd_vtm_ins_data.vtmid == null) {
pstmt_tDBOutput_10.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(1, dmd_vtm_ins_data.vtmid);
}

                    if(dmd_vtm_ins_data.invalid == null) {
pstmt_tDBOutput_10.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_10.setShort(2, dmd_vtm_ins_data.invalid);
}

                    if(dmd_vtm_ins_data.nm == null) {
pstmt_tDBOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(3, dmd_vtm_ins_data.nm);
}

                    if(dmd_vtm_ins_data.abbrevnm == null) {
pstmt_tDBOutput_10.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(4, dmd_vtm_ins_data.abbrevnm);
}

                    if(dmd_vtm_ins_data.vtmidprev == null) {
pstmt_tDBOutput_10.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(5, dmd_vtm_ins_data.vtmidprev);
}

                    if(dmd_vtm_ins_data.vtmiddt != null) {
pstmt_tDBOutput_10.setTimestamp(6, new java.sql.Timestamp(dmd_vtm_ins_data.vtmiddt.getTime()));
} else {
pstmt_tDBOutput_10.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(dmd_vtm_ins_data.col_val_hash == null) {
pstmt_tDBOutput_10.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_10.setObject(7, dmd_vtm_ins_data.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_10.addBatch();
    		nb_line_tDBOutput_10++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_10++;
    		  
            if(!whetherReject_tDBOutput_10) {
                            row22 = new row22Struct();
                                row22.vtmid = dmd_vtm_ins_data.vtmid;
                                row22.invalid = dmd_vtm_ins_data.invalid;
                                row22.nm = dmd_vtm_ins_data.nm;
                                row22.abbrevnm = dmd_vtm_ins_data.abbrevnm;
                                row22.vtmidprev = dmd_vtm_ins_data.vtmidprev;
                                row22.vtmiddt = dmd_vtm_ins_data.vtmiddt;
                                row22.col_val_hash = dmd_vtm_ins_data.col_val_hash;
            }
    			if ((batchSize_tDBOutput_10 > 0) && (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
                try {
						int countSum_tDBOutput_10 = 0;
						    
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
				    	
				    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
            	    	batchSizeCounter_tDBOutput_10 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_10){
				    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
				    	String errormessage_tDBOutput_10;
						if (ne_tDBOutput_10 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
							errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
						}else{
							errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
						}
				    	
				    	int countSum_tDBOutput_10 = 0;
						for(int countEach_tDBOutput_10: e_tDBOutput_10.getUpdateCounts()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
						
				    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
				    	System.err.println(errormessage_tDBOutput_10);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_10++;
                if(commitEvery_tDBOutput_10 <= commitCounter_tDBOutput_10) {
                if ((batchSize_tDBOutput_10 > 0) && (batchSizeCounter_tDBOutput_10 > 0)) {
                try {
                		int countSum_tDBOutput_10 = 0;
                		    
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
            	    	
            	    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
            	    	
                batchSizeCounter_tDBOutput_10 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_10){
			    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
			    	String errormessage_tDBOutput_10;
					if (ne_tDBOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
						errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
					}else{
						errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
					}
			    	
			    	int countSum_tDBOutput_10 = 0;
					for(int countEach_tDBOutput_10: e_tDBOutput_10.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
					
			    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
			    	
			    	System.err.println(errormessage_tDBOutput_10);
			    	
				}
            }
                	conn_tDBOutput_10.commit();
                	
                	commitCounter_tDBOutput_10=0;
                }

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tLogRow_13 main ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_13 = new StringBuilder();




   				
	    		if(row22.vtmid != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row22.vtmid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row22.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row22.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row22.nm != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row22.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row22.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row22.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row22.vtmidprev != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row22.vtmidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row22.vtmiddt != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
								FormatterUtils.format_Date(row22.vtmiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row22.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row22.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_13);
                    }
                    consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
                    consoleOut_tLogRow_13.flush();
                    nb_line_tLogRow_13++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_13++;

/**
 * [tLogRow_13 main ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "dmd_vtm_ins_data"



	
		} // close loop of lookup 'row15' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "dmd_vtm_ins"




// Start of branch "dmd_amp_drugroute"
if(dmd_amp_drugroute != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp_drugroute");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row23HashKey.apid = dmd_amp_drugroute.dmd_id ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
	
		  								forceLooprow23 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow23 = true;
			           		  	} // G 21
                    		  	
                    		

							row23Struct row23 = null;
                    		  	 
							

								while ((tHash_Lookup_row23 != null && tHash_Lookup_row23.hasNext()) || forceLooprow23) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row23'
									
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								
								if(!forceLooprow23) { // G 46
								
							
								 
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow23 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

dmd_amp_drugroute_ins = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'dmd_amp_drugroute_ins'
dmd_amp_drugroute_ins_tmp.apid = row23.apid;
dmd_amp_drugroute_ins_tmp.routecd = row23.routecd;
dmd_amp_drugroute_ins_tmp.col_val_hash = row23.col_val_hash;
dmd_amp_drugroute_ins = dmd_amp_drugroute_ins_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "dmd_amp_drugroute_ins"
if(dmd_amp_drugroute_ins != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp_drugroute_ins");
					}
					



            row24 = null;
        whetherReject_tDBOutput_5 = false;
                    if(dmd_amp_drugroute_ins.apid == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, dmd_amp_drugroute_ins.apid);
}

                    if(dmd_amp_drugroute_ins.routecd == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, dmd_amp_drugroute_ins.routecd);
}

                    if(dmd_amp_drugroute_ins.col_val_hash == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_5.setObject(3, dmd_amp_drugroute_ins.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
            if(!whetherReject_tDBOutput_5) {
                            row24 = new row24Struct();
                                row24.apid = dmd_amp_drugroute_ins.apid;
                                row24.routecd = dmd_amp_drugroute_ins.routecd;
                                row24.col_val_hash = dmd_amp_drugroute_ins.col_val_hash;
            }
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
                try {
                		int countSum_tDBOutput_5 = 0;
                		    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
            	    	
            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
                batchSizeCounter_tDBOutput_5 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_5){
			    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
			    	String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					}else{
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}
			    	
			    	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
			    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
			    	
			    	System.err.println(errormessage_tDBOutput_5);
			    	
				}
            }
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tLogRow_14 main ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_14 = new StringBuilder();




   				
	    		if(row24.apid != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row24.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row24.routecd != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row24.routecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row24.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row24.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_14 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_14);
                    }
                    consoleOut_tLogRow_14.println(strBuffer_tLogRow_14.toString());
                    consoleOut_tLogRow_14.flush();
                    nb_line_tLogRow_14++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_14++;

/**
 * [tLogRow_14 main ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "dmd_amp_drugroute_ins"



	
		} // close loop of lookup 'row23' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "dmd_amp_drugroute"




// Start of branch "dmd_amp_excipient"
if(dmd_amp_excipient != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp_excipient");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row25HashKey.apid = dmd_amp_excipient.dmd_id ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
	
		  								forceLooprow25 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow25 = true;
			           		  	} // G 21
                    		  	
                    		

							row25Struct row25 = null;
                    		  	 
							

								while ((tHash_Lookup_row25 != null && tHash_Lookup_row25.hasNext()) || forceLooprow25) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row25'
									
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								
								if(!forceLooprow25) { // G 46
								
							
								 
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow25 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

dmd_amp_excipient_ins = null;

if(!rejectedInnerJoin_tMap_7 ) {

// # Output table : 'dmd_amp_excipient_ins'
dmd_amp_excipient_ins_tmp.apid = row25.apid;
dmd_amp_excipient_ins_tmp.isid = row25.isid;
dmd_amp_excipient_ins_tmp.strnth = row25.strnth;
dmd_amp_excipient_ins_tmp.strnth_uomcd = row25.strnth_uomcd;
dmd_amp_excipient_ins_tmp.col_val_hash = row25.col_val_hash;
dmd_amp_excipient_ins = dmd_amp_excipient_ins_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "dmd_amp_excipient_ins"
if(dmd_amp_excipient_ins != null) { 



	
	/**
	 * [tDBOutput_17 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_amp_excipient_ins");
					}
					



            row26 = null;
        whetherReject_tDBOutput_17 = false;
                    if(dmd_amp_excipient_ins.apid == null) {
pstmt_tDBOutput_17.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(1, dmd_amp_excipient_ins.apid);
}

                    if(dmd_amp_excipient_ins.isid == null) {
pstmt_tDBOutput_17.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(2, dmd_amp_excipient_ins.isid);
}

                    pstmt_tDBOutput_17.setBigDecimal(3, dmd_amp_excipient_ins.strnth);

                    if(dmd_amp_excipient_ins.strnth_uomcd == null) {
pstmt_tDBOutput_17.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(4, dmd_amp_excipient_ins.strnth_uomcd);
}

                    if(dmd_amp_excipient_ins.col_val_hash == null) {
pstmt_tDBOutput_17.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_17.setObject(5, dmd_amp_excipient_ins.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_17.addBatch();
    		nb_line_tDBOutput_17++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_17++;
    		  
            if(!whetherReject_tDBOutput_17) {
                            row26 = new row26Struct();
                                row26.apid = dmd_amp_excipient_ins.apid;
                                row26.isid = dmd_amp_excipient_ins.isid;
                                row26.strnth = dmd_amp_excipient_ins.strnth;
                                row26.strnth_uomcd = dmd_amp_excipient_ins.strnth_uomcd;
                                row26.col_val_hash = dmd_amp_excipient_ins.col_val_hash;
            }
    			if ((batchSize_tDBOutput_17 > 0) && (batchSize_tDBOutput_17 <= batchSizeCounter_tDBOutput_17)) {
                try {
						int countSum_tDBOutput_17 = 0;
						    
						for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
				    	
				    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
            	    	batchSizeCounter_tDBOutput_17 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_17){
				    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
				    	String errormessage_tDBOutput_17;
						if (ne_tDBOutput_17 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
							errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
						}else{
							errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
						}
				    	
				    	int countSum_tDBOutput_17 = 0;
						for(int countEach_tDBOutput_17: e_tDBOutput_17.getUpdateCounts()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
						
				    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
				    	System.err.println(errormessage_tDBOutput_17);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_17++;
                if(commitEvery_tDBOutput_17 <= commitCounter_tDBOutput_17) {
                if ((batchSize_tDBOutput_17 > 0) && (batchSizeCounter_tDBOutput_17 > 0)) {
                try {
                		int countSum_tDBOutput_17 = 0;
                		    
						for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
            	    	
            	    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
            	    	
                batchSizeCounter_tDBOutput_17 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_17){
			    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
			    	String errormessage_tDBOutput_17;
					if (ne_tDBOutput_17 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
						errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
					}else{
						errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
					}
			    	
			    	int countSum_tDBOutput_17 = 0;
					for(int countEach_tDBOutput_17: e_tDBOutput_17.getUpdateCounts()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
					}
					
			    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
			    	
			    	System.err.println(errormessage_tDBOutput_17);
			    	
				}
            }
                	conn_tDBOutput_17.commit();
                	
                	commitCounter_tDBOutput_17=0;
                }

 


	tos_count_tDBOutput_17++;

/**
 * [tDBOutput_17 main ] stop
 */
	
	/**
	 * [tDBOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	

 



/**
 * [tDBOutput_17 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tLogRow_15 main ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_15 = new StringBuilder();




   				
	    		if(row26.apid != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row26.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row26.isid != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row26.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row26.strnth != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
								row26.strnth.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row26.strnth_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row26.strnth_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row26.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row26.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_15 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_15);
                    }
                    consoleOut_tLogRow_15.println(strBuffer_tLogRow_15.toString());
                    consoleOut_tLogRow_15.flush();
                    nb_line_tLogRow_15++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_15++;

/**
 * [tLogRow_15 main ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tDBOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	

 



/**
 * [tDBOutput_17 process_data_end ] stop
 */

} // End of branch "dmd_amp_excipient_ins"



	
		} // close loop of lookup 'row25' // G_TM_M_043
	
	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "dmd_amp_excipient"




// Start of branch "dmd_vmp_controldrug_map"
if(dmd_vmp_controldrug_map != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_controldrug_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row27HashKey.vpid = dmd_vmp_controldrug_map.dmd_id ;
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row27.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
	
		  								forceLooprow27 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow27 = true;
			           		  	} // G 21
                    		  	
                    		

							row27Struct row27 = null;
                    		  	 
							

								while ((tHash_Lookup_row27 != null && tHash_Lookup_row27.hasNext()) || forceLooprow27) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row27'
									
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								
								if(!forceLooprow27) { // G 46
								
							
								 
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow27 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

dmd_vmp_controldrug_ins = null;

if(!rejectedInnerJoin_tMap_9 ) {

// # Output table : 'dmd_vmp_controldrug_ins'
dmd_vmp_controldrug_ins_tmp.vpid = row27.vpid;
dmd_vmp_controldrug_ins_tmp.catcd = row27.catcd;
dmd_vmp_controldrug_ins_tmp.catdt = row27.catdt;
dmd_vmp_controldrug_ins_tmp.cat_prevcd = row27.cat_prevcd;
dmd_vmp_controldrug_ins_tmp.col_val_hash = row27.col_val_hash;
dmd_vmp_controldrug_ins = dmd_vmp_controldrug_ins_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "dmd_vmp_controldrug_ins"
if(dmd_vmp_controldrug_ins != null) { 



	
	/**
	 * [tDBOutput_18 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_controldrug_ins");
					}
					



            row28 = null;
        whetherReject_tDBOutput_18 = false;
                    if(dmd_vmp_controldrug_ins.vpid == null) {
pstmt_tDBOutput_18.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(1, dmd_vmp_controldrug_ins.vpid);
}

                    if(dmd_vmp_controldrug_ins.catcd == null) {
pstmt_tDBOutput_18.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_18.setLong(2, dmd_vmp_controldrug_ins.catcd);
}

                    if(dmd_vmp_controldrug_ins.catdt != null) {
pstmt_tDBOutput_18.setTimestamp(3, new java.sql.Timestamp(dmd_vmp_controldrug_ins.catdt.getTime()));
} else {
pstmt_tDBOutput_18.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(dmd_vmp_controldrug_ins.cat_prevcd == null) {
pstmt_tDBOutput_18.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_18.setLong(4, dmd_vmp_controldrug_ins.cat_prevcd);
}

                    if(dmd_vmp_controldrug_ins.col_val_hash == null) {
pstmt_tDBOutput_18.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_18.setObject(5, dmd_vmp_controldrug_ins.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_18.addBatch();
    		nb_line_tDBOutput_18++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_18++;
    		  
            if(!whetherReject_tDBOutput_18) {
                            row28 = new row28Struct();
                                row28.vpid = dmd_vmp_controldrug_ins.vpid;
                                row28.catcd = dmd_vmp_controldrug_ins.catcd;
                                row28.catdt = dmd_vmp_controldrug_ins.catdt;
                                row28.cat_prevcd = dmd_vmp_controldrug_ins.cat_prevcd;
                                row28.col_val_hash = dmd_vmp_controldrug_ins.col_val_hash;
            }
    			if ((batchSize_tDBOutput_18 > 0) && (batchSize_tDBOutput_18 <= batchSizeCounter_tDBOutput_18)) {
                try {
						int countSum_tDBOutput_18 = 0;
						    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
				    	
				    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
            	    	batchSizeCounter_tDBOutput_18 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_18){
				    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
				    	String errormessage_tDBOutput_18;
						if (ne_tDBOutput_18 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
							errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
						}else{
							errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
						}
				    	
				    	int countSum_tDBOutput_18 = 0;
						for(int countEach_tDBOutput_18: e_tDBOutput_18.getUpdateCounts()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
						
				    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
				    	System.err.println(errormessage_tDBOutput_18);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_18++;
                if(commitEvery_tDBOutput_18 <= commitCounter_tDBOutput_18) {
                if ((batchSize_tDBOutput_18 > 0) && (batchSizeCounter_tDBOutput_18 > 0)) {
                try {
                		int countSum_tDBOutput_18 = 0;
                		    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
            	    	
            	    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
            	    	
                batchSizeCounter_tDBOutput_18 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_18){
			    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
			    	String errormessage_tDBOutput_18;
					if (ne_tDBOutput_18 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
						errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
					}else{
						errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
					}
			    	
			    	int countSum_tDBOutput_18 = 0;
					for(int countEach_tDBOutput_18: e_tDBOutput_18.getUpdateCounts()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}
					
			    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
			    	
			    	System.err.println(errormessage_tDBOutput_18);
			    	
				}
            }
                	conn_tDBOutput_18.commit();
                	
                	commitCounter_tDBOutput_18=0;
                }

 


	tos_count_tDBOutput_18++;

/**
 * [tDBOutput_18 main ] stop
 */
	
	/**
	 * [tDBOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tLogRow_16 main ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_16 = new StringBuilder();




   				
	    		if(row28.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row28.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row28.catcd != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row28.catcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row28.catdt != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
								FormatterUtils.format_Date(row28.catdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row28.cat_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row28.cat_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row28.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row28.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_16);
                    }
                    consoleOut_tLogRow_16.println(strBuffer_tLogRow_16.toString());
                    consoleOut_tLogRow_16.flush();
                    nb_line_tLogRow_16++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_16++;

/**
 * [tLogRow_16 main ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tDBOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_end ] stop
 */

} // End of branch "dmd_vmp_controldrug_ins"



	
		} // close loop of lookup 'row27' // G_TM_M_043
	
	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "dmd_vmp_controldrug_map"




// Start of branch "dmd_vmp_drugform_map"
if(dmd_vmp_drugform_map != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_drugform_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row29HashKey.vpid = dmd_vmp_drugform_map.dmd_id ;
                        		    		

								
		                        	row29HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_10 = true;
	  								
						
									
	
		  								forceLooprow29 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow29 = true;
			           		  	} // G 21
                    		  	
                    		

							row29Struct row29 = null;
                    		  	 
							

								while ((tHash_Lookup_row29 != null && tHash_Lookup_row29.hasNext()) || forceLooprow29) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row29'
									
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								
								if(!forceLooprow29) { // G 46
								
							
								 
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow29 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

drugform_ins = null;

if(!rejectedInnerJoin_tMap_10 ) {

// # Output table : 'drugform_ins'
drugform_ins_tmp.vpid = row29.vpid;
drugform_ins_tmp.formcd = row29.formcd;
drugform_ins_tmp.col_val_hash = row29.col_val_hash;
drugform_ins = drugform_ins_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "drugform_ins"
if(drugform_ins != null) { 



	
	/**
	 * [tDBOutput_19 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"drugform_ins");
					}
					



            row30 = null;
        whetherReject_tDBOutput_19 = false;
                    if(drugform_ins.vpid == null) {
pstmt_tDBOutput_19.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(1, drugform_ins.vpid);
}

                    if(drugform_ins.formcd == null) {
pstmt_tDBOutput_19.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(2, drugform_ins.formcd);
}

                    if(drugform_ins.col_val_hash == null) {
pstmt_tDBOutput_19.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_19.setObject(3, drugform_ins.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_19.addBatch();
    		nb_line_tDBOutput_19++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_19++;
    		  
            if(!whetherReject_tDBOutput_19) {
                            row30 = new row30Struct();
                                row30.vpid = drugform_ins.vpid;
                                row30.formcd = drugform_ins.formcd;
                                row30.col_val_hash = drugform_ins.col_val_hash;
            }
    			if ((batchSize_tDBOutput_19 > 0) && (batchSize_tDBOutput_19 <= batchSizeCounter_tDBOutput_19)) {
                try {
						int countSum_tDBOutput_19 = 0;
						    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
				    	
				    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
            	    	batchSizeCounter_tDBOutput_19 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_19){
				    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
				    	String errormessage_tDBOutput_19;
						if (ne_tDBOutput_19 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
							errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
						}else{
							errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
						}
				    	
				    	int countSum_tDBOutput_19 = 0;
						for(int countEach_tDBOutput_19: e_tDBOutput_19.getUpdateCounts()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
						
				    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
				    	System.err.println(errormessage_tDBOutput_19);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_19++;
                if(commitEvery_tDBOutput_19 <= commitCounter_tDBOutput_19) {
                if ((batchSize_tDBOutput_19 > 0) && (batchSizeCounter_tDBOutput_19 > 0)) {
                try {
                		int countSum_tDBOutput_19 = 0;
                		    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
            	    	
            	    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
            	    	
                batchSizeCounter_tDBOutput_19 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_19){
			    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
			    	String errormessage_tDBOutput_19;
					if (ne_tDBOutput_19 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
						errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
					}else{
						errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
					}
			    	
			    	int countSum_tDBOutput_19 = 0;
					for(int countEach_tDBOutput_19: e_tDBOutput_19.getUpdateCounts()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}
					
			    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
			    	
			    	System.err.println(errormessage_tDBOutput_19);
			    	
				}
            }
                	conn_tDBOutput_19.commit();
                	
                	commitCounter_tDBOutput_19=0;
                }

 


	tos_count_tDBOutput_19++;

/**
 * [tDBOutput_19 main ] stop
 */
	
	/**
	 * [tDBOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tLogRow_17 main ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_17 = new StringBuilder();




   				
	    		if(row30.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.formcd != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.formcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_17 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_17);
                    }
                    consoleOut_tLogRow_17.println(strBuffer_tLogRow_17.toString());
                    consoleOut_tLogRow_17.flush();
                    nb_line_tLogRow_17++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_17++;

/**
 * [tLogRow_17 main ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tDBOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_end ] stop
 */

} // End of branch "drugform_ins"



	
		} // close loop of lookup 'row29' // G_TM_M_043
	
	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "dmd_vmp_drugform_map"




// Start of branch "dmd_vmp_drugroute"
if(dmd_vmp_drugroute != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_drugroute");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row31" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow31 = false;
       		  	    	
       		  	    	
 							row31Struct row31ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row31HashKey.vpid = dmd_vmp_drugroute.dmd_id ;
                        		    		

								
		                        	row31HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row31.lookup( row31HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
	
		  								forceLooprow31 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow31 = true;
			           		  	} // G 21
                    		  	
                    		

							row31Struct row31 = null;
                    		  	 
							

								while ((tHash_Lookup_row31 != null && tHash_Lookup_row31.hasNext()) || forceLooprow31) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row31'
									
                    		  	 
							   
                    		  	 
	       		  	    	row31Struct fromLookup_row31 = null;
							row31 = row31Default;
										 
							
								
								if(!forceLooprow31) { // G 46
								
							
								 
							
								
								fromLookup_row31 = tHash_Lookup_row31.next();

							

							if(fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow31 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

drugroute_ins = null;

if(!rejectedInnerJoin_tMap_11 ) {

// # Output table : 'drugroute_ins'
drugroute_ins_tmp.vpid = row31.vpid;
drugroute_ins_tmp.routecd = row31.routecd;
drugroute_ins_tmp.col_val_hash = row31.col_val_hash;
drugroute_ins = drugroute_ins_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "drugroute_ins"
if(drugroute_ins != null) { 



	
	/**
	 * [tDBOutput_20 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"drugroute_ins");
					}
					



            row32 = null;
        whetherReject_tDBOutput_20 = false;
                    if(drugroute_ins.vpid == null) {
pstmt_tDBOutput_20.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(1, drugroute_ins.vpid);
}

                    if(drugroute_ins.routecd == null) {
pstmt_tDBOutput_20.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(2, drugroute_ins.routecd);
}

                    if(drugroute_ins.col_val_hash == null) {
pstmt_tDBOutput_20.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_20.setObject(3, drugroute_ins.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_20.addBatch();
    		nb_line_tDBOutput_20++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_20++;
    		  
            if(!whetherReject_tDBOutput_20) {
                            row32 = new row32Struct();
                                row32.vpid = drugroute_ins.vpid;
                                row32.routecd = drugroute_ins.routecd;
                                row32.col_val_hash = drugroute_ins.col_val_hash;
            }
    			if ((batchSize_tDBOutput_20 > 0) && (batchSize_tDBOutput_20 <= batchSizeCounter_tDBOutput_20)) {
                try {
						int countSum_tDBOutput_20 = 0;
						    
						for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}
				    	
				    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
				    	
            	    	batchSizeCounter_tDBOutput_20 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_20){
				    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
				    	String errormessage_tDBOutput_20;
						if (ne_tDBOutput_20 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
							errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
						}else{
							errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
						}
				    	
				    	int countSum_tDBOutput_20 = 0;
						for(int countEach_tDBOutput_20: e_tDBOutput_20.getUpdateCounts()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}
						
				    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
				    	
				    	System.err.println(errormessage_tDBOutput_20);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_20++;
                if(commitEvery_tDBOutput_20 <= commitCounter_tDBOutput_20) {
                if ((batchSize_tDBOutput_20 > 0) && (batchSizeCounter_tDBOutput_20 > 0)) {
                try {
                		int countSum_tDBOutput_20 = 0;
                		    
						for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}
            	    	
            	    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
            	    	
                batchSizeCounter_tDBOutput_20 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_20){
			    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
			    	String errormessage_tDBOutput_20;
					if (ne_tDBOutput_20 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
						errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
					}else{
						errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
					}
			    	
			    	int countSum_tDBOutput_20 = 0;
					for(int countEach_tDBOutput_20: e_tDBOutput_20.getUpdateCounts()) {
						countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
					}
					
			    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
			    	
			    	System.err.println(errormessage_tDBOutput_20);
			    	
				}
            }
                	conn_tDBOutput_20.commit();
                	
                	commitCounter_tDBOutput_20=0;
                }

 


	tos_count_tDBOutput_20++;

/**
 * [tDBOutput_20 main ] stop
 */
	
	/**
	 * [tDBOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	

 



/**
 * [tDBOutput_20 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tLogRow_18 main ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_18 = new StringBuilder();




   				
	    		if(row32.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row32.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row32.routecd != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row32.routecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row32.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row32.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_18 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_18);
                    }
                    consoleOut_tLogRow_18.println(strBuffer_tLogRow_18.toString());
                    consoleOut_tLogRow_18.flush();
                    nb_line_tLogRow_18++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_18++;

/**
 * [tLogRow_18 main ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tDBOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	

 



/**
 * [tDBOutput_20 process_data_end ] stop
 */

} // End of branch "drugroute_ins"



	
		} // close loop of lookup 'row31' // G_TM_M_043
	
	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "dmd_vmp_drugroute"




// Start of branch "dmd_vmp_ingredient_map"
if(dmd_vmp_ingredient_map != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"dmd_vmp_ingredient_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row33" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow33 = false;
       		  	    	
       		  	    	
 							row33Struct row33ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    row33HashKey.vpid = dmd_vmp_ingredient_map.dmd_id ;
                        		    		

								
		                        	row33HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row33.lookup( row33HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row33.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_12 = true;
	  								
						
									
	
		  								forceLooprow33 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow33 = true;
			           		  	} // G 21
                    		  	
                    		

							row33Struct row33 = null;
                    		  	 
							

								while ((tHash_Lookup_row33 != null && tHash_Lookup_row33.hasNext()) || forceLooprow33) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row33'
									
                    		  	 
							   
                    		  	 
	       		  	    	row33Struct fromLookup_row33 = null;
							row33 = row33Default;
										 
							
								
								if(!forceLooprow33) { // G 46
								
							
								 
							
								
								fromLookup_row33 = tHash_Lookup_row33.next();

							

							if(fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow33 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

ingre_ins = null;

if(!rejectedInnerJoin_tMap_12 ) {

// # Output table : 'ingre_ins'
ingre_ins_tmp.vpid = row33.vpid;
ingre_ins_tmp.isid = row33.isid;
ingre_ins_tmp.basis_strntcd = row33.basis_strntcd;
ingre_ins_tmp.bs_subid = row33.bs_subid;
ingre_ins_tmp.strnt_nmrtr_val = row33.strnt_nmrtr_val;
ingre_ins_tmp.strnt_nmrtr_uomcd = row33.strnt_nmrtr_uomcd;
ingre_ins_tmp.strnt_dnmtr_val = row33.strnt_dnmtr_val;
ingre_ins_tmp.strnt_dnmtr_uomcd = row33.strnt_dnmtr_uomcd;
ingre_ins_tmp.col_val_hash = row33.col_val_hash;
ingre_ins = ingre_ins_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "ingre_ins"
if(ingre_ins != null) { 



	
	/**
	 * [tDBOutput_21 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ingre_ins");
					}
					



            row34 = null;
        whetherReject_tDBOutput_21 = false;
                    if(ingre_ins.vpid == null) {
pstmt_tDBOutput_21.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(1, ingre_ins.vpid);
}

                    if(ingre_ins.isid == null) {
pstmt_tDBOutput_21.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(2, ingre_ins.isid);
}

                    if(ingre_ins.basis_strntcd == null) {
pstmt_tDBOutput_21.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_21.setLong(3, ingre_ins.basis_strntcd);
}

                    if(ingre_ins.bs_subid == null) {
pstmt_tDBOutput_21.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(4, ingre_ins.bs_subid);
}

                    pstmt_tDBOutput_21.setBigDecimal(5, ingre_ins.strnt_nmrtr_val);

                    if(ingre_ins.strnt_nmrtr_uomcd == null) {
pstmt_tDBOutput_21.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(6, ingre_ins.strnt_nmrtr_uomcd);
}

                    pstmt_tDBOutput_21.setBigDecimal(7, ingre_ins.strnt_dnmtr_val);

                    if(ingre_ins.strnt_dnmtr_uomcd == null) {
pstmt_tDBOutput_21.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(8, ingre_ins.strnt_dnmtr_uomcd);
}

                    if(ingre_ins.col_val_hash == null) {
pstmt_tDBOutput_21.setNull(9, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_21.setObject(9, ingre_ins.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_21.addBatch();
    		nb_line_tDBOutput_21++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_21++;
    		  
            if(!whetherReject_tDBOutput_21) {
                            row34 = new row34Struct();
                                row34.vpid = ingre_ins.vpid;
                                row34.isid = ingre_ins.isid;
                                row34.basis_strntcd = ingre_ins.basis_strntcd;
                                row34.bs_subid = ingre_ins.bs_subid;
                                row34.strnt_nmrtr_val = ingre_ins.strnt_nmrtr_val;
                                row34.strnt_nmrtr_uomcd = ingre_ins.strnt_nmrtr_uomcd;
                                row34.strnt_dnmtr_val = ingre_ins.strnt_dnmtr_val;
                                row34.strnt_dnmtr_uomcd = ingre_ins.strnt_dnmtr_uomcd;
                                row34.col_val_hash = ingre_ins.col_val_hash;
            }
    			if ((batchSize_tDBOutput_21 > 0) && (batchSize_tDBOutput_21 <= batchSizeCounter_tDBOutput_21)) {
                try {
						int countSum_tDBOutput_21 = 0;
						    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
				    	
				    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
            	    	batchSizeCounter_tDBOutput_21 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_21){
				    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
				    	String errormessage_tDBOutput_21;
						if (ne_tDBOutput_21 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
							errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
						}else{
							errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
						}
				    	
				    	int countSum_tDBOutput_21 = 0;
						for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
						
				    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
				    	System.err.println(errormessage_tDBOutput_21);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_21++;
                if(commitEvery_tDBOutput_21 <= commitCounter_tDBOutput_21) {
                if ((batchSize_tDBOutput_21 > 0) && (batchSizeCounter_tDBOutput_21 > 0)) {
                try {
                		int countSum_tDBOutput_21 = 0;
                		    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
            	    	
            	    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
            	    	
                batchSizeCounter_tDBOutput_21 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_21){
			    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
			    	String errormessage_tDBOutput_21;
					if (ne_tDBOutput_21 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
						errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
					}else{
						errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
					}
			    	
			    	int countSum_tDBOutput_21 = 0;
					for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
					
			    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
			    	
			    	System.err.println(errormessage_tDBOutput_21);
			    	
				}
            }
                	conn_tDBOutput_21.commit();
                	
                	commitCounter_tDBOutput_21=0;
                }

 


	tos_count_tDBOutput_21++;

/**
 * [tDBOutput_21 main ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tLogRow_19 main ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_19 = new StringBuilder();




   				
	    		if(row34.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.isid != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.basis_strntcd != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.basis_strntcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.bs_subid != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.bs_subid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.strnt_nmrtr_val != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
								row34.strnt_nmrtr_val.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.strnt_nmrtr_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.strnt_nmrtr_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.strnt_dnmtr_val != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
								row34.strnt_dnmtr_val.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.strnt_dnmtr_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.strnt_dnmtr_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row34.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row34.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_19 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_19 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_19);
                    }
                    consoleOut_tLogRow_19.println(strBuffer_tLogRow_19.toString());
                    consoleOut_tLogRow_19.flush();
                    nb_line_tLogRow_19++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_19++;

/**
 * [tLogRow_19 main ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tDBOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_end ] stop
 */

} // End of branch "ingre_ins"



	
		} // close loop of lookup 'row33' // G_TM_M_043
	
	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "dmd_vmp_ingredient_map"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "action_filtered_row"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"action_filtered_row");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    		if (ne_tDBOutput_3 != null) {
	    			throw(sqle_tDBOutput_3);
	    		}else{
	            	throw(e_tDBOutput_3);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_ins_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */










	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	    try {
				int countSum_tDBOutput_7 = 0;
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						
					for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_7){
	    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
	    	String errormessage_tDBOutput_7;
			if (ne_tDBOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
				errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
			}else{
				errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
			}
	    	
	    	int countSum_tDBOutput_7 = 0;
			for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
				countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
			}
			
	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	    	
	    	System.err.println(errormessage_tDBOutput_7);
	    	
		}
	    
        if(pstmt_tDBOutput_7 != null) {
        		
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);
			
			conn_tDBOutput_7.commit();
			
		
    	conn_tDBOutput_7 .close();
    	
    	resourceMap.put("finish_tDBOutput_7", true);
    	

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_ins_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */










	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vtm_ins");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



	    try {
				int countSum_tDBOutput_10 = 0;
				if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {
						
					for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_10){
	    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
	    	String errormessage_tDBOutput_10;
			if (ne_tDBOutput_10 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
				errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
			}else{
				errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
			}
	    	
	    	int countSum_tDBOutput_10 = 0;
			for(int countEach_tDBOutput_10: e_tDBOutput_10.getUpdateCounts()) {
				countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
			}
			
	    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
	    	
	    	System.err.println(errormessage_tDBOutput_10);
	    	
		}
	    
        if(pstmt_tDBOutput_10 != null) {
        		
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);
			
			conn_tDBOutput_10.commit();
			
		
    	conn_tDBOutput_10 .close();
    	
    	resourceMap.put("finish_tDBOutput_10", true);
    	

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vtm_ins_data");
			  	}
			  	
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());




/**
 * [tDBOutput_10 end ] stop
 */

	
	/**
	 * [tLogRow_13 end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	


//////
//////
globalMap.put("tLogRow_13_NB_LINE",nb_line_tLogRow_13);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tLogRow_13", true);
end_Hash.put("tLogRow_13", System.currentTimeMillis());




/**
 * [tLogRow_13 end ] stop
 */










	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp_drugroute");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			
	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp_drugroute_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */

	
	/**
	 * [tLogRow_14 end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	


//////
//////
globalMap.put("tLogRow_14_NB_LINE",nb_line_tLogRow_14);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tLogRow_14", true);
end_Hash.put("tLogRow_14", System.currentTimeMillis());




/**
 * [tLogRow_14 end ] stop
 */










	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp_excipient");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_17 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	



	    try {
				int countSum_tDBOutput_17 = 0;
				if (pstmt_tDBOutput_17 != null && batchSizeCounter_tDBOutput_17 > 0) {
						
					for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_17){
	    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
	    	String errormessage_tDBOutput_17;
			if (ne_tDBOutput_17 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
				errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
			}else{
				errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
			}
	    	
	    	int countSum_tDBOutput_17 = 0;
			for(int countEach_tDBOutput_17: e_tDBOutput_17.getUpdateCounts()) {
				countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
			}
			
	    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
	    	
	    	System.err.println(errormessage_tDBOutput_17);
	    	
		}
	    
        if(pstmt_tDBOutput_17 != null) {
        		
            pstmt_tDBOutput_17.close();
            resourceMap.remove("pstmt_tDBOutput_17");
        }
    resourceMap.put("statementClosed_tDBOutput_17", true);
			
			conn_tDBOutput_17.commit();
			
		
    	conn_tDBOutput_17 .close();
    	
    	resourceMap.put("finish_tDBOutput_17", true);
    	

	nb_line_deleted_tDBOutput_17=nb_line_deleted_tDBOutput_17+ deletedCount_tDBOutput_17;
	nb_line_update_tDBOutput_17=nb_line_update_tDBOutput_17 + updatedCount_tDBOutput_17;
	nb_line_inserted_tDBOutput_17=nb_line_inserted_tDBOutput_17 + insertedCount_tDBOutput_17;
	nb_line_rejected_tDBOutput_17=nb_line_rejected_tDBOutput_17 + rejectedCount_tDBOutput_17;
	
        globalMap.put("tDBOutput_17_NB_LINE",nb_line_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_UPDATED",nb_line_update_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_DELETED",nb_line_deleted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_17);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_amp_excipient_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_17", true);
end_Hash.put("tDBOutput_17", System.currentTimeMillis());




/**
 * [tDBOutput_17 end ] stop
 */

	
	/**
	 * [tLogRow_15 end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	


//////
//////
globalMap.put("tLogRow_15_NB_LINE",nb_line_tLogRow_15);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tLogRow_15", true);
end_Hash.put("tLogRow_15", System.currentTimeMillis());




/**
 * [tLogRow_15 end ] stop
 */










	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove( "tHash_Lookup_row27" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_controldrug_map");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_18 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



	    try {
				int countSum_tDBOutput_18 = 0;
				if (pstmt_tDBOutput_18 != null && batchSizeCounter_tDBOutput_18 > 0) {
						
					for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_18){
	    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
	    	String errormessage_tDBOutput_18;
			if (ne_tDBOutput_18 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
				errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
			}else{
				errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
			}
	    	
	    	int countSum_tDBOutput_18 = 0;
			for(int countEach_tDBOutput_18: e_tDBOutput_18.getUpdateCounts()) {
				countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
			}
			
	    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
	    	
	    	System.err.println(errormessage_tDBOutput_18);
	    	
		}
	    
        if(pstmt_tDBOutput_18 != null) {
        		
            pstmt_tDBOutput_18.close();
            resourceMap.remove("pstmt_tDBOutput_18");
        }
    resourceMap.put("statementClosed_tDBOutput_18", true);
			
			conn_tDBOutput_18.commit();
			
		
    	conn_tDBOutput_18 .close();
    	
    	resourceMap.put("finish_tDBOutput_18", true);
    	

	nb_line_deleted_tDBOutput_18=nb_line_deleted_tDBOutput_18+ deletedCount_tDBOutput_18;
	nb_line_update_tDBOutput_18=nb_line_update_tDBOutput_18 + updatedCount_tDBOutput_18;
	nb_line_inserted_tDBOutput_18=nb_line_inserted_tDBOutput_18 + insertedCount_tDBOutput_18;
	nb_line_rejected_tDBOutput_18=nb_line_rejected_tDBOutput_18 + rejectedCount_tDBOutput_18;
	
        globalMap.put("tDBOutput_18_NB_LINE",nb_line_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_UPDATED",nb_line_update_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_DELETED",nb_line_deleted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_18);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_controldrug_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_18", true);
end_Hash.put("tDBOutput_18", System.currentTimeMillis());




/**
 * [tDBOutput_18 end ] stop
 */

	
	/**
	 * [tLogRow_16 end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	


//////
//////
globalMap.put("tLogRow_16_NB_LINE",nb_line_tLogRow_16);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tLogRow_16", true);
end_Hash.put("tLogRow_16", System.currentTimeMillis());




/**
 * [tLogRow_16 end ] stop
 */










	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_drugform_map");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_19 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



	    try {
				int countSum_tDBOutput_19 = 0;
				if (pstmt_tDBOutput_19 != null && batchSizeCounter_tDBOutput_19 > 0) {
						
					for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_19){
	    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
	    	String errormessage_tDBOutput_19;
			if (ne_tDBOutput_19 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
				errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
			}else{
				errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
			}
	    	
	    	int countSum_tDBOutput_19 = 0;
			for(int countEach_tDBOutput_19: e_tDBOutput_19.getUpdateCounts()) {
				countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
			}
			
	    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
	    	
	    	System.err.println(errormessage_tDBOutput_19);
	    	
		}
	    
        if(pstmt_tDBOutput_19 != null) {
        		
            pstmt_tDBOutput_19.close();
            resourceMap.remove("pstmt_tDBOutput_19");
        }
    resourceMap.put("statementClosed_tDBOutput_19", true);
			
			conn_tDBOutput_19.commit();
			
		
    	conn_tDBOutput_19 .close();
    	
    	resourceMap.put("finish_tDBOutput_19", true);
    	

	nb_line_deleted_tDBOutput_19=nb_line_deleted_tDBOutput_19+ deletedCount_tDBOutput_19;
	nb_line_update_tDBOutput_19=nb_line_update_tDBOutput_19 + updatedCount_tDBOutput_19;
	nb_line_inserted_tDBOutput_19=nb_line_inserted_tDBOutput_19 + insertedCount_tDBOutput_19;
	nb_line_rejected_tDBOutput_19=nb_line_rejected_tDBOutput_19 + rejectedCount_tDBOutput_19;
	
        globalMap.put("tDBOutput_19_NB_LINE",nb_line_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_UPDATED",nb_line_update_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_DELETED",nb_line_deleted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_19);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"drugform_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_19", true);
end_Hash.put("tDBOutput_19", System.currentTimeMillis());




/**
 * [tDBOutput_19 end ] stop
 */

	
	/**
	 * [tLogRow_17 end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	


//////
//////
globalMap.put("tLogRow_17_NB_LINE",nb_line_tLogRow_17);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tLogRow_17", true);
end_Hash.put("tLogRow_17", System.currentTimeMillis());




/**
 * [tLogRow_17 end ] stop
 */










	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row31 != null) {
						tHash_Lookup_row31.endGet();
					}
					globalMap.remove( "tHash_Lookup_row31" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_drugroute");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_20 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	



	    try {
				int countSum_tDBOutput_20 = 0;
				if (pstmt_tDBOutput_20 != null && batchSizeCounter_tDBOutput_20 > 0) {
						
					for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
						countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_20){
	    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
	    	String errormessage_tDBOutput_20;
			if (ne_tDBOutput_20 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
				errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
			}else{
				errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
			}
	    	
	    	int countSum_tDBOutput_20 = 0;
			for(int countEach_tDBOutput_20: e_tDBOutput_20.getUpdateCounts()) {
				countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
			}
			
	    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
	    	
	    	System.err.println(errormessage_tDBOutput_20);
	    	
		}
	    
        if(pstmt_tDBOutput_20 != null) {
        		
            pstmt_tDBOutput_20.close();
            resourceMap.remove("pstmt_tDBOutput_20");
        }
    resourceMap.put("statementClosed_tDBOutput_20", true);
			
			conn_tDBOutput_20.commit();
			
		
    	conn_tDBOutput_20 .close();
    	
    	resourceMap.put("finish_tDBOutput_20", true);
    	

	nb_line_deleted_tDBOutput_20=nb_line_deleted_tDBOutput_20+ deletedCount_tDBOutput_20;
	nb_line_update_tDBOutput_20=nb_line_update_tDBOutput_20 + updatedCount_tDBOutput_20;
	nb_line_inserted_tDBOutput_20=nb_line_inserted_tDBOutput_20 + insertedCount_tDBOutput_20;
	nb_line_rejected_tDBOutput_20=nb_line_rejected_tDBOutput_20 + rejectedCount_tDBOutput_20;
	
        globalMap.put("tDBOutput_20_NB_LINE",nb_line_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_UPDATED",nb_line_update_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_DELETED",nb_line_deleted_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_20);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"drugroute_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_20", true);
end_Hash.put("tDBOutput_20", System.currentTimeMillis());




/**
 * [tDBOutput_20 end ] stop
 */

	
	/**
	 * [tLogRow_18 end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	


//////
//////
globalMap.put("tLogRow_18_NB_LINE",nb_line_tLogRow_18);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tLogRow_18", true);
end_Hash.put("tLogRow_18", System.currentTimeMillis());




/**
 * [tLogRow_18 end ] stop
 */










	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove( "tHash_Lookup_row33" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dmd_vmp_ingredient_map");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_21 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



	    try {
				int countSum_tDBOutput_21 = 0;
				if (pstmt_tDBOutput_21 != null && batchSizeCounter_tDBOutput_21 > 0) {
						
					for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_21){
	    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
	    	String errormessage_tDBOutput_21;
			if (ne_tDBOutput_21 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
				errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
			}else{
				errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
			}
	    	
	    	int countSum_tDBOutput_21 = 0;
			for(int countEach_tDBOutput_21: e_tDBOutput_21.getUpdateCounts()) {
				countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
			}
			
	    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
	    	
	    	System.err.println(errormessage_tDBOutput_21);
	    	
		}
	    
        if(pstmt_tDBOutput_21 != null) {
        		
            pstmt_tDBOutput_21.close();
            resourceMap.remove("pstmt_tDBOutput_21");
        }
    resourceMap.put("statementClosed_tDBOutput_21", true);
			
			conn_tDBOutput_21.commit();
			
		
    	conn_tDBOutput_21 .close();
    	
    	resourceMap.put("finish_tDBOutput_21", true);
    	

	nb_line_deleted_tDBOutput_21=nb_line_deleted_tDBOutput_21+ deletedCount_tDBOutput_21;
	nb_line_update_tDBOutput_21=nb_line_update_tDBOutput_21 + updatedCount_tDBOutput_21;
	nb_line_inserted_tDBOutput_21=nb_line_inserted_tDBOutput_21 + insertedCount_tDBOutput_21;
	nb_line_rejected_tDBOutput_21=nb_line_rejected_tDBOutput_21 + rejectedCount_tDBOutput_21;
	
        globalMap.put("tDBOutput_21_NB_LINE",nb_line_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_UPDATED",nb_line_update_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_DELETED",nb_line_deleted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_21);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ingre_ins");
			  	}
			  	
 

ok_Hash.put("tDBOutput_21", true);
end_Hash.put("tDBOutput_21", System.currentTimeMillis());




/**
 * [tDBOutput_21 end ] stop
 */

	
	/**
	 * [tLogRow_19 end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	


//////
//////
globalMap.put("tLogRow_19_NB_LINE",nb_line_tLogRow_19);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tLogRow_19", true);
end_Hash.put("tLogRow_19", System.currentTimeMillis());




/**
 * [tLogRow_19 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row33"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row31"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row29"); 
				     			
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */










	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_7") == null){
            java.sql.Connection ctn_tDBOutput_7 = null;
            if((ctn_tDBOutput_7 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_7")) != null){
                try {
                    ctn_tDBOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_7) {
                    String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :" + sqlEx_tDBOutput_7.getMessage();
                    System.err.println(errorMessage_tDBOutput_7);
                }
            }
        }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */










	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_10") == null){
            java.sql.Connection ctn_tDBOutput_10 = null;
            if((ctn_tDBOutput_10 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_10")) != null){
                try {
                    ctn_tDBOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_10) {
                    String errorMessage_tDBOutput_10 = "failed to close the connection in tDBOutput_10 :" + sqlEx_tDBOutput_10.getMessage();
                    System.err.println(errorMessage_tDBOutput_10);
                }
            }
        }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */

	
	/**
	 * [tLogRow_13 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 finally ] stop
 */










	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */

	
	/**
	 * [tLogRow_14 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 finally ] stop
 */










	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_17 = null;
                if ((pstmtToClose_tDBOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_17")) != null) {
                    pstmtToClose_tDBOutput_17.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_17") == null){
            java.sql.Connection ctn_tDBOutput_17 = null;
            if((ctn_tDBOutput_17 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_17")) != null){
                try {
                    ctn_tDBOutput_17.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_17) {
                    String errorMessage_tDBOutput_17 = "failed to close the connection in tDBOutput_17 :" + sqlEx_tDBOutput_17.getMessage();
                    System.err.println(errorMessage_tDBOutput_17);
                }
            }
        }
    }
 



/**
 * [tDBOutput_17 finally ] stop
 */

	
	/**
	 * [tLogRow_15 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 finally ] stop
 */










	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_18 = null;
                if ((pstmtToClose_tDBOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_18")) != null) {
                    pstmtToClose_tDBOutput_18.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_18") == null){
            java.sql.Connection ctn_tDBOutput_18 = null;
            if((ctn_tDBOutput_18 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_18")) != null){
                try {
                    ctn_tDBOutput_18.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_18) {
                    String errorMessage_tDBOutput_18 = "failed to close the connection in tDBOutput_18 :" + sqlEx_tDBOutput_18.getMessage();
                    System.err.println(errorMessage_tDBOutput_18);
                }
            }
        }
    }
 



/**
 * [tDBOutput_18 finally ] stop
 */

	
	/**
	 * [tLogRow_16 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 finally ] stop
 */










	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_19 = null;
                if ((pstmtToClose_tDBOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_19")) != null) {
                    pstmtToClose_tDBOutput_19.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_19") == null){
            java.sql.Connection ctn_tDBOutput_19 = null;
            if((ctn_tDBOutput_19 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_19")) != null){
                try {
                    ctn_tDBOutput_19.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_19) {
                    String errorMessage_tDBOutput_19 = "failed to close the connection in tDBOutput_19 :" + sqlEx_tDBOutput_19.getMessage();
                    System.err.println(errorMessage_tDBOutput_19);
                }
            }
        }
    }
 



/**
 * [tDBOutput_19 finally ] stop
 */

	
	/**
	 * [tLogRow_17 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 finally ] stop
 */










	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_20") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_20 = null;
                if ((pstmtToClose_tDBOutput_20 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_20")) != null) {
                    pstmtToClose_tDBOutput_20.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_20") == null){
            java.sql.Connection ctn_tDBOutput_20 = null;
            if((ctn_tDBOutput_20 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_20")) != null){
                try {
                    ctn_tDBOutput_20.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_20) {
                    String errorMessage_tDBOutput_20 = "failed to close the connection in tDBOutput_20 :" + sqlEx_tDBOutput_20.getMessage();
                    System.err.println(errorMessage_tDBOutput_20);
                }
            }
        }
    }
 



/**
 * [tDBOutput_20 finally ] stop
 */

	
	/**
	 * [tLogRow_18 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 finally ] stop
 */










	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_21 = null;
                if ((pstmtToClose_tDBOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_21")) != null) {
                    pstmtToClose_tDBOutput_21.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_21") == null){
            java.sql.Connection ctn_tDBOutput_21 = null;
            if((ctn_tDBOutput_21 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_21")) != null){
                try {
                    ctn_tDBOutput_21.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_21) {
                    String errorMessage_tDBOutput_21 = "failed to close the connection in tDBOutput_21 :" + sqlEx_tDBOutput_21.getMessage();
                    System.err.println(errorMessage_tDBOutput_21);
                }
            }
        }
    }
 



/**
 * [tDBOutput_21 finally ] stop
 */

	
	/**
	 * [tLogRow_19 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.vpid = this.vpid;
	            other.vpiddt = this.vpiddt;
	            other.vpidprev = this.vpidprev;
	            other.vtmid = this.vtmid;
	            other.invalid = this.invalid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.basiscd = this.basiscd;
	            other.nmdt = this.nmdt;
	            other.nmprev = this.nmprev;
	            other.basis_prevcd = this.basis_prevcd;
	            other.nmchangecd = this.nmchangecd;
	            other.comprodcd = this.comprodcd;
	            other.pres_statcd = this.pres_statcd;
	            other.sug_f = this.sug_f;
	            other.glu_f = this.glu_f;
	            other.pres_f = this.pres_f;
	            other.cfc_f = this.cfc_f;
	            other.non_availcd = this.non_availcd;
	            other.non_availdt = this.non_availdt;
	            other.df_indcd = this.df_indcd;
	            other.udfs = this.udfs;
	            other.udfs_uomcd = this.udfs_uomcd;
	            other.unit_dose_uomcd = this.unit_dose_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.vpid = this.vpid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.vpiddt = readDate(dis,ois);
					
						this.vpidprev = readString(dis,ois);
					
						this.vtmid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
						this.nmdt = readDate(dis,ois);
					
						this.nmprev = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis,ois);
					
						this.glu_f = readInteger(dis,ois);
					
						this.pres_f = readInteger(dis,ois);
					
						this.cfc_f = readInteger(dis,ois);
					
						this.non_availcd = readInteger(dis,ois);
					
						this.non_availdt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
       			    	this.udfs = (BigDecimal) ois.readObject();
					
						this.udfs_uomcd = readString(dis,ois);
					
						this.unit_dose_uomcd = readString(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.vpiddt, dos, oos);
					
						writeString(this.vpidprev, dos, oos);
					
						writeString(this.vtmid, dos, oos);
					
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
						writeDate(this.nmdt, dos, oos);
					
						writeString(this.nmprev, dos, oos);
					
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					writeInteger(this.sug_f, dos, oos);
					
					writeInteger(this.glu_f, dos, oos);
					
					writeInteger(this.pres_f, dos, oos);
					
					writeInteger(this.cfc_f, dos, oos);
					
					writeInteger(this.non_availcd, dos, oos);
					
						writeDate(this.non_availdt, dos, oos);
					
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
       			    	oos.writeObject(this.udfs);
					
						writeString(this.udfs_uomcd, dos, oos);
					
						writeString(this.unit_dose_uomcd, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_3 - inputs:(dmd_vmp,row7) outputs:(dmd_vmp_ins_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_5 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vpidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"vtmid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"basiscd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"basis_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"nmchangecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"comprodcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"pres_statcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"sug_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"glu_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"pres_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"cfc_f\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"non_availcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"non_availdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"df_indcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"udfs\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"udfs_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"unit_dose_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp\"";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row7.vpid = null;
							} else {
	                         		
        	row7.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row7.vpiddt = null;
							} else {
										
			row7.vpiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 2);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row7.vpidprev = null;
							} else {
	                         		
        	row7.vpidprev = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row7.vtmid = null;
							} else {
	                         		
        	row7.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row7.invalid = null;
							} else {
		                          
            row7.invalid = rs_tDBInput_5.getShort(5);
            if(rs_tDBInput_5.wasNull()){
                    row7.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row7.nm = null;
							} else {
	                         		
        	row7.nm = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row7.abbrevnm = null;
							} else {
	                         		
        	row7.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row7.basiscd = null;
							} else {
		                          
            row7.basiscd = rs_tDBInput_5.getLong(8);
            if(rs_tDBInput_5.wasNull()){
                    row7.basiscd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row7.nmdt = null;
							} else {
										
			row7.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 9);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row7.nmprev = null;
							} else {
	                         		
        	row7.nmprev = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row7.basis_prevcd = null;
							} else {
		                          
            row7.basis_prevcd = rs_tDBInput_5.getLong(11);
            if(rs_tDBInput_5.wasNull()){
                    row7.basis_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row7.nmchangecd = null;
							} else {
		                          
            row7.nmchangecd = rs_tDBInput_5.getLong(12);
            if(rs_tDBInput_5.wasNull()){
                    row7.nmchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row7.comprodcd = null;
							} else {
		                          
            row7.comprodcd = rs_tDBInput_5.getLong(13);
            if(rs_tDBInput_5.wasNull()){
                    row7.comprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row7.pres_statcd = null;
							} else {
		                          
            row7.pres_statcd = rs_tDBInput_5.getLong(14);
            if(rs_tDBInput_5.wasNull()){
                    row7.pres_statcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row7.sug_f = null;
							} else {
		                          
            row7.sug_f = rs_tDBInput_5.getInt(15);
            if(rs_tDBInput_5.wasNull()){
                    row7.sug_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row7.glu_f = null;
							} else {
		                          
            row7.glu_f = rs_tDBInput_5.getInt(16);
            if(rs_tDBInput_5.wasNull()){
                    row7.glu_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row7.pres_f = null;
							} else {
		                          
            row7.pres_f = rs_tDBInput_5.getInt(17);
            if(rs_tDBInput_5.wasNull()){
                    row7.pres_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row7.cfc_f = null;
							} else {
		                          
            row7.cfc_f = rs_tDBInput_5.getInt(18);
            if(rs_tDBInput_5.wasNull()){
                    row7.cfc_f = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row7.non_availcd = null;
							} else {
		                          
            row7.non_availcd = rs_tDBInput_5.getInt(19);
            if(rs_tDBInput_5.wasNull()){
                    row7.non_availcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row7.non_availdt = null;
							} else {
										
			row7.non_availdt = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 20);
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row7.df_indcd = null;
							} else {
		                          
            row7.df_indcd = rs_tDBInput_5.getLong(21);
            if(rs_tDBInput_5.wasNull()){
                    row7.df_indcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row7.udfs = null;
							} else {
		                          
            row7.udfs = rs_tDBInput_5.getBigDecimal(22);
            if(rs_tDBInput_5.wasNull()){
                    row7.udfs = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row7.udfs_uomcd = null;
							} else {
	                         		
        	row7.udfs_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row7.unit_dose_uomcd = null;
							} else {
	                         		
        	row7.unit_dose_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_5, 24, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row7.col_val_hash = null;
							} else {
		                          
            row7.col_val_hash = rs_tDBInput_5.getObject(25);
            if(rs_tDBInput_5.wasNull()){
                    row7.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.vpid = row7.vpid;
				
				row7_HashRow.vpiddt = row7.vpiddt;
				
				row7_HashRow.vpidprev = row7.vpidprev;
				
				row7_HashRow.vtmid = row7.vtmid;
				
				row7_HashRow.invalid = row7.invalid;
				
				row7_HashRow.nm = row7.nm;
				
				row7_HashRow.abbrevnm = row7.abbrevnm;
				
				row7_HashRow.basiscd = row7.basiscd;
				
				row7_HashRow.nmdt = row7.nmdt;
				
				row7_HashRow.nmprev = row7.nmprev;
				
				row7_HashRow.basis_prevcd = row7.basis_prevcd;
				
				row7_HashRow.nmchangecd = row7.nmchangecd;
				
				row7_HashRow.comprodcd = row7.comprodcd;
				
				row7_HashRow.pres_statcd = row7.pres_statcd;
				
				row7_HashRow.sug_f = row7.sug_f;
				
				row7_HashRow.glu_f = row7.glu_f;
				
				row7_HashRow.pres_f = row7.pres_f;
				
				row7_HashRow.cfc_f = row7.cfc_f;
				
				row7_HashRow.non_availcd = row7.non_availcd;
				
				row7_HashRow.non_availdt = row7.non_availdt;
				
				row7_HashRow.df_indcd = row7.df_indcd;
				
				row7_HashRow.udfs = row7.udfs;
				
				row7_HashRow.udfs_uomcd = row7.udfs_uomcd;
				
				row7_HashRow.unit_dose_uomcd = row7.unit_dose_uomcd;
				
				row7_HashRow.col_val_hash = row7.col_val_hash;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.apid = this.apid;
	            other.invalid = this.invalid;
	            other.vpid = this.vpid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.desc = this.desc;
	            other.nmdt = this.nmdt;
	            other.nm_prev = this.nm_prev;
	            other.suppcd = this.suppcd;
	            other.lic_authcd = this.lic_authcd;
	            other.lic_auth_prevcd = this.lic_auth_prevcd;
	            other.lic_authchangecd = this.lic_authchangecd;
	            other.lic_authchangedt = this.lic_authchangedt;
	            other.combprodcd = this.combprodcd;
	            other.flavourcd = this.flavourcd;
	            other.ema = this.ema;
	            other.parallel_import = this.parallel_import;
	            other.avail_restrictcd = this.avail_restrictcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.apid = this.apid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.vpid = readString(dis,ois);
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
						this.desc = readString(dis,ois);
					
						this.nmdt = readDate(dis,ois);
					
						this.nm_prev = readString(dis,ois);
					
						this.suppcd = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
						this.lic_authchangedt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis,ois);
					
						this.parallel_import = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.vpid, dos, oos);
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						writeString(this.desc, dos, oos);
					
						writeDate(this.nmdt, dos, oos);
					
						writeString(this.nm_prev, dos, oos);
					
						writeString(this.suppcd, dos, oos);
					
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
						writeDate(this.lic_authchangedt, dos, oos);
					
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					writeInteger(this.ema, dos, oos);
					
					writeInteger(this.parallel_import, dos, oos);
					
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_4) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_4 - inputs:(dmd_amp,row11) outputs:(amp_ins_row)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_7 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"desc\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nmdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"nm_prev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"suppcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_auth_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authchangecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"lic_authchangedt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"combprodcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"flavourcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"ema\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"parallel_import\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"avail_restrictcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp\"";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row11.apid = null;
							} else {
	                         		
        	row11.apid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row11.invalid = null;
							} else {
		                          
            row11.invalid = rs_tDBInput_7.getShort(2);
            if(rs_tDBInput_7.wasNull()){
                    row11.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row11.vpid = null;
							} else {
	                         		
        	row11.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row11.nm = null;
							} else {
	                         		
        	row11.nm = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row11.abbrevnm = null;
							} else {
	                         		
        	row11.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row11.desc = null;
							} else {
	                         		
        	row11.desc = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row11.nmdt = null;
							} else {
										
			row11.nmdt = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 7);
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row11.nm_prev = null;
							} else {
	                         		
        	row11.nm_prev = routines.system.JDBCUtil.getString(rs_tDBInput_7, 8, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row11.suppcd = null;
							} else {
	                         		
        	row11.suppcd = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								row11.lic_authcd = null;
							} else {
		                          
            row11.lic_authcd = rs_tDBInput_7.getLong(10);
            if(rs_tDBInput_7.wasNull()){
                    row11.lic_authcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								row11.lic_auth_prevcd = null;
							} else {
		                          
            row11.lic_auth_prevcd = rs_tDBInput_7.getLong(11);
            if(rs_tDBInput_7.wasNull()){
                    row11.lic_auth_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 12) {
								row11.lic_authchangecd = null;
							} else {
		                          
            row11.lic_authchangecd = rs_tDBInput_7.getLong(12);
            if(rs_tDBInput_7.wasNull()){
                    row11.lic_authchangecd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 13) {
								row11.lic_authchangedt = null;
							} else {
										
			row11.lic_authchangedt = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 13);
		                    }
							if(colQtyInRs_tDBInput_7 < 14) {
								row11.combprodcd = null;
							} else {
		                          
            row11.combprodcd = rs_tDBInput_7.getLong(14);
            if(rs_tDBInput_7.wasNull()){
                    row11.combprodcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 15) {
								row11.flavourcd = null;
							} else {
		                          
            row11.flavourcd = rs_tDBInput_7.getLong(15);
            if(rs_tDBInput_7.wasNull()){
                    row11.flavourcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 16) {
								row11.ema = null;
							} else {
		                          
            row11.ema = rs_tDBInput_7.getInt(16);
            if(rs_tDBInput_7.wasNull()){
                    row11.ema = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 17) {
								row11.parallel_import = null;
							} else {
		                          
            row11.parallel_import = rs_tDBInput_7.getInt(17);
            if(rs_tDBInput_7.wasNull()){
                    row11.parallel_import = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 18) {
								row11.avail_restrictcd = null;
							} else {
		                          
            row11.avail_restrictcd = rs_tDBInput_7.getLong(18);
            if(rs_tDBInput_7.wasNull()){
                    row11.avail_restrictcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 19) {
								row11.col_val_hash = null;
							} else {
		                          
            row11.col_val_hash = rs_tDBInput_7.getObject(19);
            if(rs_tDBInput_7.wasNull()){
                    row11.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.apid = row11.apid;
				
				row11_HashRow.invalid = row11.invalid;
				
				row11_HashRow.vpid = row11.vpid;
				
				row11_HashRow.nm = row11.nm;
				
				row11_HashRow.abbrevnm = row11.abbrevnm;
				
				row11_HashRow.desc = row11.desc;
				
				row11_HashRow.nmdt = row11.nmdt;
				
				row11_HashRow.nm_prev = row11.nm_prev;
				
				row11_HashRow.suppcd = row11.suppcd;
				
				row11_HashRow.lic_authcd = row11.lic_authcd;
				
				row11_HashRow.lic_auth_prevcd = row11.lic_auth_prevcd;
				
				row11_HashRow.lic_authchangecd = row11.lic_authchangecd;
				
				row11_HashRow.lic_authchangedt = row11.lic_authchangedt;
				
				row11_HashRow.combprodcd = row11.combprodcd;
				
				row11_HashRow.flavourcd = row11.flavourcd;
				
				row11_HashRow.ema = row11.ema;
				
				row11_HashRow.parallel_import = row11.parallel_import;
				
				row11_HashRow.avail_restrictcd = row11.avail_restrictcd;
				
				row11_HashRow.col_val_hash = row11.col_val_hash;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vtmid == null) ? 0 : this.vtmid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.vtmid == null) {
							if (other.vtmid != null)
								return false;
						
						} else if (!this.vtmid.equals(other.vtmid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.vtmid = this.vtmid;
	            other.invalid = this.invalid;
	            other.nm = this.nm;
	            other.abbrevnm = this.abbrevnm;
	            other.vtmidprev = this.vtmidprev;
	            other.vtmiddt = this.vtmiddt;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.vtmid = this.vtmid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
						this.nm = readString(dis,ois);
					
						this.abbrevnm = readString(dis,ois);
					
						this.vtmidprev = readString(dis,ois);
					
						this.vtmiddt = readDate(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
						writeString(this.nm, dos, oos);
					
						writeString(this.abbrevnm, dos, oos);
					
						writeString(this.vtmidprev, dos, oos);
					
						writeDate(this.vtmiddt, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vtmid, other.vtmid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_4) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_5 - inputs:(dmd_vtm_ins,row15) outputs:(dmd_vtm_ins_data)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_9 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"invalid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"nm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"abbrevnm\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmidprev\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"vtmiddt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vtm\"";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row15.vtmid = null;
							} else {
	                         		
        	row15.vtmid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row15.invalid = null;
							} else {
		                          
            row15.invalid = rs_tDBInput_9.getShort(2);
            if(rs_tDBInput_9.wasNull()){
                    row15.invalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row15.nm = null;
							} else {
	                         		
        	row15.nm = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row15.abbrevnm = null;
							} else {
	                         		
        	row15.abbrevnm = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row15.vtmidprev = null;
							} else {
	                         		
        	row15.vtmidprev = routines.system.JDBCUtil.getString(rs_tDBInput_9, 5, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								row15.vtmiddt = null;
							} else {
										
			row15.vtmiddt = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 6);
		                    }
							if(colQtyInRs_tDBInput_9 < 7) {
								row15.col_val_hash = null;
							} else {
		                          
            row15.col_val_hash = rs_tDBInput_9.getObject(7);
            if(rs_tDBInput_9.wasNull()){
                    row15.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.vtmid = row15.vtmid;
				
				row15_HashRow.invalid = row15.invalid;
				
				row15_HashRow.nm = row15.nm;
				
				row15_HashRow.abbrevnm = row15.abbrevnm;
				
				row15_HashRow.vtmidprev = row15.vtmidprev;
				
				row15_HashRow.vtmiddt = row15.vtmiddt;
				
				row15_HashRow.col_val_hash = row15.col_val_hash;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.apid = this.apid;
	            other.routecd = this.routecd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.apid = this.apid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.routecd = readString(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.routecd, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_4) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_6 - inputs:(dmd_amp_drugroute,row23) outputs:(dmd_amp_drugroute_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_10 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"routecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_drugroute\"";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row23.apid = null;
							} else {
	                         		
        	row23.apid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row23.routecd = null;
							} else {
	                         		
        	row23.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row23.col_val_hash = null;
							} else {
		                          
            row23.col_val_hash = rs_tDBInput_10.getObject(3);
            if(rs_tDBInput_10.wasNull()){
                    row23.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.apid = row23.apid;
				
				row23_HashRow.routecd = row23.routecd;
				
				row23_HashRow.col_val_hash = row23.col_val_hash;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.apid == null) ? 0 : this.apid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.apid == null) {
							if (other.apid != null)
								return false;
						
						} else if (!this.apid.equals(other.apid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.apid = this.apid;
	            other.isid = this.isid;
	            other.strnth = this.strnth;
	            other.strnth_uomcd = this.strnth_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.apid = this.apid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.isid = readString(dis,ois);
					
       			    	this.strnth = (BigDecimal) ois.readObject();
					
						this.strnth_uomcd = readString(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.isid, dos, oos);
					
       			    	oos.writeObject(this.strnth);
					
						writeString(this.strnth_uomcd, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.apid, other.apid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_4) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_7 - inputs:(dmd_amp_excipient,row25) outputs:(dmd_amp_excipient_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_11 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"apid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"strnth\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"strnth_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_amp_excipient\"";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row25.apid = null;
							} else {
	                         		
        	row25.apid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 1, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row25.isid = null;
							} else {
	                         		
        	row25.isid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row25.strnth = null;
							} else {
		                          
            row25.strnth = rs_tDBInput_11.getBigDecimal(3);
            if(rs_tDBInput_11.wasNull()){
                    row25.strnth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row25.strnth_uomcd = null;
							} else {
	                         		
        	row25.strnth_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row25.col_val_hash = null;
							} else {
		                          
            row25.col_val_hash = rs_tDBInput_11.getObject(5);
            if(rs_tDBInput_11.wasNull()){
                    row25.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.apid = row25.apid;
				
				row25_HashRow.isid = row25.isid;
				
				row25_HashRow.strnth = row25.strnth;
				
				row25_HashRow.strnth_uomcd = row25.strnth_uomcd;
				
				row25_HashRow.col_val_hash = row25.col_val_hash;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.vpid = this.vpid;
	            other.catcd = this.catcd;
	            other.catdt = this.catdt;
	            other.cat_prevcd = this.cat_prevcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.vpid = this.vpid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
						this.catdt = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
						writeDate(this.catdt, dos, oos);
					
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tAdvancedHash_row27 = 0;
		

			   		// connection name:row27
			   		// source node:tDBInput_12 - inputs:(after_tDBInput_4) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_9 - inputs:(dmd_vmp_controldrug_map,row27) outputs:(dmd_vmp_controldrug_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_12 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"catcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"catdt\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"cat_prevcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_controldrug\"";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row27.vpid = null;
							} else {
	                         		
        	row27.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_12, 1, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row27.catcd = null;
							} else {
		                          
            row27.catcd = rs_tDBInput_12.getLong(2);
            if(rs_tDBInput_12.wasNull()){
                    row27.catcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row27.catdt = null;
							} else {
										
			row27.catdt = routines.system.JDBCUtil.getDate(rs_tDBInput_12, 3);
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row27.cat_prevcd = null;
							} else {
		                          
            row27.cat_prevcd = rs_tDBInput_12.getLong(4);
            if(rs_tDBInput_12.wasNull()){
                    row27.cat_prevcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 5) {
								row27.col_val_hash = null;
							} else {
		                          
            row27.col_val_hash = rs_tDBInput_12.getObject(5);
            if(rs_tDBInput_12.wasNull()){
                    row27.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.vpid = row27.vpid;
				
				row27_HashRow.catcd = row27.catcd;
				
				row27_HashRow.catdt = row27.catdt;
				
				row27_HashRow.cat_prevcd = row27.cat_prevcd;
				
				row27_HashRow.col_val_hash = row27.col_val_hash;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

tHash_Lookup_row27.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableComparableLookupRow<row29Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.vpid = this.vpid;
	            other.formcd = this.formcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.vpid = this.vpid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.formcd = readString(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.formcd, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAdvancedHash_row29 = 0;
		

			   		// connection name:row29
			   		// source node:tDBInput_13 - inputs:(after_tDBInput_4) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_10 - inputs:(dmd_vmp_drugform_map,row29) outputs:(drugform_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row29Struct>getLookup(matchingModeEnum_row29);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_13 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"formcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugform\"";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row29.vpid = null;
							} else {
	                         		
        	row29.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_13, 1, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row29.formcd = null;
							} else {
	                         		
        	row29.formcd = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row29.col_val_hash = null;
							} else {
		                          
            row29.col_val_hash = rs_tDBInput_13.getObject(3);
            if(rs_tDBInput_13.wasNull()){
                    row29.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					


			   
			   

					row29Struct row29_HashRow = new row29Struct();
		   	   	   
				
				row29_HashRow.vpid = row29.vpid;
				
				row29_HashRow.formcd = row29.formcd;
				
				row29_HashRow.col_val_hash = row29.col_val_hash;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

tHash_Lookup_row29.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.vpid = this.vpid;
	            other.routecd = this.routecd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.vpid = this.vpid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.routecd = readString(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.routecd, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tAdvancedHash_row31 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row31", false);
		start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tAdvancedHash_row31 = 0;
		

			   		// connection name:row31
			   		// source node:tDBInput_14 - inputs:(after_tDBInput_4) outputs:(row31,row31) | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
			   		// linked node: tMap_11 - inputs:(dmd_vmp_drugroute,row31) outputs:(drugroute_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row31Struct>getLookup(matchingModeEnum_row31);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row31 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_14 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"routecd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_drugroute\"";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row31.vpid = null;
							} else {
	                         		
        	row31.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_14, 1, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row31.routecd = null;
							} else {
	                         		
        	row31.routecd = routines.system.JDBCUtil.getString(rs_tDBInput_14, 2, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row31.col_val_hash = null;
							} else {
		                          
            row31.col_val_hash = rs_tDBInput_14.getObject(3);
            if(rs_tDBInput_14.wasNull()){
                    row31.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					


			   
			   

					row31Struct row31_HashRow = new row31Struct();
		   	   	   
				
				row31_HashRow.vpid = row31.vpid;
				
				row31_HashRow.routecd = row31.routecd;
				
				row31_HashRow.col_val_hash = row31.col_val_hash;
				
			tHash_Lookup_row31.put(row31_HashRow);
			
            




 


	tos_count_tAdvancedHash_row31++;

/**
 * [tAdvancedHash_row31 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

tHash_Lookup_row31.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row31", true);
end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());




/**
 * [tAdvancedHash_row31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.vpid == null) ? 0 : this.vpid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.vpid == null) {
							if (other.vpid != null)
								return false;
						
						} else if (!this.vpid.equals(other.vpid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.vpid = this.vpid;
	            other.isid = this.isid;
	            other.basis_strntcd = this.basis_strntcd;
	            other.bs_subid = this.bs_subid;
	            other.strnt_nmrtr_val = this.strnt_nmrtr_val;
	            other.strnt_nmrtr_uomcd = this.strnt_nmrtr_uomcd;
	            other.strnt_dnmtr_val = this.strnt_dnmtr_val;
	            other.strnt_dnmtr_uomcd = this.strnt_dnmtr_uomcd;
	            other.col_val_hash = this.col_val_hash;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.vpid = this.vpid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.isid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
						this.bs_subid = readString(dis,ois);
					
       			    	this.strnt_nmrtr_val = (BigDecimal) ois.readObject();
					
						this.strnt_nmrtr_uomcd = readString(dis,ois);
					
       			    	this.strnt_dnmtr_val = (BigDecimal) ois.readObject();
					
						this.strnt_dnmtr_uomcd = readString(dis,ois);
					
       			    	this.col_val_hash = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.isid, dos, oos);
					
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
						writeString(this.bs_subid, dos, oos);
					
       			    	oos.writeObject(this.strnt_nmrtr_val);
					
						writeString(this.strnt_nmrtr_uomcd, dos, oos);
					
       			    	oos.writeObject(this.strnt_dnmtr_val);
					
						writeString(this.strnt_dnmtr_uomcd, dos, oos);
					
       			    	oos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.vpid, other.vpid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tAdvancedHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row33", false);
		start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row33";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tAdvancedHash_row33 = 0;
		

			   		// connection name:row33
			   		// source node:tDBInput_15 - inputs:(after_tDBInput_4) outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
			   		// linked node: tMap_12 - inputs:(dmd_vmp_ingredient_map,row33) outputs:(ingre_ins)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row33Struct>getLookup(matchingModeEnum_row33);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row33 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.dmd_db_stg_user;
				
				
	final String decryptedPassword_tDBInput_15 = context.dmd_db_stg_password; 
				
				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
				String url_tDBInput_15 = "jdbc:postgresql://" + context.dmd_db_stg_host + ":" + context.dmd_db_stg_port + "/" + context.dmd_db_stg_name + "?" + context.dmd_db_stg_additionalparams;
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				conn_tDBInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"vpid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"isid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"basis_strntcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"bs_subid\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_val\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_nmrtr_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_val\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"strnt_dnmtr_uomcd\", \n  \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\".\"col_val_hash\"\nFROM \""+context.dmd_db_stg_name+"\".\""+context.dmd_db_stg_schema+"\".\"dmd_vmp_ingredient\"";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row33.vpid = null;
							} else {
	                         		
        	row33.vpid = routines.system.JDBCUtil.getString(rs_tDBInput_15, 1, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								row33.isid = null;
							} else {
	                         		
        	row33.isid = routines.system.JDBCUtil.getString(rs_tDBInput_15, 2, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								row33.basis_strntcd = null;
							} else {
		                          
            row33.basis_strntcd = rs_tDBInput_15.getLong(3);
            if(rs_tDBInput_15.wasNull()){
                    row33.basis_strntcd = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 4) {
								row33.bs_subid = null;
							} else {
	                         		
        	row33.bs_subid = routines.system.JDBCUtil.getString(rs_tDBInput_15, 4, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 5) {
								row33.strnt_nmrtr_val = null;
							} else {
		                          
            row33.strnt_nmrtr_val = rs_tDBInput_15.getBigDecimal(5);
            if(rs_tDBInput_15.wasNull()){
                    row33.strnt_nmrtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 6) {
								row33.strnt_nmrtr_uomcd = null;
							} else {
	                         		
        	row33.strnt_nmrtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_15, 6, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 7) {
								row33.strnt_dnmtr_val = null;
							} else {
		                          
            row33.strnt_dnmtr_val = rs_tDBInput_15.getBigDecimal(7);
            if(rs_tDBInput_15.wasNull()){
                    row33.strnt_dnmtr_val = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 8) {
								row33.strnt_dnmtr_uomcd = null;
							} else {
	                         		
        	row33.strnt_dnmtr_uomcd = routines.system.JDBCUtil.getString(rs_tDBInput_15, 8, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 9) {
								row33.col_val_hash = null;
							} else {
		                          
            row33.col_val_hash = rs_tDBInput_15.getObject(9);
            if(rs_tDBInput_15.wasNull()){
                    row33.col_val_hash = null;
            }
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					


			   
			   

					row33Struct row33_HashRow = new row33Struct();
		   	   	   
				
				row33_HashRow.vpid = row33.vpid;
				
				row33_HashRow.isid = row33.isid;
				
				row33_HashRow.basis_strntcd = row33.basis_strntcd;
				
				row33_HashRow.bs_subid = row33.bs_subid;
				
				row33_HashRow.strnt_nmrtr_val = row33.strnt_nmrtr_val;
				
				row33_HashRow.strnt_nmrtr_uomcd = row33.strnt_nmrtr_uomcd;
				
				row33_HashRow.strnt_dnmtr_val = row33.strnt_dnmtr_val;
				
				row33_HashRow.strnt_dnmtr_uomcd = row33.strnt_dnmtr_uomcd;
				
				row33_HashRow.col_val_hash = row33.col_val_hash;
				
			tHash_Lookup_row33.put(row33_HashRow);
			
            




 


	tos_count_tAdvancedHash_row33++;

/**
 * [tAdvancedHash_row33 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

 



/**
 * [tAdvancedHash_row33 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

 



/**
 * [tAdvancedHash_row33 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
		
			conn_tDBInput_15.commit();
			
		
			conn_tDBInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

tHash_Lookup_row33.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row33", true);
end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());




/**
 * [tAdvancedHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

 



/**
 * [tAdvancedHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("current_process_id", context.dmd_stg_current_processs_id);

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


String foo = "bar";
//globalMap.put("current_process_id", java.util.UUID.randomUUID().toString());
System.out.println((String)globalMap.get("current_process_id"));
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRowGenerator_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public String sync_process_id;

				public String getSync_process_id () {
					return this.sync_process_id;
				}
				
			    public Boolean is_dmd_updated;

				public Boolean getIs_dmd_updated () {
					return this.is_dmd_updated;
				}
				
			    public java.util.Date dmd_update_dt;

				public java.util.Date getDmd_update_dt () {
					return this.dmd_update_dt;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.sync_process_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_dmd_updated = null;
           				} else {
           			    	this.is_dmd_updated = dis.readBoolean();
           				}
					
					this.dmd_update_dt = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sync_process_id,dos);
					
					// Boolean
				
						if(this.is_dmd_updated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_dmd_updated);
		            	}
					
					// java.util.Date
				
						writeDate(this.dmd_update_dt,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sync_process_id="+sync_process_id);
		sb.append(",is_dmd_updated="+String.valueOf(is_dmd_updated));
		sb.append(",dmd_update_dt="+String.valueOf(dmd_update_dt));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tDBOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_22", false);
		start_Hash.put("tDBOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tDBOutput_22 = 0;
		





String dbschema_tDBOutput_22 = null;
	dbschema_tDBOutput_22 = context.dmd_db_schema;
	

String tableName_tDBOutput_22 = null;
if(dbschema_tDBOutput_22 == null || dbschema_tDBOutput_22.trim().length() == 0) {
	tableName_tDBOutput_22 = ("dmd_sync_log");
} else {
	tableName_tDBOutput_22 = dbschema_tDBOutput_22 + "\".\"" + ("dmd_sync_log");
}

        int updateKeyCount_tDBOutput_22 = 1;
        if(updateKeyCount_tDBOutput_22 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_22 = 0;
int nb_line_update_tDBOutput_22 = 0;
int nb_line_inserted_tDBOutput_22 = 0;
int nb_line_deleted_tDBOutput_22 = 0;
int nb_line_rejected_tDBOutput_22 = 0;

int deletedCount_tDBOutput_22=0;
int updatedCount_tDBOutput_22=0;
int insertedCount_tDBOutput_22=0;
int rejectedCount_tDBOutput_22=0;

boolean whetherReject_tDBOutput_22 = false;

java.sql.Connection conn_tDBOutput_22 = null;
String dbUser_tDBOutput_22 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_22 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_22 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_22 = context.dmd_db_password; 

    String dbPwd_tDBOutput_22 = decryptedPassword_tDBOutput_22;

    conn_tDBOutput_22 = java.sql.DriverManager.getConnection(url_tDBOutput_22,dbUser_tDBOutput_22,dbPwd_tDBOutput_22);
	
	resourceMap.put("conn_tDBOutput_22", conn_tDBOutput_22);
        conn_tDBOutput_22.setAutoCommit(false);
        int commitEvery_tDBOutput_22 = 10000;
        int commitCounter_tDBOutput_22 = 0;


   int batchSize_tDBOutput_22 = 10000;
   int batchSizeCounter_tDBOutput_22=0;

int count_tDBOutput_22=0;
	    String update_tDBOutput_22 = "UPDATE \"" + tableName_tDBOutput_22 + "\" SET \"is_dmd_updated\" = ?,\"dmd_update_dt\" = ? WHERE \"sync_process_id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_22 = conn_tDBOutput_22.prepareStatement(update_tDBOutput_22);
	    resourceMap.put("pstmt_tDBOutput_22", pstmt_tDBOutput_22);
	    

 



/**
 * [tDBOutput_22 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";

	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public String getRandomsync_process_id() {
		 
		return (String)globalMap.get("current_process_id") ;
		
	}
	public Boolean getRandomis_dmd_updated() {
		 
		return  true ;
		
	}
	public java.util.Date getRandomdmd_update_dt() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row36.sync_process_id = randtRowGenerator_1.getRandomsync_process_id();
		row36.is_dmd_updated = randtRowGenerator_1.getRandomis_dmd_updated();
		row36.dmd_update_dt = randtRowGenerator_1.getRandomdmd_update_dt();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_22 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					



        whetherReject_tDBOutput_22 = false;
                    if(row36.is_dmd_updated == null) {
pstmt_tDBOutput_22.setNull(1, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_22.setBoolean(1, row36.is_dmd_updated);
}

                    if(row36.dmd_update_dt != null) {
pstmt_tDBOutput_22.setTimestamp(2, new java.sql.Timestamp(row36.dmd_update_dt.getTime()));
} else {
pstmt_tDBOutput_22.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(row36.sync_process_id == null) {
pstmt_tDBOutput_22.setNull(3 + count_tDBOutput_22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(3 + count_tDBOutput_22, row36.sync_process_id);
}


    		pstmt_tDBOutput_22.addBatch();
    		nb_line_tDBOutput_22++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_22++;
    		  
    			if ((batchSize_tDBOutput_22 > 0) && (batchSize_tDBOutput_22 <= batchSizeCounter_tDBOutput_22)) {
                try {
						int countSum_tDBOutput_22 = 0;
						    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
				    	
				    		updatedCount_tDBOutput_22 += countSum_tDBOutput_22;
				    	
            	    	batchSizeCounter_tDBOutput_22 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_22){
				    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
				    	String errormessage_tDBOutput_22;
						if (ne_tDBOutput_22 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
							errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
						}else{
							errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
						}
				    	
				    	int countSum_tDBOutput_22 = 0;
						for(int countEach_tDBOutput_22: e_tDBOutput_22.getUpdateCounts()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
						
				    		updatedCount_tDBOutput_22 += countSum_tDBOutput_22;
				    	
				    	System.err.println(errormessage_tDBOutput_22);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_22++;
                if(commitEvery_tDBOutput_22 <= commitCounter_tDBOutput_22) {
                if ((batchSize_tDBOutput_22 > 0) && (batchSizeCounter_tDBOutput_22 > 0)) {
                try {
                		int countSum_tDBOutput_22 = 0;
                		    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
            	    	
            	    		updatedCount_tDBOutput_22 += countSum_tDBOutput_22;
            	    	
                batchSizeCounter_tDBOutput_22 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_22){
			    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
			    	String errormessage_tDBOutput_22;
					if (ne_tDBOutput_22 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
						errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
					}else{
						errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
					}
			    	
			    	int countSum_tDBOutput_22 = 0;
					for(int countEach_tDBOutput_22: e_tDBOutput_22.getUpdateCounts()) {
						countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
					}
					
			    		updatedCount_tDBOutput_22 += countSum_tDBOutput_22;
			    	
			    	System.err.println(errormessage_tDBOutput_22);
			    	
				}
            }
                	conn_tDBOutput_22.commit();
                	
                	commitCounter_tDBOutput_22=0;
                }

 


	tos_count_tDBOutput_22++;

/**
 * [tDBOutput_22 main ] stop
 */
	
	/**
	 * [tDBOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tDBOutput_22 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



	    try {
				int countSum_tDBOutput_22 = 0;
				if (pstmt_tDBOutput_22 != null && batchSizeCounter_tDBOutput_22 > 0) {
						
					for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
						countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
					}
						
				}
		    	
		    		updatedCount_tDBOutput_22 += countSum_tDBOutput_22;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_22){
	    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
	    	String errormessage_tDBOutput_22;
			if (ne_tDBOutput_22 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
				errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
			}else{
				errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
			}
	    	
	    	int countSum_tDBOutput_22 = 0;
			for(int countEach_tDBOutput_22: e_tDBOutput_22.getUpdateCounts()) {
				countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
			}
			
	    		updatedCount_tDBOutput_22 += countSum_tDBOutput_22;
	    	
	    	System.err.println(errormessage_tDBOutput_22);
	    	
		}
	    
        if(pstmt_tDBOutput_22 != null) {
        		
            pstmt_tDBOutput_22.close();
            resourceMap.remove("pstmt_tDBOutput_22");
        }
    resourceMap.put("statementClosed_tDBOutput_22", true);
			
			conn_tDBOutput_22.commit();
			
		
    	conn_tDBOutput_22 .close();
    	
    	resourceMap.put("finish_tDBOutput_22", true);
    	

	nb_line_deleted_tDBOutput_22=nb_line_deleted_tDBOutput_22+ deletedCount_tDBOutput_22;
	nb_line_update_tDBOutput_22=nb_line_update_tDBOutput_22 + updatedCount_tDBOutput_22;
	nb_line_inserted_tDBOutput_22=nb_line_inserted_tDBOutput_22 + insertedCount_tDBOutput_22;
	nb_line_rejected_tDBOutput_22=nb_line_rejected_tDBOutput_22 + rejectedCount_tDBOutput_22;
	
        globalMap.put("tDBOutput_22_NB_LINE",nb_line_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_UPDATED",nb_line_update_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_DELETED",nb_line_deleted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_22);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tDBOutput_22", true);
end_Hash.put("tDBOutput_22", System.currentTimeMillis());




/**
 * [tDBOutput_22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_22 = null;
                if ((pstmtToClose_tDBOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_22")) != null) {
                    pstmtToClose_tDBOutput_22.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_22") == null){
            java.sql.Connection ctn_tDBOutput_22 = null;
            if((ctn_tDBOutput_22 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_22")) != null){
                try {
                    ctn_tDBOutput_22.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_22) {
                    String errorMessage_tDBOutput_22 = "failed to close the connection in tDBOutput_22 :" + sqlEx_tDBOutput_22.getMessage();
                    System.err.println(errorMessage_tDBOutput_22);
                }
            }
        }
    }
 



/**
 * [tDBOutput_22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendStats_FILEStruct implements routines.system.IPersistableRow<row_talendStats_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendStats_STATSStruct implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_STATSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();
row_talendStats_STATSStruct row_talendStats_FILE = row_talendStats_STATS;





	
	/**
	 * [talendStats_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_CONSOLE", false);
		start_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendStats_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendStats_CONSOLE = null;	

 		StringBuilder strBuffer_talendStats_CONSOLE = null;
		int nb_line_talendStats_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendStats_CONSOLE begin ] stop
 */



	
	/**
	 * [talendStats_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_FILE", false);
		start_Hash.put("talendStats_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_FILE = 0;
		

String fileName_talendStats_FILE = "";
    fileName_talendStats_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"stats_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendStats_FILE = null;
    String extension_talendStats_FILE = null;
    String directory_talendStats_FILE = null;
    if((fileName_talendStats_FILE.indexOf("/") != -1)) {
        if(fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE.lastIndexOf("/")) {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        }
        directory_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendStats_FILE.lastIndexOf(".") != -1) {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        }
        directory_talendStats_FILE = "";
    }
    boolean isFileGenerated_talendStats_FILE = true;
    java.io.File filetalendStats_FILE = new java.io.File(fileName_talendStats_FILE);
    globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
        if(filetalendStats_FILE.exists()){
            isFileGenerated_talendStats_FILE = false;
        }
            int nb_line_talendStats_FILE = 0;
            int splitedFileNo_talendStats_FILE = 0;
            int currentRow_talendStats_FILE = 0;

            final String OUT_DELIM_talendStats_FILE = /** Start field talendStats_FILE:FIELDSEPARATOR */";"/** End field talendStats_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendStats_FILE = /** Start field talendStats_FILE:ROWSEPARATOR */"\n"/** End field talendStats_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendStats_FILE != null && directory_talendStats_FILE.trim().length() != 0) {
                        java.io.File dir_talendStats_FILE = new java.io.File(directory_talendStats_FILE);
                        if(!dir_talendStats_FILE.exists()) {
                            dir_talendStats_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendStats_FILE = null;

                        outtalendStats_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendStats_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

 



/**
 * [talendStats_FILE begin ] stop
 */



	
	/**
	 * [talendStats_STATS begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_STATS", false);
		start_Hash.put("talendStats_STATS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	
		int tos_count_talendStats_STATS = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
		row_talendStats_STATS.pid = pid;
		row_talendStats_STATS.root_pid = rootPid;
		row_talendStats_STATS.father_pid = fatherPid;	
    	row_talendStats_STATS.project = projectName;
    	row_talendStats_STATS.job = jobName;
    	row_talendStats_STATS.context = contextStr;
		row_talendStats_STATS.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row_talendStats_STATS.message = scm.getMessage();
		row_talendStats_STATS.duration = scm.getDuration();
		row_talendStats_STATS.moment = scm.getMoment();
		row_talendStats_STATS.message_type = scm.getMessageType();
		row_talendStats_STATS.job_version = scm.getJobVersion();
		row_talendStats_STATS.job_repository_id = scm.getJobId();
		row_talendStats_STATS.system_pid = scm.getSystemPid();

 



/**
 * [talendStats_STATS begin ] stop
 */
	
	/**
	 * [talendStats_STATS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 


	tos_count_talendStats_STATS++;

/**
 * [talendStats_STATS main ] stop
 */
	
	/**
	 * [talendStats_STATS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_begin ] stop
 */

	
	/**
	 * [talendStats_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendStats_FILE = new StringBuilder();
                            if(row_talendStats_STATS.moment != null) {
                        sb_talendStats_FILE.append(
                            FormatterUtils.format_Date(row_talendStats_STATS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.father_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.father_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.root_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.root_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.system_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.system_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.project != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.project
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_repository_id != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_repository_id
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_version != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_version
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.context != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.context
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.origin != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.origin
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message_type != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message_type
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.duration != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.duration
                        );
                            }
                    sb_talendStats_FILE.append(OUT_DELIM_ROWSEP_talendStats_FILE);


                    nb_line_talendStats_FILE++;
                    resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

                        outtalendStats_FILE.write(sb_talendStats_FILE.toString());




 
     row_talendStats_FILE = row_talendStats_STATS;


	tos_count_talendStats_FILE++;

/**
 * [talendStats_FILE main ] stop
 */
	
	/**
	 * [talendStats_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendStats_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendStats_CONSOLE = new StringBuilder();




   				
	    		if(row_talendStats_FILE.moment != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
								FormatterUtils.format_Date(row_talendStats_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.system_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.project != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job_repository_id != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job_version != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.context != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.origin != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.message_type != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.message_type)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.message != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.message)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.duration != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendStats_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendStats_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendStats_CONSOLE);
                    }
                    consoleOut_talendStats_CONSOLE.println(strBuffer_talendStats_CONSOLE.toString());
                    consoleOut_talendStats_CONSOLE.flush();
                    nb_line_talendStats_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendStats_CONSOLE++;

/**
 * [talendStats_CONSOLE main ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendStats_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_end ] stop
 */



	
	/**
	 * [talendStats_STATS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_end ] stop
 */
	
	/**
	 * [talendStats_STATS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

	}


 

ok_Hash.put("talendStats_STATS", true);
end_Hash.put("talendStats_STATS", System.currentTimeMillis());




/**
 * [talendStats_STATS end ] stop
 */

	
	/**
	 * [talendStats_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	



		
			
					if(outtalendStats_FILE!=null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}
				
				globalMap.put("talendStats_FILE_NB_LINE",nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
			
		
		
		resourceMap.put("finish_talendStats_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendStats_FILE", true);
end_Hash.put("talendStats_FILE", System.currentTimeMillis());




/**
 * [talendStats_FILE end ] stop
 */

	
	/**
	 * [talendStats_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	


//////
//////
globalMap.put("talendStats_CONSOLE_NB_LINE",nb_line_talendStats_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendStats_CONSOLE", true);
end_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());




/**
 * [talendStats_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendStats_STATS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS finally ] stop
 */

	
	/**
	 * [talendStats_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	


		if(resourceMap.get("finish_talendStats_FILE") == null){ 
			
				
						java.io.Writer outtalendStats_FILE = (java.io.Writer)resourceMap.get("out_talendStats_FILE");
						if(outtalendStats_FILE!=null) {
							outtalendStats_FILE.flush();
							outtalendStats_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendStats_FILE finally ] stop
 */

	
	/**
	 * [talendStats_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_FILEStruct implements routines.system.IPersistableRow<row_talendLogs_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();
row_talendLogs_LOGSStruct row_talendLogs_FILE = row_talendLogs_LOGS;





	
	/**
	 * [talendLogs_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_CONSOLE", false);
		start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;	

 		StringBuilder strBuffer_talendLogs_CONSOLE = null;
		int nb_line_talendLogs_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendLogs_CONSOLE begin ] stop
 */



	
	/**
	 * [talendLogs_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_FILE", false);
		start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_FILE = 0;
		

String fileName_talendLogs_FILE = "";
    fileName_talendLogs_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"logs_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendLogs_FILE = null;
    String extension_talendLogs_FILE = null;
    String directory_talendLogs_FILE = null;
    if((fileName_talendLogs_FILE.indexOf("/") != -1)) {
        if(fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        }
        directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        }
        directory_talendLogs_FILE = "";
    }
    boolean isFileGenerated_talendLogs_FILE = true;
    java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
    globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
        if(filetalendLogs_FILE.exists()){
            isFileGenerated_talendLogs_FILE = false;
        }
            int nb_line_talendLogs_FILE = 0;
            int splitedFileNo_talendLogs_FILE = 0;
            int currentRow_talendLogs_FILE = 0;

            final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */";"/** End field talendLogs_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */"\n"/** End field talendLogs_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
                        java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
                        if(!dir_talendLogs_FILE.exists()) {
                            dir_talendLogs_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendLogs_FILE = null;

                        outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendLogs_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

 



/**
 * [talendLogs_FILE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendLogs_FILE = new StringBuilder();
                            if(row_talendLogs_LOGS.moment != null) {
                        sb_talendLogs_FILE.append(
                            FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.root_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.root_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.father_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.father_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.project != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.project
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.job != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.job
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.context != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.context
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.priority != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.priority
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.type != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.type
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.origin != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.origin
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.message != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.message
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.code != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.code
                        );
                            }
                    sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);


                    nb_line_talendLogs_FILE++;
                    resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

                        outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());




 
     row_talendLogs_FILE = row_talendLogs_LOGS;


	tos_count_talendLogs_FILE++;

/**
 * [talendLogs_FILE main ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendLogs_CONSOLE = new StringBuilder();




   				
	    		if(row_talendLogs_FILE.moment != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
								FormatterUtils.format_Date(row_talendLogs_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.project != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.job != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.context != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.priority != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.priority)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.type != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.type)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.origin != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.message != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.message)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.code != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendLogs_CONSOLE);
                    }
                    consoleOut_talendLogs_CONSOLE.println(strBuffer_talendLogs_CONSOLE.toString());
                    consoleOut_talendLogs_CONSOLE.flush();
                    nb_line_talendLogs_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendLogs_CONSOLE++;

/**
 * [talendLogs_CONSOLE main ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	



		
			
					if(outtalendLogs_FILE!=null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
				
				globalMap.put("talendLogs_FILE_NB_LINE",nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
			
		
		
		resourceMap.put("finish_talendLogs_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_FILE", true);
end_Hash.put("talendLogs_FILE", System.currentTimeMillis());




/**
 * [talendLogs_FILE end ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	


//////
//////
globalMap.put("talendLogs_CONSOLE_NB_LINE",nb_line_talendLogs_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_CONSOLE", true);
end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());




/**
 * [talendLogs_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	


		if(resourceMap.get("finish_talendLogs_FILE") == null){ 
			
				
						java.io.Writer outtalendLogs_FILE = (java.io.Writer)resourceMap.get("out_talendLogs_FILE");
						if(outtalendLogs_FILE!=null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendLogs_FILE finally ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendMeter_FILEStruct implements routines.system.IPersistableRow<row_talendMeter_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendMeter_METTERStruct implements routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_delta_actual_ingest_subjob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_METTERStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendMeter_METTERProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();
row_talendMeter_METTERStruct row_talendMeter_FILE = row_talendMeter_METTER;





	
	/**
	 * [talendMeter_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_CONSOLE", false);
		start_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendMeter_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendMeter_CONSOLE = null;	

 		StringBuilder strBuffer_talendMeter_CONSOLE = null;
		int nb_line_talendMeter_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendMeter_CONSOLE begin ] stop
 */



	
	/**
	 * [talendMeter_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_FILE", false);
		start_Hash.put("talendMeter_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_FILE = 0;
		

String fileName_talendMeter_FILE = "";
    fileName_talendMeter_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"meter_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendMeter_FILE = null;
    String extension_talendMeter_FILE = null;
    String directory_talendMeter_FILE = null;
    if((fileName_talendMeter_FILE.indexOf("/") != -1)) {
        if(fileName_talendMeter_FILE.lastIndexOf(".") < fileName_talendMeter_FILE.lastIndexOf("/")) {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE;
            extension_talendMeter_FILE = "";
        } else {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("."));
            extension_talendMeter_FILE = fileName_talendMeter_FILE.substring(fileName_talendMeter_FILE.lastIndexOf("."));
        }
        directory_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendMeter_FILE.lastIndexOf(".") != -1) {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("."));
            extension_talendMeter_FILE = fileName_talendMeter_FILE.substring(fileName_talendMeter_FILE.lastIndexOf("."));
        } else {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE;
            extension_talendMeter_FILE = "";
        }
        directory_talendMeter_FILE = "";
    }
    boolean isFileGenerated_talendMeter_FILE = true;
    java.io.File filetalendMeter_FILE = new java.io.File(fileName_talendMeter_FILE);
    globalMap.put("talendMeter_FILE_FILE_NAME",fileName_talendMeter_FILE);
        if(filetalendMeter_FILE.exists()){
            isFileGenerated_talendMeter_FILE = false;
        }
            int nb_line_talendMeter_FILE = 0;
            int splitedFileNo_talendMeter_FILE = 0;
            int currentRow_talendMeter_FILE = 0;

            final String OUT_DELIM_talendMeter_FILE = /** Start field talendMeter_FILE:FIELDSEPARATOR */";"/** End field talendMeter_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendMeter_FILE = /** Start field talendMeter_FILE:ROWSEPARATOR */"\n"/** End field talendMeter_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendMeter_FILE != null && directory_talendMeter_FILE.trim().length() != 0) {
                        java.io.File dir_talendMeter_FILE = new java.io.File(directory_talendMeter_FILE);
                        if(!dir_talendMeter_FILE.exists()) {
                            dir_talendMeter_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendMeter_FILE = null;

                        outtalendMeter_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendMeter_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendMeter_FILE", outtalendMeter_FILE);
resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

 



/**
 * [talendMeter_FILE begin ] stop
 */



	
	/**
	 * [talendMeter_METTER begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_METTER", false);
		start_Hash.put("talendMeter_METTER", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	
		int tos_count_talendMeter_METTER = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER.getMessages()) {
		row_talendMeter_METTER.pid = pid;
		row_talendMeter_METTER.root_pid = rootPid;
		row_talendMeter_METTER.father_pid = fatherPid;	
        row_talendMeter_METTER.project = projectName;
        row_talendMeter_METTER.job = jobName;
        row_talendMeter_METTER.context = contextStr;
		row_talendMeter_METTER.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row_talendMeter_METTER.moment = mcm.getMoment();
		row_talendMeter_METTER.job_version = mcm.getJobVersion();
		row_talendMeter_METTER.job_repository_id = mcm.getJobId();
		row_talendMeter_METTER.system_pid = mcm.getSystemPid();
		row_talendMeter_METTER.label = mcm.getLabel();
		row_talendMeter_METTER.count = mcm.getCount();
		row_talendMeter_METTER.reference = talendMeter_METTER.getConnLinesCount(mcm.getReferense()+"_count");
		row_talendMeter_METTER.thresholds = mcm.getThresholds();
		

 



/**
 * [talendMeter_METTER begin ] stop
 */
	
	/**
	 * [talendMeter_METTER main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 


	tos_count_talendMeter_METTER++;

/**
 * [talendMeter_METTER main ] stop
 */
	
	/**
	 * [talendMeter_METTER process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendMeter_FILE = new StringBuilder();
                            if(row_talendMeter_METTER.moment != null) {
                        sb_talendMeter_FILE.append(
                            FormatterUtils.format_Date(row_talendMeter_METTER.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.father_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.father_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.root_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.root_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.system_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.system_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.project != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.project
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job_repository_id != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job_repository_id
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job_version != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job_version
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.context != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.context
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.origin != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.origin
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.label != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.label
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.count != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.count
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.reference != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.reference
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.thresholds != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.thresholds
                        );
                            }
                    sb_talendMeter_FILE.append(OUT_DELIM_ROWSEP_talendMeter_FILE);


                    nb_line_talendMeter_FILE++;
                    resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

                        outtalendMeter_FILE.write(sb_talendMeter_FILE.toString());




 
     row_talendMeter_FILE = row_talendMeter_METTER;


	tos_count_talendMeter_FILE++;

/**
 * [talendMeter_FILE main ] stop
 */
	
	/**
	 * [talendMeter_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	

 



/**
 * [talendMeter_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendMeter_CONSOLE = new StringBuilder();




   				
	    		if(row_talendMeter_FILE.moment != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
								FormatterUtils.format_Date(row_talendMeter_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.system_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.project != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job_repository_id != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job_version != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.context != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.origin != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.label != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.label)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.count != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.count)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.reference != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.reference)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.thresholds != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.thresholds)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendMeter_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendMeter_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendMeter_CONSOLE);
                    }
                    consoleOut_talendMeter_CONSOLE.println(strBuffer_talendMeter_CONSOLE.toString());
                    consoleOut_talendMeter_CONSOLE.flush();
                    nb_line_talendMeter_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendMeter_CONSOLE++;

/**
 * [talendMeter_CONSOLE main ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	

 



/**
 * [talendMeter_FILE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_METTER process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_end ] stop
 */
	
	/**
	 * [talendMeter_METTER end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

	}


 

ok_Hash.put("talendMeter_METTER", true);
end_Hash.put("talendMeter_METTER", System.currentTimeMillis());




/**
 * [talendMeter_METTER end ] stop
 */

	
	/**
	 * [talendMeter_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	



		
			
					if(outtalendMeter_FILE!=null) {
						outtalendMeter_FILE.flush();
						outtalendMeter_FILE.close();
					}
				
				globalMap.put("talendMeter_FILE_NB_LINE",nb_line_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME",fileName_talendMeter_FILE);
			
		
		
		resourceMap.put("finish_talendMeter_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendMeter_FILE", true);
end_Hash.put("talendMeter_FILE", System.currentTimeMillis());




/**
 * [talendMeter_FILE end ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	


//////
//////
globalMap.put("talendMeter_CONSOLE_NB_LINE",nb_line_talendMeter_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendMeter_CONSOLE", true);
end_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());




/**
 * [talendMeter_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendMeter_METTER finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER finally ] stop
 */

	
	/**
	 * [talendMeter_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	


		if(resourceMap.get("finish_talendMeter_FILE") == null){ 
			
				
						java.io.Writer outtalendMeter_FILE = (java.io.Writer)resourceMap.get("out_talendMeter_FILE");
						if(outtalendMeter_FILE!=null) {
							outtalendMeter_FILE.flush();
							outtalendMeter_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendMeter_FILE finally ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final dmd_delta_actual_ingest_subjob dmd_delta_actual_ingest_subjobClass = new dmd_delta_actual_ingest_subjob();

        int exitCode = dmd_delta_actual_ingest_subjobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dmd_delta_actual_ingest_subjob.class.getClassLoader().getResourceAsStream("local_project/dmd_delta_actual_ingest_subjob_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dmd_delta_actual_ingest_subjob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("dmd_stg_current_processs_id", "id_String");
                            context.dmd_stg_current_processs_id=(String) context.getProperty("dmd_stg_current_processs_id");
                        context.setContextType("dmd_db_additionalparams", "id_String");
                            context.dmd_db_additionalparams=(String) context.getProperty("dmd_db_additionalparams");
                        context.setContextType("dmd_db_host", "id_String");
                            context.dmd_db_host=(String) context.getProperty("dmd_db_host");
                        context.setContextType("dmd_db_name", "id_String");
                            context.dmd_db_name=(String) context.getProperty("dmd_db_name");
                        context.setContextType("dmd_db_password", "id_Password");
                            String pwd_dmd_db_password_value = context.getProperty("dmd_db_password");
                            context.dmd_db_password = null;
                            if(pwd_dmd_db_password_value!=null) {
                                if(context_param.containsKey("dmd_db_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.dmd_db_password = pwd_dmd_db_password_value;
                                } else if (!pwd_dmd_db_password_value.isEmpty()) {
                                    try {
                                        context.dmd_db_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_dmd_db_password_value);
                                        context.put("dmd_db_password",context.dmd_db_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("dmd_db_port", "id_Integer");
                            try{
                                context.dmd_db_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dmd_db_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dmd_db_port", e.getMessage()));
                                context.dmd_db_port=null;
                            }
                        context.setContextType("dmd_db_psql_path", "id_String");
                            context.dmd_db_psql_path=(String) context.getProperty("dmd_db_psql_path");
                        context.setContextType("dmd_db_pwd_string", "id_String");
                            context.dmd_db_pwd_string=(String) context.getProperty("dmd_db_pwd_string");
                        context.setContextType("dmd_db_schema", "id_String");
                            context.dmd_db_schema=(String) context.getProperty("dmd_db_schema");
                        context.setContextType("dmd_db_script_path", "id_String");
                            context.dmd_db_script_path=(String) context.getProperty("dmd_db_script_path");
                        context.setContextType("dmd_db_stg_additionalparams", "id_String");
                            context.dmd_db_stg_additionalparams=(String) context.getProperty("dmd_db_stg_additionalparams");
                        context.setContextType("dmd_db_stg_host", "id_String");
                            context.dmd_db_stg_host=(String) context.getProperty("dmd_db_stg_host");
                        context.setContextType("dmd_db_stg_name", "id_String");
                            context.dmd_db_stg_name=(String) context.getProperty("dmd_db_stg_name");
                        context.setContextType("dmd_db_stg_password", "id_Password");
                            String pwd_dmd_db_stg_password_value = context.getProperty("dmd_db_stg_password");
                            context.dmd_db_stg_password = null;
                            if(pwd_dmd_db_stg_password_value!=null) {
                                if(context_param.containsKey("dmd_db_stg_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.dmd_db_stg_password = pwd_dmd_db_stg_password_value;
                                } else if (!pwd_dmd_db_stg_password_value.isEmpty()) {
                                    try {
                                        context.dmd_db_stg_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_dmd_db_stg_password_value);
                                        context.put("dmd_db_stg_password",context.dmd_db_stg_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("dmd_db_stg_port", "id_Integer");
                            try{
                                context.dmd_db_stg_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dmd_db_stg_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dmd_db_stg_port", e.getMessage()));
                                context.dmd_db_stg_port=null;
                            }
                        context.setContextType("dmd_db_stg_pwd_string", "id_String");
                            context.dmd_db_stg_pwd_string=(String) context.getProperty("dmd_db_stg_pwd_string");
                        context.setContextType("dmd_db_stg_schema", "id_String");
                            context.dmd_db_stg_schema=(String) context.getProperty("dmd_db_stg_schema");
                        context.setContextType("dmd_db_stg_user", "id_String");
                            context.dmd_db_stg_user=(String) context.getProperty("dmd_db_stg_user");
                        context.setContextType("dmd_db_user", "id_String");
                            context.dmd_db_user=(String) context.getProperty("dmd_db_user");
                        context.setContextType("dmd_file_path", "id_String");
                            context.dmd_file_path=(String) context.getProperty("dmd_file_path");
                        context.setContextType("dmd_version", "id_String");
                            context.dmd_version=(String) context.getProperty("dmd_version");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dmd_stg_current_processs_id")) {
                context.dmd_stg_current_processs_id = (String) parentContextMap.get("dmd_stg_current_processs_id");
            }if (parentContextMap.containsKey("dmd_db_additionalparams")) {
                context.dmd_db_additionalparams = (String) parentContextMap.get("dmd_db_additionalparams");
            }if (parentContextMap.containsKey("dmd_db_host")) {
                context.dmd_db_host = (String) parentContextMap.get("dmd_db_host");
            }if (parentContextMap.containsKey("dmd_db_name")) {
                context.dmd_db_name = (String) parentContextMap.get("dmd_db_name");
            }if (parentContextMap.containsKey("dmd_db_password")) {
                context.dmd_db_password = (java.lang.String) parentContextMap.get("dmd_db_password");
            }if (parentContextMap.containsKey("dmd_db_port")) {
                context.dmd_db_port = (Integer) parentContextMap.get("dmd_db_port");
            }if (parentContextMap.containsKey("dmd_db_psql_path")) {
                context.dmd_db_psql_path = (String) parentContextMap.get("dmd_db_psql_path");
            }if (parentContextMap.containsKey("dmd_db_pwd_string")) {
                context.dmd_db_pwd_string = (String) parentContextMap.get("dmd_db_pwd_string");
            }if (parentContextMap.containsKey("dmd_db_schema")) {
                context.dmd_db_schema = (String) parentContextMap.get("dmd_db_schema");
            }if (parentContextMap.containsKey("dmd_db_script_path")) {
                context.dmd_db_script_path = (String) parentContextMap.get("dmd_db_script_path");
            }if (parentContextMap.containsKey("dmd_db_stg_additionalparams")) {
                context.dmd_db_stg_additionalparams = (String) parentContextMap.get("dmd_db_stg_additionalparams");
            }if (parentContextMap.containsKey("dmd_db_stg_host")) {
                context.dmd_db_stg_host = (String) parentContextMap.get("dmd_db_stg_host");
            }if (parentContextMap.containsKey("dmd_db_stg_name")) {
                context.dmd_db_stg_name = (String) parentContextMap.get("dmd_db_stg_name");
            }if (parentContextMap.containsKey("dmd_db_stg_password")) {
                context.dmd_db_stg_password = (java.lang.String) parentContextMap.get("dmd_db_stg_password");
            }if (parentContextMap.containsKey("dmd_db_stg_port")) {
                context.dmd_db_stg_port = (Integer) parentContextMap.get("dmd_db_stg_port");
            }if (parentContextMap.containsKey("dmd_db_stg_pwd_string")) {
                context.dmd_db_stg_pwd_string = (String) parentContextMap.get("dmd_db_stg_pwd_string");
            }if (parentContextMap.containsKey("dmd_db_stg_schema")) {
                context.dmd_db_stg_schema = (String) parentContextMap.get("dmd_db_stg_schema");
            }if (parentContextMap.containsKey("dmd_db_stg_user")) {
                context.dmd_db_stg_user = (String) parentContextMap.get("dmd_db_stg_user");
            }if (parentContextMap.containsKey("dmd_db_user")) {
                context.dmd_db_user = (String) parentContextMap.get("dmd_db_user");
            }if (parentContextMap.containsKey("dmd_file_path")) {
                context.dmd_file_path = (String) parentContextMap.get("dmd_file_path");
            }if (parentContextMap.containsKey("dmd_version")) {
                context.dmd_version = (String) parentContextMap.get("dmd_version");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("dmd_db_password");
			parametersToEncrypt.add("dmd_db_stg_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        talendStats_STATS.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dmd_delta_actual_ingest_subjob");
        }
        talendStats_STATS.addMessage(status==""?"end":status, (end-startTime));
        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1527274 characters generated by Talend Open Studio for Data Integration 
 *     on the 13 January, 2021 3:11:39 PM IST
 ************************************************************************************************/