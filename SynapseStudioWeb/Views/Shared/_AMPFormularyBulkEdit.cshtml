@model SynapseStudioWeb.Models.MedicationMgmt.BulkFormularyEditModel;

<style type="text/css">
    div.token-input-dropdown-facebook {
        /*z-index: 1051 !important;*/
        height: 200px !important;
        overflow-y: scroll !important;
        overflow-x: hidden !important;
    }

    .accordion-menu > button {
        display: block;
        position: relative;
    }

        .accordion-menu > button:after {
            content: "\f078"; /* fa-chevron-down */
            font-family: 'FontAwesome';
            position: absolute;
            right: 12px;
        }

        .accordion-menu > button[aria-expanded="true"]:after {
            content: "\f077"; /* fa-chevron-up */
        }

    .validation-summary-valid .header-msg {
        display: none;
    }
</style>
<link href="~/lib/candlestick/candlestick.min.css" rel="stylesheet" type="text/css" />

<link href="~/lib/token-input-1.6.0/styles/token-input-facebook.css" rel="stylesheet" type="text/css" />
<div asp-validation-summary="All" class="text-danger" id="pnlMedicationValidationSmry">
    <div class="header-msg m-1 p-1">Please correct the following errors</div>
</div>
<script type="text/javascript" src="~/lib/candlestick/candlestick.min.js"></script>
<script type="text/javascript" src="~/lib/candlestick/hammer.min.js"></script>
<script type="text/javascript" src="~/lib/candlestick/jquery.hammer.js"></script>

<script type="text/javascript">
    var rootCustomMedicationId = "@Model.ControlIdentifier";
    var rootCustomMedicationIdSelector = "#@Model.ControlIdentifier";
</script>
@{
    var DeriveId = new Func<string, string>((id) => $"{Model.ControlIdentifier}_{id}");

    var baseURLPath = string.IsNullOrEmpty(Context.Request.PathBase) ? $"{ Context.Request.Scheme }://{Context.Request.Host}" : $"{ Context.Request.Scheme }://{Context.Request.Host}{Context.Request.PathBase}";

    var DeriveAbsUrl = new Func<string, string>((actionPath) => string.IsNullOrEmpty(actionPath) ? "" : $"{ baseURLPath}/{actionPath.TrimStart('/')}");
}
<div class="vtm-edit-medication root-vtm-edit-medication" id="@Model.ControlIdentifier">
    <div id="accordion">
        <div class="card">
            <div class="card-header" id="headingOne">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #productDetails" aria-expanded="true" aria-controls="productDetails">
                        <i class="fas fa-tablets"></i> Product Details
                    </button>
                </h5>
            </div>
            @Html.HiddenFor(m => m.IsBulkEdit)
            @Html.HiddenFor(m => m.IsImported)
            @Html.HiddenFor(m => m.SerializedOriginalObj)
            @Html.HiddenFor(m => m.ControlIdentifier)
            @for (var fvidIndex = 0; fvidIndex < Model.FormularyVersionIds.Count; fvidIndex++)
            {
                @Html.HiddenFor(m => m.FormularyVersionIds[fvidIndex])
            }
            <div id="productDetails" class="collapse show" aria-labelledby="headingOne" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    <div class="form-group row">
                        <label for="producttype" class="col-sm-5 col-form-label">Product Type</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(m => m.ProductType, ViewBag.ProductTypes as SelectList, new { @class = "form-control", @disabled = "disabled" })
                            @Html.HiddenFor(m => m.ProductType, new { @id = DeriveId("hdnProductType") })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="formularystatus" class="col-sm-5 col-form-label">Formulary Status</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(m => m.RnohFormularyStatuscd, ViewBag.FormularyStatuses as SelectList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.RnohFormularyStatuscd)
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="localLicensedUse" class="col-sm-5 col-form-label">Local Licensed Indications</label>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalLicensedUse)" data-isdisabled="false" data-singleselect="false" id="@DeriveId("localLicensedUse")" name="localLicensedUse" type="text" data-query-url="@DeriveAbsUrl("/Formulary/SearchIndication")" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="localUnlicensedUse" class="col-sm-5 col-form-label">Local Unlicensed Indications</label>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalUnlicensedUse)" data-isdisabled="false" data-singleselect="false" id="@DeriveId("localUnlicensedUse")" name="localUnlicensedUse" type="text" data-query-url="@DeriveAbsUrl("/Formulary/SearchIndication")" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingTwo">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #posology" aria-expanded="false" aria-controls="posology">
                        <i class="fas fa-flask"></i> Posology
                    </button>
                </h5>
            </div>

            <div id="posology" class="collapse" aria-labelledby="headingTwo" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    <div class="form-group row">
                        <label for="roundingfactor" class="col-sm-5 col-form-label">Rounding Factor</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(m => m.RoundingFactorCd, ViewBag.RoundingFactors as SelectList, new { @id = DeriveId("txtRoundingFactor"), @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Route" class="col-sm-5 col-form-label">Local Licensed Route</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(m => m.LocalLicensedRoute, new { @class = "form-control studio-autocomplete", @id = $"{DeriveId("localLicensedRoute")}", data_existingdata = SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalLicensedRoute), data_singleselect = "false", data_isdisabled = "false", data_query_url = DeriveAbsUrl("/Formulary/SearchRoutes") })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="unlicensedroute" class="col-sm-5 col-form-label">Local Unlicensed Route</label>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalUnlicensedRoute)" data-singleselect="false" data-query-url=@DeriveAbsUrl("/Formulary/SearchRoutes") data-isdisabled="false" id="@DeriveId("localUnlicensedRoute")" type="text" name="LocalUnlicensedRoute" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingThree">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #guidance" aria-expanded="false" aria-controls="guidance">
                        <i class="fas fa-book-reader"></i> Guidance
                    </button>
                </h5>
            </div>

            <div id="guidance" class="collapse" aria-labelledby="headingThree" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    <div class="card mb-2">
                        <div class="card-header">
                            <div class="h6">
                                Custom Warnings
                                <div class="float-right">
                                    <label class="mr-2"><a href="#" class="add-custom-warning" id="@DeriveId("btnAddCustomWarning")"><i class="fa fa-plus"></i></a></label>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="CustomWarningContainer" data-existingcustomwarning="@SynapseStudioWeb.Helpers.Extensions.SerializeListToJsonArray(Model.CustomWarnings)">
                                <!--Add Custom Warning Controls -->
                            </div>
                        </div>
                    </div>
                    <div class="card mb-2">
                        <div class="card-header">
                            <div class="h6">
                                Reminders
                                <div class="float-right">
                                    <label class="mr-2"><a href="#" class="add-reminder" id="@DeriveId("btnAddReminder")"><i class="fa fa-plus"></i></a></label>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="ReminderContainer" data-existingreminder="@SynapseStudioWeb.Helpers.Extensions.SerializeListToJsonArray(Model.Reminders)">
                                <!--Add Reminder Controls -->
                            </div>
                        </div>
                    </div>
                    <div class="card mb-2">
                        <div class="card-header">
                            <div class="h6">
                                Endorsements
                                <div class="float-right">
                                    <label class="mr-2"><a href="#" class="add-endorsement" id="@DeriveId("btnAddEndorsement")"><i class="fa fa-plus"></i></a></label>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="EndorsementContainer" data-existingendorsements="@SynapseStudioWeb.Helpers.Extensions.SerializeListToJsonArray(Model.Endorsements)">
                                <!--Add Endorsement Controls -->
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="medusapreparationinstructions" class="col-sm-5 col-form-label">Medusa Preparation Instructions</label>
                        <div class="col-sm-7">
                            @*@Html.TextBoxFor(m => m.MedusaPreparationInstructionsEditable, new { @class = "form-control" })*@
                            @Html.TextAreaFor(m => m.MedusaPreparationInstructionsEditable, new { @class = "form-control" })
                        </div>
                    </div>
                    @*<div class="form-group row">
                        <label for="niceta" class="col-sm-5 col-form-label">NICE TA</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(m => m.NICETA, new { @class = "form-control" })
                        </div>
                    </div>*@
                    <div class="form-group row">
                        <label for="sideeffects" class="col-sm-5 col-form-label">Side Effects</label>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.SideEffects)" data-isdisabled="false" data-singleselect="false" id="@DeriveId("sideEffects")" name="sideEffects" type="text" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="cautions" class="col-sm-5 col-form-label">Warnings</label>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.Cautions)" data-isdisabled="false" data-singleselect="false" id="@DeriveId("cautions")" name="cautions" type="text" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="titrationtype" class="col-sm-5 col-form-label">Titration Type</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(m => m.TitrationTypesEditableId, ViewBag.TitrationTypes as SelectList, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Diluents" class="col-sm-5 col-form-label">Compatible Diluents</label>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.Diluents)" data-query-url="@DeriveAbsUrl("/Formulary/SearchDiluentsByName")" data-isdisabled="false" data-singleselect="false" id="@DeriveId("Diluents")" name="Diluents" type="text" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingFour">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #flagsClassification" aria-expanded="false" aria-controls="flagsClassification">
                        <i class="fas fa-flag"></i> Flags / Classification
                    </button>
                </h5>
            </div>

            <div id="flagsClassification" class="collapse" aria-labelledby="headingFour" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    <div class="form-group row">
                        <label for="NullableClinicalTrialMedication" class="col-sm-5 col-form-label">Clinical Trial Medication</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableClinicalTrialMedication", Model.NullableClinicalTrialMedication, new { @value = Model.NullableClinicalTrialMedication })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableCriticalDrug" class="col-sm-5 col-form-label">Critical Drug</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableCriticalDrug", Model.NullableCriticalDrug, new { @value = Model.NullableCriticalDrug })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIsGastroResistant" class="col-sm-5 col-form-label">Gastro Resistant</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIsGastroResistant", Model.NullableIsGastroResistant, new { @value = Model.NullableIsGastroResistant })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIsModifiedRelease" class="col-sm-5 col-form-label">Modified Release</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIsModifiedRelease", Model.NullableIsModifiedRelease, new { @value = Model.NullableIsModifiedRelease })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableExpensiveMedication" class="col-sm-5 col-form-label">Expensive Medication</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableExpensiveMedication", Model.NullableExpensiveMedication, new { @value = Model.NullableExpensiveMedication })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableHighAlertMedication" class="col-sm-5 col-form-label">High Alert Medication</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableHighAlertMedication", Model.NullableHighAlertMedication, new { @value = Model.NullableHighAlertMedication })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIVToOral" class="col-sm-5 col-form-label">IV to Oral</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIVToOral", Model.NullableIVToOral, new { @value = Model.NullableIVToOral })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableNotForPrn" class="col-sm-5 col-form-label">Not for PRN</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableNotForPrn", Model.NullableNotForPrn, new { @value = Model.NullableNotForPrn })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIsBloodProduct" class="col-sm-5 col-form-label">Blood Product</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIsBloodProduct", Model.NullableIsBloodProduct, new { @value = Model.NullableIsBloodProduct })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIsDiluent" class="col-sm-5 col-form-label">Diluent</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIsDiluent", Model.NullableIsDiluent, new { @value = Model.NullableIsDiluent })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullablePrescribable" class="col-sm-5 col-form-label">Prescribable</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullablePrescribable", Model.NullablePrescribable, new { @value = Model.NullablePrescribable })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableOutpatientMedication" class="col-sm-5 col-form-label">Outpatient Medication</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableOutpatientMedication", Model.NullableOutpatientMedication, new { @value = Model.NullableOutpatientMedication })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIgnoreDuplicateWarnings" class="col-sm-5 col-form-label">Ignore Duplicate Warnings</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIgnoreDuplicateWarnings", Model.NullableIgnoreDuplicateWarnings, new { @value = Model.NullableIgnoreDuplicateWarnings })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIsCustomControlledDrug" class="col-sm-5 col-form-label">Controlled Drug</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIsCustomControlledDrug", Model.NullableIsCustomControlledDrug, new { @value = Model.NullableIsCustomControlledDrug })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableIsIndicationMandatory" class="col-sm-5 col-form-label">Indication Is Mandatory</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableIsIndicationMandatory", Model.NullableIsIndicationMandatory, new { @value = Model.NullableIsIndicationMandatory })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="NullableWitnessingRequired" class="col-sm-5 col-form-label">Witnessing Required</label>
                        <div class="col-sm-7">
                            @Html.CheckBox("NullableWitnessingRequired", Model.NullableWitnessingRequired, new { @value = Model.NullableWitnessingRequired })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingFive">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #status" aria-expanded="false" aria-controls="status">
                        <i class="fas fa-history"></i> Status
                    </button>
                </h5>
            </div>
            <div id="status" class="collapse" aria-labelledby="headingFive" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    <div class="form-group row">
                        <label for="status" class="col-sm-5 col-form-label">Status</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(m => m.Status, ViewBag.RecordStatuses as SelectList, new { @class = "form-control", @id = DeriveId("ddlRecordStatus") })
                            @Html.HiddenFor(m => m.OriginalStatus)
                        </div>
                    </div>
                    <div id="@DeriveId("pnlReason")" data-initialstatus="@Model.Status" class="form-group row">
                        <label class="col-sm-5 col-form-label">Reason</label>
                        <div class="col-sm-7">
                            @Html.TextAreaFor(m => m.RecStatuschangeMsg, new { @class = "form-control" })
                            <br />
                            <label id="lblstatuschgerr" style="color:red; display:none">
                                Please Enter Reason
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@await Html.PartialAsync("_FormularyCustomWarningTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

@await Html.PartialAsync("_FormularyReminderTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

@await Html.PartialAsync("_FormularyEndorsementTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

<script type="text/javascript" src="~/lib/token-input-1.6.0/src/jquery.tokeninput.js"></script>
<script type="text/javascript">

    $(document).ready(function () {

        setTimeout(() => {
            let inputs = $(".vtm-edit-medication :input");
            if (inputs && inputs.length > 0) {
                inputs.each(function(indx, el) {
                    let isReadOnly = $(this).data('isreadonly');
                    if (isReadOnly == true) $(this).attr('readonly', true);
                });
            }
        }, 100);

        let rootCntrl = '#@Model.ControlIdentifier';

        let recStatusCntrolId = `${rootCntrl}_pnlReason`;
        onRecordStatusChange(recStatusCntrolId, $(recStatusCntrolId).data('initialstatus'));

        $(`${rootCntrl}_ddlRecordStatus`).on('change', function () {
            let rootCntrl = '#@Model.ControlIdentifier';
            let recStatusCntrolId = `${rootCntrl}_pnlReason`;
            onRecordStatusChange(recStatusCntrolId, $(this).val());
        });

        //$(`${rootCntrl} :checkbox`).bootstrapToggle('destroy');

        setTimeout(() => {
            //$(`${rootCntrl} :checkbox`).bootstrapToggle({
            //    on: 'Yes',
            //    off: 'No',
            //    onstyle: 'success',
            //    offstyle: 'danger',
            //    width: 70,
            //    size: 'sm'
            //});

            $(`${rootCntrl} :checkbox`).candlestick({
                'mode': 'options', // "contents" is the other mode
                'contents': { // Options for "contents" mode
                    'left': 'Left', // The left content
                    'middle': 'Middle', // The middle content
                    'right': 'Right', // The right content
                    'swipe': true // enable the global swipe mode
                },
                'on': 'True', // for on value
                'off': 'False', // for off value
                'nc': null, // for none/default value
                'swipe': true, // for swipe
                'size': 'md', // Sizes (lg, md (default), sm, xs)
                'debug': false, // Display some log message. used with Candlestick.log()
                'allowManualDefault': true
            });

        }, 100);

        var cautions = new studio.AutoComplete(`${rootCntrl}_cautions`, null, null, null, { allowFreeTagging: true });
        cautions.init();

        var sideEffects = new studio.AutoComplete(`${ rootCntrl }_sideEffects`, null, null, null, { allowFreeTagging: true });
        sideEffects.init();

        var localLicensedUse = new studio.AutoComplete(`${rootCntrl}_localLicensedUse`, null, null, null, {});
        localLicensedUse.init();

        var localUnlicensedUse = new studio.AutoComplete(`${rootCntrl }_localUnlicensedUse`, null, null, null, {});
        localUnlicensedUse.init();

        let localLicensedRouteAutoComplete = new studio.AutoComplete(`${rootCntrl}_localLicensedRoute`);
        localLicensedRouteAutoComplete.init();

        let localUnlicensedRouteAutoComplete = new studio.AutoComplete(`${rootCntrl}_localUnlicensedRoute`);
        localUnlicensedRouteAutoComplete.init();

        var diluents = new studio.AutoComplete(`${rootCntrl}_Diluents`);
        diluents.init();

        $(`${rootCntrl}_btnAddEndorsement`).click(function () {

            let rootEl = $(this).closest('.root-vtm-edit-medication');
            let roolElId = $(rootEl).attr('id');
            let endorsementElSel = `#${roolElId} #EndorsementContainer`;

            let currIndex = $(endorsementElSel).data('currindex');
            if (currIndex === undefined || currIndex === null) currIndex = 0;
            else currIndex = currIndex + 1;

            var template = $.validator.format($.trim($(`#${roolElId}_endorsementTmpl`).html()));
            $(template(currIndex)).appendTo(endorsementElSel);
            $(endorsementElSel).data('currindex', currIndex);
        });

        $(`${rootCntrl}_btnAddCustomWarning`).click(function () {

            let rootEl = $(this).closest('.root-vtm-edit-medication');
            let roolElId = $(rootEl).attr('id');
            let customWarningContainerElSel = `#${roolElId} #CustomWarningContainer`;

            let currIndex = $(customWarningContainerElSel).data('currindex');
            if (currIndex === undefined || currIndex === null) currIndex = 0;
            else currIndex = currIndex + 1;

            var cwTemplate = $.validator.format($.trim($(`#${roolElId}_customWarningTmpl`).html()));
            $(cwTemplate(currIndex)).appendTo(customWarningContainerElSel);
            $(customWarningContainerElSel).data('currindex', currIndex);
        });

        $(`${rootCntrl}_btnAddReminder`).click(function () {

            let rootEl = $(this).closest('.root-vtm-edit-medication');
            let roolElId = $(rootEl).attr('id');
            let reminderContainerElSel = `#${roolElId} #ReminderContainer`;

            let currIndex = $(reminderContainerElSel).data('currindex');
            if (currIndex === undefined || currIndex === null) currIndex = 0;
            else currIndex = currIndex + 1;

            var remTemplate = $.validator.format($.trim($(`#${roolElId}_reminderTmpl`).html()));
            $(remTemplate(currIndex)).appendTo(reminderContainerElSel);
            $(reminderContainerElSel).data('currindex', currIndex);
        });
    });

    function onRecordStatusChange(reasonControlId, val) {
        if (!reasonControlId) return;
        if (val && val === "004")
            $(reasonControlId).show();
        else
            $(reasonControlId).hide();
    }
</script>
<script type="text/javascript" src="~/js/studio.autocomplete.js?v=@string.Format("{0}", DateTime.Now.Ticks)"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.unobtrusive-ajax.js"></script>