//Interneuron Synapse

//Copyright(C) 2021  Interneuron CIC

//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

//See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program.If not, see<http://www.gnu.org/licenses/>.


﻿using System;
using Microsoft.EntityFrameworkCore;
using Interneuron.CareRecord.Model.DomainModels;
using Microsoft.EntityFrameworkCore.Metadata;
using Interneuron.CareRecord.Repository;

namespace Interneuron.CareRecord.Repository.DBModelsContext
{
    public partial class SynapseDBContext
    {
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("citext")
                .HasPostgresExtension("pg_buffercache")
                .HasPostgresExtension("pg_stat_statements")
                .HasPostgresExtension("pgcrypto")
                .HasPostgresExtension("tablefunc")
                .HasPostgresExtension("uuid-ossp");

            modelBuilder.Entity<baseview_AneAne>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ane_ane", "baseview");

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.DatePart).HasColumnName("date_part");

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.FirstName)
                    .HasColumnName("first_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Lessthen72).HasColumnName("lessthen72");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Losminutes).HasColumnName("losminutes");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PresentingComplaint)
                    .HasColumnName("presenting_complaint")
                    .HasMaxLength(255);

                entity.Property(e => e.RatSee)
                    .HasColumnName("rat_see")
                    .HasMaxLength(255);

                entity.Property(e => e.Referaltime).HasColumnName("referaltime");

                entity.Property(e => e.ReferenceTo)
                    .HasColumnName("reference_to")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triaged)
                    .HasColumnName("triaged")
                    .HasMaxLength(255);

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");
            });

            modelBuilder.Entity<baseview_AneAnegreaterthan4hours>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ane_anegreaterthan4hours", "baseview");

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.DatePart).HasColumnName("date_part");

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.FirstName)
                    .HasColumnName("first_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Lessthen72).HasColumnName("lessthen72");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Losminutes).HasColumnName("losminutes");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PresentingComplaint)
                    .HasColumnName("presenting_complaint")
                    .HasMaxLength(255);

                entity.Property(e => e.RatSee)
                    .HasColumnName("rat_see")
                    .HasMaxLength(255);

                entity.Property(e => e.Referaltime).HasColumnName("referaltime");

                entity.Property(e => e.ReferenceTo)
                    .HasColumnName("reference_to")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triaged)
                    .HasColumnName("triaged")
                    .HasMaxLength(255);

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");
            });

            modelBuilder.Entity<baseview_AneRecentlydischarged>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ane_recentlydischarged", "baseview");

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.DatePart).HasColumnName("date_part");

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.FirstName)
                    .HasColumnName("first_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Lessthen72).HasColumnName("lessthen72");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Losminutes).HasColumnName("losminutes");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PresentingComplaint)
                    .HasColumnName("presenting_complaint")
                    .HasMaxLength(255);

                entity.Property(e => e.RatSee)
                    .HasColumnName("rat_see")
                    .HasMaxLength(255);

                entity.Property(e => e.Referaltime).HasColumnName("referaltime");

                entity.Property(e => e.ReferenceTo)
                    .HasColumnName("reference_to")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triaged)
                    .HasColumnName("triaged")
                    .HasMaxLength(255);

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");
            });

            modelBuilder.Entity<baseview_AutonomicObservationevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("autonomic_observationevent", "baseview");

                entity.Property(e => e.Acvpu)
                    .HasColumnName("acvpu")
                    .HasMaxLength(255);

                entity.Property(e => e.Bps).HasColumnName("bps");

                entity.Property(e => e.Bpsunits)
                    .HasColumnName("bpsunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Onoxygen)
                    .HasColumnName("onoxygen")
                    .HasColumnType("character varying");

                entity.Property(e => e.Oxygenlpm).HasColumnName("oxygenlpm");

                entity.Property(e => e.Oxygenperc).HasColumnName("oxygenperc");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse).HasColumnName("pulse");

                entity.Property(e => e.Pulseunits)
                    .HasColumnName("pulseunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp).HasColumnName("resp");

                entity.Property(e => e.Respunits)
                    .HasColumnName("respunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Scaletype)
                    .HasColumnName("scaletype")
                    .HasMaxLength(255);

                entity.Property(e => e.ScoreId)
                    .HasColumnName("score_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2).HasColumnName("spo2");

                entity.Property(e => e.Spo2units)
                    .HasColumnName("spo2units")
                    .HasMaxLength(255);

                entity.Property(e => e.Temp).HasColumnName("temp");

                entity.Property(e => e.Tempunits)
                    .HasColumnName("tempunits")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreFluidbalancechart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_fluidbalancechart", "baseview");

                entity.Property(e => e.Chartdate)
                    .HasColumnName("chartdate")
                    .HasColumnType("date");

                entity.Property(e => e.Chartiscompleted).HasColumnName("chartiscompleted");

                entity.Property(e => e.Chartnotes)
                    .HasColumnName("chartnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedhourlyurineoutput)
                    .HasColumnName("expectedhourlyurineoutput")
                    .HasColumnType("numeric");

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername1)
                    .HasColumnName("intakeothername1")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername2)
                    .HasColumnName("intakeothername2")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername3)
                    .HasColumnName("intakeothername3")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername4)
                    .HasColumnName("intakeothername4")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername1)
                    .HasColumnName("outputothername1")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername2)
                    .HasColumnName("outputothername2")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername3)
                    .HasColumnName("outputothername3")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername4)
                    .HasColumnName("outputothername4")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Totalfluidbalance24hour)
                    .HasColumnName("totalfluidbalance24hour")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalintake24hour)
                    .HasColumnName("totalintake24hour")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totaloutput24hour)
                    .HasColumnName("totaloutput24hour")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvCoreFluidbalanceobservationhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_fluidbalanceobservationhistory", "baseview");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Eventtime)
                    .HasColumnName("eventtime")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceobservationId)
                    .HasColumnName("fluidbalanceobservation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Reasonforamending)
                    .HasColumnName("reasonforamending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforinvalidating)
                    .HasColumnName("reasonforinvalidating")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Typeothertext)
                    .HasColumnName("typeothertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvCoreFutureappointments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_futureappointments", "baseview");

                entity.Property(e => e.Admitreason)
                    .HasColumnName("admitreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreInpatientappointments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_inpatientappointments", "baseview");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreInpatientencountersforfluidbalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_inpatientencountersforfluidbalance", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Encounter).HasColumnName("encounter");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreIntakefluidbalanceevents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_intakefluidbalanceevents", "baseview");

                entity.Property(e => e.Eventtime)
                    .HasColumnName("eventtime")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceobservationId)
                    .HasColumnName("fluidbalanceobservation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Typeothertext)
                    .HasColumnName("typeothertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvCoreOutputfluidbalanceevents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_outputfluidbalanceevents", "baseview");

                entity.Property(e => e.Eventtime)
                    .HasColumnName("eventtime")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceobservationId)
                    .HasColumnName("fluidbalanceobservation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Typeothertext)
                    .HasColumnName("typeothertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvCorePersonwithids>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_personwithids", "baseview");

                entity.Property(e => e.Ageyears).HasColumnName("ageyears");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CarerecordDemographics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carerecord_demographics", "baseview");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CarerecordObservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carerecord_observations", "baseview");

                entity.Property(e => e.Bowelsopen)
                    .HasColumnName("bowelsopen")
                    .HasColumnType("json");

                entity.Property(e => e.Bristolstoolchart)
                    .HasColumnName("bristolstoolchart")
                    .HasColumnType("json");

                entity.Property(e => e.Consciousness)
                    .HasColumnName("consciousness")
                    .HasColumnType("json");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Device)
                    .HasColumnName("device")
                    .HasColumnType("json");

                entity.Property(e => e.Diastolicbloodpressure)
                    .HasColumnName("diastolicbloodpressure")
                    .HasColumnType("json");

                entity.Property(e => e.Earlywarningscore)
                    .HasColumnName("earlywarningscore")
                    .HasColumnType("json");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare)
                    .HasColumnName("escalationofcare")
                    .HasColumnType("json");

                entity.Property(e => e.Glucose)
                    .HasColumnName("glucose")
                    .HasColumnType("json");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("json");

                entity.Property(e => e.Inspireoxygenlitrepermin)
                    .HasColumnName("inspireoxygenlitrepermin")
                    .HasColumnType("json");

                entity.Property(e => e.Inspireoxygenpercentage)
                    .HasColumnName("inspireoxygenpercentage")
                    .HasColumnType("json");

                entity.Property(e => e.Isonoxygen)
                    .HasColumnName("isonoxygen")
                    .HasColumnType("json");

                entity.Property(e => e.Monitoring)
                    .HasColumnName("monitoring")
                    .HasColumnType("json");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Oxygensaturations)
                    .HasColumnName("oxygensaturations")
                    .HasColumnType("json");

                entity.Property(e => e.Painscore)
                    .HasColumnName("painscore")
                    .HasColumnType("json");

                entity.Property(e => e.Painscoreatrest)
                    .HasColumnName("painscoreatrest")
                    .HasColumnType("json");

                entity.Property(e => e.Painscorewithmovement)
                    .HasColumnName("painscorewithmovement")
                    .HasColumnType("json");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasColumnType("json");

                entity.Property(e => e.Respirations)
                    .HasColumnName("respirations")
                    .HasColumnType("json");

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasMaxLength(255);

                entity.Property(e => e.Systolicbloodpressure)
                    .HasColumnName("systolicbloodpressure")
                    .HasColumnType("json");

                entity.Property(e => e.Temperature)
                    .HasColumnName("temperature")
                    .HasColumnType("json");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<baseview_CarerecordResults>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carerecord_results", "baseview");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Analysisdatetime).HasColumnName("analysisdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiercode)
                    .HasColumnName("identifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiertext)
                    .HasColumnName("identifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofAdmintasklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_admintasklist", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittimeformatted).HasColumnName("admittimeformatted");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentdateformatted).HasColumnName("appointmentdateformatted");

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofcompletedby)
                    .HasColumnName("cofcompletedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofcompleteddate)
                    .HasColumnName("cofcompleteddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Cofcompleteddateformatted).HasColumnName("cofcompleteddateformatted");

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Ddateofdeathformatted).HasColumnName("ddateofdeathformatted");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasColumnType("character varying");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualattendordna).HasColumnName("manualattendordna");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttbreachdateformatted).HasColumnName("rttbreachdateformatted");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttstartdateformatted).HasColumnName("rttstartdateformatted");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Scheduleappointmentin)
                    .HasColumnName("scheduleappointmentin")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleappointmentintext)
                    .HasColumnName("scheduleappointmentintext")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusclass).HasColumnName("statusclass");

                entity.Property(e => e.Taskdescription)
                    .HasColumnName("taskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasklastsavedby)
                    .HasColumnName("tasklastsavedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasklastsaveddate)
                    .HasColumnName("tasklastsaveddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Tasklastsaveddateformatted).HasColumnName("tasklastsaveddateformatted");

                entity.Property(e => e.Taskstatus).HasColumnName("taskstatus");

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktypedescription)
                    .HasColumnName("tasktypedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofAppointmenthistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_appointmenthistory", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofAppointmenthistorynew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_appointmenthistorynew", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofAppointmentswithlookups>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_appointmentswithlookups", "baseview");

                entity.Property(e => e.Appointmentcomments)
                    .HasColumnName("appointmentcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreasontext)
                    .HasColumnName("appointmentreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttypetext)
                    .HasColumnName("appointmenttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrartext)
                    .HasColumnName("canbewithregistrartext")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAppointmentId)
                    .HasColumnName("cof_appointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentschedule)
                    .HasColumnName("nextappointmentschedule")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentscheduletext)
                    .HasColumnName("nextappointmentscheduletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowedtext)
                    .HasColumnName("overbookingallowedtext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Prioritytext)
                    .HasColumnName("prioritytext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofCofappointmentlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_cofappointmentlist", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittimeformatted).HasColumnName("admittimeformatted");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentdateformatted).HasColumnName("appointmentdateformatted");

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Ddateofdeathformatted).HasColumnName("ddateofdeathformatted");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasColumnType("character varying");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualattendordna).HasColumnName("manualattendordna");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttbreachdateformatted).HasColumnName("rttbreachdateformatted");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttstartdateformatted).HasColumnName("rttstartdateformatted");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusclass).HasColumnName("statusclass");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofIncorrectrttreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_incorrectrttreport", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittimeformatted).HasColumnName("admittimeformatted");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentdateformatted).HasColumnName("appointmentdateformatted");

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofcompletedby)
                    .HasColumnName("cofcompletedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofcompleteddate)
                    .HasColumnName("cofcompleteddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Cofcompleteddateformatted).HasColumnName("cofcompleteddateformatted");

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Ddateofdeathformatted).HasColumnName("ddateofdeathformatted");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Incorrectrtt).HasColumnName("incorrectrtt");

                entity.Property(e => e.Incorrectrttreason).HasColumnName("incorrectrttreason");

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualattendordna).HasColumnName("manualattendordna");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttbreachdateformatted).HasColumnName("rttbreachdateformatted");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttstartdateformatted).HasColumnName("rttstartdateformatted");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusclass).HasColumnName("statusclass");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofNewtasklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_newtasklist", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittimeformatted).HasColumnName("admittimeformatted");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentdateformatted).HasColumnName("appointmentdateformatted");

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Ddateofdeathformatted).HasColumnName("ddateofdeathformatted");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualattendordna).HasColumnName("manualattendordna");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttbreachdateformatted).HasColumnName("rttbreachdateformatted");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttstartdateformatted).HasColumnName("rttstartdateformatted");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusclass).HasColumnName("statusclass");

                entity.Property(e => e.Taskdescription)
                    .HasColumnName("taskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskstatus).HasColumnName("taskstatus");

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktypedescription)
                    .HasColumnName("tasktypedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofOpappointmenthistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_opappointmenthistory", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittimeformatted).HasColumnName("admittimeformatted");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Ddateofdeathformatted).HasColumnName("ddateofdeathformatted");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttbreachdateformatted).HasColumnName("rttbreachdateformatted");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttstartdateformatted).HasColumnName("rttstartdateformatted");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofPatientbannerfinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_patientbannerfinal", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Appointmenttype).HasColumnName("appointmenttype");

                entity.Property(e => e.Attendancestatus).HasColumnName("attendancestatus");

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentrttstatus)
                    .HasColumnName("currentrttstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dayssinceappointment).HasColumnName("dayssinceappointment");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Specialtycategory)
                    .HasColumnName("specialtycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreAllergyintollerance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_allergyintollerance", "entitystore");

                entity.HasIndex(e => e.AllergyintolleranceId)
                    .HasName("core_allergyintollerance_allergyintollerance_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_allergyintollerance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_allergyintollerance__sequenceid_idx");

                entity.Property(e => e.AllergyintolleranceId)
                    .HasColumnName("allergyintollerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasColumnType("citext");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("citext");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasColumnType("citext");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastoccurence)
                    .HasColumnName("lastoccurence")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Modifieddate).HasColumnName("modifieddate");

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Onsetageyears).HasColumnName("onsetageyears");

                entity.Property(e => e.Onsetdatetime)
                    .HasColumnName("onsetdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Onsetstring)
                    .HasColumnName("onsetstring")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasColumnType("citext");

                entity.Property(e => e.Recordeddate)
                    .HasColumnName("recordeddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasColumnType("citext");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasColumnType("citext");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<entitystorematerialised_CoreAllergyintollerance1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_allergyintollerance", "entitystorematerialised");

                entity.HasIndex(e => e.AllergyintolleranceId)
                    .HasName("core_allergyintollerance_allergyintollerance_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_allergyintollerance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_allergyintollerance__sequenceid_idx");

                entity.Property(e => e.AllergyintolleranceId)
                    .HasColumnName("allergyintollerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasColumnType("citext");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("citext");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasColumnType("citext");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastoccurence)
                    .HasColumnName("lastoccurence")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Modifieddate).HasColumnName("modifieddate");

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Onsetageyears).HasColumnName("onsetageyears");

                entity.Property(e => e.Onsetdatetime)
                    .HasColumnName("onsetdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Onsetstring)
                    .HasColumnName("onsetstring")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasColumnType("citext");

                entity.Property(e => e.Recordeddate)
                    .HasColumnName("recordeddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasColumnType("citext");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasColumnType("citext");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<entitystore_CoreCarerecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_carerecord", "entitystore");

                entity.HasIndex(e => e.CarerecordId)
                    .HasName("core_carerecord_carerecord_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_carerecord__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_carerecord__sequenceid_idx");

                entity.Property(e => e.CarerecordId)
                    .HasColumnName("carerecord_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CarerecordtypeId)
                    .HasColumnName("carerecordtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreCarerecord1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_carerecord", "entitystorematerialised");

                entity.HasIndex(e => e.CarerecordId)
                    .HasName("core_carerecord_carerecord_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_carerecord__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_carerecord__sequenceid_idx");

                entity.Property(e => e.CarerecordId)
                    .HasColumnName("carerecord_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CarerecordtypeId)
                    .HasColumnName("carerecordtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreDemoentity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_demoentity", "entitystore");

                entity.HasIndex(e => e.DemoentityId)
                    .HasName("core_demoentity_demoentity_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_demoentity__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_demoentity__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoentityId)
                    .HasColumnName("demoentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreDemoentity1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_demoentity", "entitystorematerialised");

                entity.HasIndex(e => e.DemoentityId)
                    .HasName("core_demoentity_demoentity_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_demoentity__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_demoentity__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoentityId)
                    .HasColumnName("demoentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreDocuments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_documents", "entitystore");

                entity.HasIndex(e => e.DocumentsId)
                    .HasName("core_documents_documents_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_documents__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_documents__sequenceid_idx");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Documentname)
                    .HasColumnName("documentname")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentsId)
                    .HasColumnName("documents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Documentstatuscode)
                    .HasColumnName("documentstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Documentstatustext)
                    .HasColumnName("documentstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcode)
                    .HasColumnName("formatcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcodetext)
                    .HasColumnName("formatcodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacility)
                    .HasColumnName("healthcarefacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifieddatetime).HasColumnName("lastmodifieddatetime");

                entity.Property(e => e.Lastmodifieddatetimeoffset)
                    .HasColumnName("lastmodifieddatetimeoffset")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Mimetype)
                    .HasColumnName("mimetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Mimetypetext)
                    .HasColumnName("mimetypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typecodetext)
                    .HasColumnName("typecodetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreDocuments1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_documents", "entitystorematerialised");

                entity.HasIndex(e => e.DocumentsId)
                    .HasName("core_documents_documents_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_documents__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_documents__sequenceid_idx");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Documentname)
                    .HasColumnName("documentname")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentsId)
                    .HasColumnName("documents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Documentstatuscode)
                    .HasColumnName("documentstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Documentstatustext)
                    .HasColumnName("documentstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcode)
                    .HasColumnName("formatcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcodetext)
                    .HasColumnName("formatcodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacility)
                    .HasColumnName("healthcarefacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifieddatetime).HasColumnName("lastmodifieddatetime");

                entity.Property(e => e.Lastmodifieddatetimeoffset)
                    .HasColumnName("lastmodifieddatetimeoffset")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Mimetype)
                    .HasColumnName("mimetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Mimetypetext)
                    .HasColumnName("mimetypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typecodetext)
                    .HasColumnName("typecodetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreDocumentsrepository>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_documentsrepository", "entitystore");

                entity.HasIndex(e => e.DocumentsrepositoryId)
                    .HasName("core_documentsrepository_documentsrepository_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_documentsrepository__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_documentsrepository__sequenceid_idx");

                entity.Property(e => e.Content)
                    .HasColumnName("content")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DocumentsId)
                    .HasColumnName("documents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentsrepositoryId)
                    .HasColumnName("documentsrepository_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreDocumentsrepository1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_documentsrepository", "entitystorematerialised");

                entity.HasIndex(e => e.DocumentsrepositoryId)
                    .HasName("core_documentsrepository_documentsrepository_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_documentsrepository__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_documentsrepository__sequenceid_idx");

                entity.Property(e => e.Content)
                    .HasColumnName("content")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DocumentsId)
                    .HasColumnName("documents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentsrepositoryId)
                    .HasColumnName("documentsrepository_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_encounter", "entitystorematerialised");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreEncounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_encounter", "entitystore");

                entity.HasIndex(e => e.EncounterId)
                    .HasName("core_encounter_encounter_id_idx");

                entity.HasIndex(e => e.Episodestatuscode)
                    .HasName("core_encounter_episodestatuscode_idx");

                entity.HasIndex(e => e.Patientclasscode)
                    .HasName("core_encounter_patientclasscode_idx");

                entity.HasIndex(e => e.PersonId)
                    .HasName("core_encounter_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_encounter__sequenceid_idx");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreFluidbalancechart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalancechart", "entitystore");

                entity.HasIndex(e => e.FluidbalancechartId)
                    .HasName("core_fluidbalancechart_fluidbalancechart_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_fluidbalancechart__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_fluidbalancechart__sequenceid_idx");

                entity.Property(e => e.Chartdate)
                    .HasColumnName("chartdate")
                    .HasColumnType("date");

                entity.Property(e => e.Chartiscompleted).HasColumnName("chartiscompleted");

                entity.Property(e => e.Chartnotes)
                    .HasColumnName("chartnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedhourlyurineoutput)
                    .HasColumnName("expectedhourlyurineoutput")
                    .HasColumnType("numeric");

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername1)
                    .HasColumnName("intakeothername1")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername2)
                    .HasColumnName("intakeothername2")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername3)
                    .HasColumnName("intakeothername3")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername4)
                    .HasColumnName("intakeothername4")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername1)
                    .HasColumnName("outputothername1")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername2)
                    .HasColumnName("outputothername2")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername3)
                    .HasColumnName("outputothername3")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername4)
                    .HasColumnName("outputothername4")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Totalfluidbalance24hour)
                    .HasColumnName("totalfluidbalance24hour")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalintake24hour)
                    .HasColumnName("totalintake24hour")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totaloutput24hour)
                    .HasColumnName("totaloutput24hour")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalancechart1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalancechart", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancechartId)
                    .HasName("core_fluidbalancechart_fluidbalancechart_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_fluidbalancechart__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_fluidbalancechart__sequenceid_idx");

                entity.Property(e => e.Chartdate)
                    .HasColumnName("chartdate")
                    .HasColumnType("date");

                entity.Property(e => e.Chartiscompleted).HasColumnName("chartiscompleted");

                entity.Property(e => e.Chartnotes)
                    .HasColumnName("chartnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedhourlyurineoutput)
                    .HasColumnName("expectedhourlyurineoutput")
                    .HasColumnType("numeric");

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername1)
                    .HasColumnName("intakeothername1")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername2)
                    .HasColumnName("intakeothername2")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername3)
                    .HasColumnName("intakeothername3")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeothername4)
                    .HasColumnName("intakeothername4")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername1)
                    .HasColumnName("outputothername1")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername2)
                    .HasColumnName("outputothername2")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername3)
                    .HasColumnName("outputothername3")
                    .HasMaxLength(255);

                entity.Property(e => e.Outputothername4)
                    .HasColumnName("outputothername4")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Totalfluidbalance24hour)
                    .HasColumnName("totalfluidbalance24hour")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalintake24hour)
                    .HasColumnName("totalintake24hour")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totaloutput24hour)
                    .HasColumnName("totaloutput24hour")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalanceevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalanceevent", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalanceeventId)
                    .HasName("core_fluidbalanceevent_fluidbalanceevent_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_fluidbalanceevent__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_fluidbalanceevent__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtime)
                    .HasColumnName("eventtime")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Runningintaketotal)
                    .HasColumnName("runningintaketotal")
                    .HasColumnType("numeric");

                entity.Property(e => e.Runningoutputtotal)
                    .HasColumnName("runningoutputtotal")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreFluidbalanceevent1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalanceevent", "entitystore");

                entity.HasIndex(e => e.FluidbalanceeventId)
                    .HasName("core_fluidbalanceevent_fluidbalanceevent_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_fluidbalanceevent__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_fluidbalanceevent__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtime)
                    .HasColumnName("eventtime")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Runningintaketotal)
                    .HasColumnName("runningintaketotal")
                    .HasColumnType("numeric");

                entity.Property(e => e.Runningoutputtotal)
                    .HasColumnName("runningoutputtotal")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreFluidbalanceobservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalanceobservation", "entitystore");

                entity.HasIndex(e => e.FluidbalanceobservationId)
                    .HasName("core_fluidbalanceobservation_fluidbalanceobservation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_fluidbalanceobservation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_fluidbalanceobservation__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceobservationId)
                    .HasColumnName("fluidbalanceobservation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidbalancerecordtype)
                    .HasColumnName("fluidbalancerecordtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Observationnotes)
                    .HasColumnName("observationnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamending)
                    .HasColumnName("reasonforamending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforinvalidating)
                    .HasColumnName("reasonforinvalidating")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Typeothertext)
                    .HasColumnName("typeothertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalanceobservation1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalanceobservation", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalanceobservationId)
                    .HasName("core_fluidbalanceobservation_fluidbalanceobservation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_fluidbalanceobservation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_fluidbalanceobservation__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceobservationId)
                    .HasColumnName("fluidbalanceobservation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidbalancerecordtype)
                    .HasColumnName("fluidbalancerecordtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Observationnotes)
                    .HasColumnName("observationnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamending)
                    .HasColumnName("reasonforamending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforinvalidating)
                    .HasColumnName("reasonforinvalidating")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Typeothertext)
                    .HasColumnName("typeothertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystore_CoreList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_list", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreList1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_list", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreListquestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_listquestion", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ListquestionId)
                    .HasColumnName("listquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreListquestion1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_listquestion", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListquestionId)
                    .HasColumnName("listquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreListquestionvalue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_listquestionvalue", "entitystore");

                entity.Property(e => e.Contextfield)
                    .HasColumnName("contextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListquestionId)
                    .HasColumnName("listquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListquestionvalueId)
                    .HasColumnName("listquestionvalue_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Valueboolean).HasColumnName("valueboolean");

                entity.Property(e => e.Valuedate)
                    .HasColumnName("valuedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Valuelongtext).HasColumnName("valuelongtext");

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreListquestionvalue1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_listquestionvalue", "entitystorematerialised");

                entity.Property(e => e.Contextfield)
                    .HasColumnName("contextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListquestionId)
                    .HasColumnName("listquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListquestionvalueId)
                    .HasColumnName("listquestionvalue_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Valueboolean).HasColumnName("valueboolean");

                entity.Property(e => e.Valuedate)
                    .HasColumnName("valuedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Valuelongtext).HasColumnName("valuelongtext");

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreLookup>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("lookup_pkey");

                entity.ToTable("core_lookup", "entitystore");

                entity.HasIndex(e => e.LookupId)
                    .HasName("lookup_id_unique")
                    .IsUnique();

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.LookupId).HasColumnName("lookup_id");

                entity.Property(e => e.LookupOrder).HasColumnName("lookup_order");

                entity.Property(e => e.LookupType)
                    .IsRequired()
                    .HasColumnName("lookup_type")
                    .HasMaxLength(255);

                entity.Property(e => e.LookupValue)
                    .IsRequired()
                    .HasColumnName("lookup_value")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant).HasColumnName("_tenant");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset)
                    .HasColumnName("_timezoneoffset")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<entitystore_CoreNextofkin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_nextofkin", "entitystore");

                entity.HasIndex(e => e.NextofkinId)
                    .HasName("core_nextofkin_nextofkin_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_nextofkin__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_nextofkin__sequenceid_idx");

                entity.Property(e => e.Addresscity)
                    .HasColumnName("addresscity")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresscountry)
                    .HasColumnName("addresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresscountystateprovince)
                    .HasColumnName("addresscountystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresspostalcode)
                    .HasColumnName("addresspostalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addressstreet)
                    .HasColumnName("addressstreet")
                    .HasMaxLength(255);

                entity.Property(e => e.Addressstreet2)
                    .HasColumnName("addressstreet2")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecode)
                    .HasColumnName("addresstypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecodesystem)
                    .HasColumnName("addresstypecodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecodesystemversion)
                    .HasColumnName("addresstypecodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypedescription)
                    .HasColumnName("addresstypedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Businesscontactinfo)
                    .HasColumnName("businesscontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolecode)
                    .HasColumnName("contactrolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolerelationshipcodesystemdescription)
                    .HasColumnName("contactrolerelationshipcodesystemdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolerelationshipcodesystemversion)
                    .HasColumnName("contactrolerelationshipcodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactroletext)
                    .HasColumnName("contactroletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Givenname)
                    .HasColumnName("givenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.NextofkinId)
                    .HasColumnName("nextofkin_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personalcontactinfo)
                    .HasColumnName("personalcontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecode)
                    .HasColumnName("primarylanguagecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecodesystem)
                    .HasColumnName("primarylanguagecodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecodesystemversion)
                    .HasColumnName("primarylanguagecodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagetext)
                    .HasColumnName("primarylanguagetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Relationship)
                    .HasColumnName("relationship")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcode)
                    .HasColumnName("relationshipcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcodesystemdescription)
                    .HasColumnName("relationshipcodesystemdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcodesystemversion)
                    .HasColumnName("relationshipcodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipnormalized)
                    .HasColumnName("relationshipnormalized")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshiptext)
                    .HasColumnName("relationshiptext")
                    .HasMaxLength(255);

                entity.Property(e => e.Role)
                    .HasColumnName("role")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolenormalized)
                    .HasColumnName("rolenormalized")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Statuschangereasoncode)
                    .HasColumnName("statuschangereasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasoncodesystem)
                    .HasColumnName("statuschangereasoncodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasoncodesystemversion)
                    .HasColumnName("statuschangereasoncodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasontext)
                    .HasColumnName("statuschangereasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscodesystem)
                    .HasColumnName("statuscodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscodesystemversion)
                    .HasColumnName("statuscodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Suffix)
                    .HasColumnName("suffix")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreNextofkin1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_nextofkin", "entitystorematerialised");

                entity.HasIndex(e => e.NextofkinId)
                    .HasName("core_nextofkin_nextofkin_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_nextofkin__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_nextofkin__sequenceid_idx");

                entity.Property(e => e.Addresscity)
                    .HasColumnName("addresscity")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresscountry)
                    .HasColumnName("addresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresscountystateprovince)
                    .HasColumnName("addresscountystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresspostalcode)
                    .HasColumnName("addresspostalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addressstreet)
                    .HasColumnName("addressstreet")
                    .HasMaxLength(255);

                entity.Property(e => e.Addressstreet2)
                    .HasColumnName("addressstreet2")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecode)
                    .HasColumnName("addresstypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecodesystem)
                    .HasColumnName("addresstypecodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecodesystemversion)
                    .HasColumnName("addresstypecodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypedescription)
                    .HasColumnName("addresstypedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Businesscontactinfo)
                    .HasColumnName("businesscontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolecode)
                    .HasColumnName("contactrolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolerelationshipcodesystemdescription)
                    .HasColumnName("contactrolerelationshipcodesystemdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolerelationshipcodesystemversion)
                    .HasColumnName("contactrolerelationshipcodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactroletext)
                    .HasColumnName("contactroletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Givenname)
                    .HasColumnName("givenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.NextofkinId)
                    .HasColumnName("nextofkin_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personalcontactinfo)
                    .HasColumnName("personalcontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecode)
                    .HasColumnName("primarylanguagecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecodesystem)
                    .HasColumnName("primarylanguagecodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecodesystemversion)
                    .HasColumnName("primarylanguagecodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagetext)
                    .HasColumnName("primarylanguagetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Relationship)
                    .HasColumnName("relationship")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcode)
                    .HasColumnName("relationshipcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcodesystemdescription)
                    .HasColumnName("relationshipcodesystemdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcodesystemversion)
                    .HasColumnName("relationshipcodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipnormalized)
                    .HasColumnName("relationshipnormalized")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshiptext)
                    .HasColumnName("relationshiptext")
                    .HasMaxLength(255);

                entity.Property(e => e.Role)
                    .HasColumnName("role")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolenormalized)
                    .HasColumnName("rolenormalized")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuschangereasoncode)
                    .HasColumnName("statuschangereasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasoncodesystem)
                    .HasColumnName("statuschangereasoncodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasoncodesystemversion)
                    .HasColumnName("statuschangereasoncodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasontext)
                    .HasColumnName("statuschangereasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscodesystem)
                    .HasColumnName("statuscodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscodesystemversion)
                    .HasColumnName("statuscodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Suffix)
                    .HasColumnName("suffix")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_note", "entitystore");

                entity.HasIndex(e => e.NoteId)
                    .HasName("core_note_note_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_note__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_note__sequenceid_idx");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Commenttypecode)
                    .HasColumnName("commenttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Commenttypecodingsystem)
                    .HasColumnName("commenttypecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Commenttypetext)
                    .HasColumnName("commenttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Effectivestartdate).HasColumnName("effectivestartdate");

                entity.Property(e => e.Effectivestartdatets)
                    .HasColumnName("effectivestartdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredby)
                    .HasColumnName("enteredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Entereddatetime).HasColumnName("entereddatetime");

                entity.Property(e => e.Entereddatetimets)
                    .HasColumnName("entereddatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Expirationdate).HasColumnName("expirationdate");

                entity.Property(e => e.Expirationdatets)
                    .HasColumnName("expirationdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.NoteId)
                    .HasColumnName("note_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentid)
                    .HasColumnName("parentid")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentname)
                    .HasColumnName("parentname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Sourceofcomment)
                    .HasColumnName("sourceofcomment")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreNote1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_note", "entitystorematerialised");

                entity.HasIndex(e => e.NoteId)
                    .HasName("core_note_note_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_note__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_note__sequenceid_idx");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Commenttypecode)
                    .HasColumnName("commenttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Commenttypecodingsystem)
                    .HasColumnName("commenttypecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Commenttypetext)
                    .HasColumnName("commenttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Effectivestartdate).HasColumnName("effectivestartdate");

                entity.Property(e => e.Effectivestartdatets)
                    .HasColumnName("effectivestartdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredby)
                    .HasColumnName("enteredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Entereddatetime).HasColumnName("entereddatetime");

                entity.Property(e => e.Entereddatetimets)
                    .HasColumnName("entereddatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Expirationdate).HasColumnName("expirationdate");

                entity.Property(e => e.Expirationdatets)
                    .HasColumnName("expirationdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.NoteId)
                    .HasColumnName("note_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentid)
                    .HasColumnName("parentid")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentname)
                    .HasColumnName("parentname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Sourceofcomment)
                    .HasColumnName("sourceofcomment")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreObservation>(entity =>
            {
                //entity.HasNoKey();
                entity.HasKey(e => e.RowId);

                entity.ToTable("core_observation", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreObservation1>(entity =>
            {
                //entity.HasNoKey();
                entity.HasKey(e => e.RowId);

                entity.ToTable("core_observation", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreObservationevent>(entity =>
            {
                //entity.HasNoKey();
                entity.HasKey(e => e.RowId);

                entity.ToTable("core_observationevent", "entitystorematerialised");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreObservationevent1>(entity =>
            {
                //entity.HasNoKey();
                entity.HasKey(e=> e.RowId);

                entity.ToTable("core_observationevent", "entitystore");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_order", "entitystore");

                entity.HasIndex(e => e.OrderId)
                    .HasName("core_order_order_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_order__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_order__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Datetimeoftransaction).HasColumnName("datetimeoftransaction");

                entity.Property(e => e.Diagnosticserviceid)
                    .HasColumnName("diagnosticserviceid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fillerordernumber)
                    .HasColumnName("fillerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationenddatetime).HasColumnName("observationenddatetime");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordercontrol)
                    .HasColumnName("ordercontrol")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordereffectivedate).HasColumnName("ordereffectivedate");

                entity.Property(e => e.Orderingprovider)
                    .HasColumnName("orderingprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordernotes).HasColumnName("ordernotes");

                entity.Property(e => e.Orderstatus)
                    .HasColumnName("orderstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Placerordernumber)
                    .HasColumnName("placerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Relevantclinicalinfo)
                    .HasColumnName("relevantclinicalinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Requesteddatetime).HasColumnName("requesteddatetime");

                entity.Property(e => e.Resultstatus)
                    .HasColumnName("resultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Specimendatetime).HasColumnName("specimendatetime");

                entity.Property(e => e.Specimentypecode)
                    .HasColumnName("specimentypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypecodingsystem)
                    .HasColumnName("specimentypecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypetext)
                    .HasColumnName("specimentypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangedatetime).HasColumnName("statuschangedatetime");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Universalservicecode)
                    .HasColumnName("universalservicecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Universalservicecodingsystem)
                    .HasColumnName("universalservicecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Universalservicetext)
                    .HasColumnName("universalservicetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreOrder1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_order", "entitystorematerialised");

                entity.HasIndex(e => e.OrderId)
                    .HasName("core_order_order_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_order__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_order__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetimeoftransaction).HasColumnName("datetimeoftransaction");

                entity.Property(e => e.Diagnosticserviceid)
                    .HasColumnName("diagnosticserviceid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fillerordernumber)
                    .HasColumnName("fillerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationenddatetime).HasColumnName("observationenddatetime");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordercontrol)
                    .HasColumnName("ordercontrol")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordereffectivedate).HasColumnName("ordereffectivedate");

                entity.Property(e => e.Orderingprovider)
                    .HasColumnName("orderingprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordernotes).HasColumnName("ordernotes");

                entity.Property(e => e.Orderstatus)
                    .HasColumnName("orderstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Placerordernumber)
                    .HasColumnName("placerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Relevantclinicalinfo)
                    .HasColumnName("relevantclinicalinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Requesteddatetime).HasColumnName("requesteddatetime");

                entity.Property(e => e.Resultstatus)
                    .HasColumnName("resultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Specimendatetime).HasColumnName("specimendatetime");

                entity.Property(e => e.Specimentypecode)
                    .HasColumnName("specimentypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypecodingsystem)
                    .HasColumnName("specimentypecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypetext)
                    .HasColumnName("specimentypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangedatetime).HasColumnName("statuschangedatetime");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Universalservicecode)
                    .HasColumnName("universalservicecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Universalservicecodingsystem)
                    .HasColumnName("universalservicecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Universalservicetext)
                    .HasColumnName("universalservicetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CorePerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_person", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CorePerson1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_person", "entitystore");

                entity.HasIndex(e => e.PersonId)
                    .HasName("core_person_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_person__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_person__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .HasDefaultValueSql("nextval('entitystore.core_person__sequenceid_seq1'::regclass)");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CorePersonOld>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("person_pkey");

                entity.ToTable("core_person_old", "entitystore");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator)
                    .HasColumnName("deathindicator")
                    .HasDefaultValueSql("false");

                entity.Property(e => e.EthnicityLkp).HasColumnName("ethnicity_lkp");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.GenderLkp).HasColumnName("gender_lkp");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasColumnName("lastname")
                    .HasMaxLength(255);

                entity.Property(e => e.MaritalstatusLkp).HasColumnName("maritalstatus_lkp");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId).HasColumnName("person_id");

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ReligionLkp).HasColumnName("religion_lkp");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .HasDefaultValueSql("nextval('entitystore.core_person__sequenceid_seq'::regclass)");

                entity.Property(e => e.SexLkp).HasColumnName("sex_lkp");

                entity.Property(e => e.Suffix)
                    .HasColumnName("suffix")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant).HasColumnName("_tenant");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset)
                    .HasColumnName("_timezoneoffset")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TitleLkp).HasColumnName("title_lkp");

                entity.HasOne(d => d.GenderLkpNavigation)
                    .WithMany(p => p.CorePersonOldGenderLkpNavigation)
                    .HasPrincipalKey(p => p.LookupId)
                    .HasForeignKey(d => d.GenderLkp)
                    .HasConstraintName("person_gender_lookup");

                entity.HasOne(d => d.TitleLkpNavigation)
                    .WithMany(p => p.CorePersonOldTitleLkpNavigation)
                    .HasPrincipalKey(p => p.LookupId)
                    .HasForeignKey(d => d.TitleLkp)
                    .HasConstraintName("person_title_lookup");
            });

            modelBuilder.Entity<entitystore_CorePersonaddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personaddress", "entitystore");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Isprimaryaddress).HasColumnName("isprimaryaddress");

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Otheraddressdetails)
                    .HasColumnName("otheraddressdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaddressId)
                    .HasColumnName("personaddress_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonaddress1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personaddress", "entitystorematerialised");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isprimaryaddress).HasColumnName("isprimaryaddress");

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Otheraddressdetails)
                    .HasColumnName("otheraddressdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaddressId)
                    .HasColumnName("personaddress_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CorePersonaddresstype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personaddresstype", "entitystore");

                entity.Property(e => e.Addresstypecode)
                    .HasColumnName("addresstypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypetext)
                    .HasColumnName("addresstypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PersonaddressId)
                    .HasColumnName("personaddress_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaddresstypeId)
                    .HasColumnName("personaddresstype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonaddresstype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personaddresstype", "entitystorematerialised");

                entity.Property(e => e.Addresstypecode)
                    .HasColumnName("addresstypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypetext)
                    .HasColumnName("addresstypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonaddressId)
                    .HasColumnName("personaddress_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaddresstypeId)
                    .HasColumnName("personaddresstype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CorePersoncontactinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personcontactinfo", "entitystore");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactnotes)
                    .HasColumnName("contactnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttypecode)
                    .HasColumnName("contacttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttypetext)
                    .HasColumnName("contacttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersoncontactinfoId)
                    .HasColumnName("personcontactinfo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersoncontactinfo1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personcontactinfo", "entitystorematerialised");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactnotes)
                    .HasColumnName("contactnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttypecode)
                    .HasColumnName("contacttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttypetext)
                    .HasColumnName("contacttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersoncontactinfoId)
                    .HasColumnName("personcontactinfo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonidentifier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personidentifier", "entitystorematerialised");

                entity.Property(e => e.Assigningauthoritycode)
                    .HasColumnName("assigningauthoritycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assigningauthoritytext)
                    .HasColumnName("assigningauthoritytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Idnumber)
                    .HasColumnName("idnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Idtypecode)
                    .HasColumnName("idtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Idtypetext)
                    .HasColumnName("idtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonidentifierId)
                    .HasColumnName("personidentifier_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CorePersonidentifier1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personidentifier", "entitystore");

                entity.HasIndex(e => e.Idnumber)
                    .HasName("core_personidentifier_idnumber_idx");

                entity.HasIndex(e => e.Idtypecode)
                    .HasName("core_personidentifier_idtypecode_idx");

                entity.HasIndex(e => e.PersonId)
                    .HasName("core_personidentifier_person_id_idx");

                entity.HasIndex(e => e.PersonidentifierId)
                    .HasName("core_personidentifier_personidentifier_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_personidentifier__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_personidentifier__sequenceid_idx");

                entity.Property(e => e.Assigningauthoritycode)
                    .HasColumnName("assigningauthoritycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assigningauthoritytext)
                    .HasColumnName("assigningauthoritytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Idnumber)
                    .HasColumnName("idnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Idtypecode)
                    .HasColumnName("idtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Idtypetext)
                    .HasColumnName("idtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonidentifierId)
                    .HasColumnName("personidentifier_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CorePersonobservationscale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personobservationscale", "entitystore");

                entity.HasIndex(e => e.PersonobservationscaleId)
                    .HasName("core_personobservationscale_personobservationscale_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_personobservationscale__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_personobservationscale__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonobservationscaleId)
                    .HasColumnName("personobservationscale_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonobservationscale1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personobservationscale", "entitystorematerialised");

                entity.HasIndex(e => e.PersonobservationscaleId)
                    .HasName("core_personobservationscale_personobservationscale_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_personobservationscale__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_personobservationscale__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonobservationscaleId)
                    .HasColumnName("personobservationscale_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedure", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedureId)
                    .HasName("core_procedure_procedure_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_procedure__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_procedure__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("citext");

                entity.Property(e => e.Consultant)
                    .HasColumnName("consultant")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("citext");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasColumnType("citext");

                entity.Property(e => e.Surgeon)
                    .HasColumnName("surgeon")
                    .HasColumnType("citext");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreProcedure1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedure", "entitystore");

                entity.HasIndex(e => e.ProcedureId)
                    .HasName("core_procedure_procedure_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_procedure__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_procedure__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("citext");

                entity.Property(e => e.Consultant)
                    .HasColumnName("consultant")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("citext");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasColumnType("citext");

                entity.Property(e => e.Surgeon)
                    .HasColumnName("surgeon")
                    .HasColumnType("citext");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreProvider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_provider", "entitystore");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasMaxLength(255);

                entity.Property(e => e.Jobtitle)
                    .HasColumnName("jobtitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Localcode)
                    .HasColumnName("localcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalcode)
                    .HasColumnName("nationalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Qualifications)
                    .HasColumnName("qualifications")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreProvider1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_provider", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasMaxLength(255);

                entity.Property(e => e.Jobtitle)
                    .HasColumnName("jobtitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Localcode)
                    .HasColumnName("localcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalcode)
                    .HasColumnName("nationalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Qualifications)
                    .HasColumnName("qualifications")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreProviderteam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providerteam", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamId)
                    .HasColumnName("providerteam_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProviderteam1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providerteam", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamId)
                    .HasColumnName("providerteam_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreProviderteammembership>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providerteammembership", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamId)
                    .HasColumnName("providerteam_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteammembershipId)
                    .HasColumnName("providerteammembership_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProviderteammembership1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providerteammembership", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamId)
                    .HasColumnName("providerteam_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteammembershipId)
                    .HasColumnName("providerteammembership_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreQuestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_question", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreQuestion1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_question", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreReferral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referral", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Effectivedate)
                    .HasColumnName("effectivedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expriationdate)
                    .HasColumnName("expriationdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Processdate)
                    .HasColumnName("processdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referraltype)
                    .HasColumnName("referraltype")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddresscountry)
                    .HasColumnName("referredtoprovideraddresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline1)
                    .HasColumnName("referredtoprovideraddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline2)
                    .HasColumnName("referredtoprovideraddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline3)
                    .HasColumnName("referredtoprovideraddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline4)
                    .HasColumnName("referredtoprovideraddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddresspostcode)
                    .HasColumnName("referredtoprovideraddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderfamilyname)
                    .HasColumnName("referredtoproviderfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderfullname)
                    .HasColumnName("referredtoproviderfullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovidergivenname)
                    .HasColumnName("referredtoprovidergivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideridentifier)
                    .HasColumnName("referredtoprovideridentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderlocationcode)
                    .HasColumnName("referredtoproviderlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderlocationtext)
                    .HasColumnName("referredtoproviderlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovidermiddlename)
                    .HasColumnName("referredtoprovidermiddlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderprefix)
                    .HasColumnName("referredtoproviderprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddresscountry)
                    .HasColumnName("referringprovideraddresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline1)
                    .HasColumnName("referringprovideraddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline2)
                    .HasColumnName("referringprovideraddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline3)
                    .HasColumnName("referringprovideraddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline4)
                    .HasColumnName("referringprovideraddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddresspostcode)
                    .HasColumnName("referringprovideraddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderfamilyname)
                    .HasColumnName("referringproviderfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderfullname)
                    .HasColumnName("referringproviderfullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovidergivenname)
                    .HasColumnName("referringprovidergivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideridentifier)
                    .HasColumnName("referringprovideridentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderlocationcode)
                    .HasColumnName("referringproviderlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderlocationtext)
                    .HasColumnName("referringproviderlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovidermiddlename)
                    .HasColumnName("referringprovidermiddlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderprefix)
                    .HasColumnName("referringproviderprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialty)
                    .HasColumnName("specialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreReferral1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referral", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Effectivedate)
                    .HasColumnName("effectivedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expriationdate)
                    .HasColumnName("expriationdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Processdate)
                    .HasColumnName("processdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referraltype)
                    .HasColumnName("referraltype")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddresscountry)
                    .HasColumnName("referredtoprovideraddresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline1)
                    .HasColumnName("referredtoprovideraddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline2)
                    .HasColumnName("referredtoprovideraddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline3)
                    .HasColumnName("referredtoprovideraddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline4)
                    .HasColumnName("referredtoprovideraddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddresspostcode)
                    .HasColumnName("referredtoprovideraddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderfamilyname)
                    .HasColumnName("referredtoproviderfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderfullname)
                    .HasColumnName("referredtoproviderfullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovidergivenname)
                    .HasColumnName("referredtoprovidergivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideridentifier)
                    .HasColumnName("referredtoprovideridentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderlocationcode)
                    .HasColumnName("referredtoproviderlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderlocationtext)
                    .HasColumnName("referredtoproviderlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovidermiddlename)
                    .HasColumnName("referredtoprovidermiddlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderprefix)
                    .HasColumnName("referredtoproviderprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddresscountry)
                    .HasColumnName("referringprovideraddresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline1)
                    .HasColumnName("referringprovideraddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline2)
                    .HasColumnName("referringprovideraddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline3)
                    .HasColumnName("referringprovideraddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline4)
                    .HasColumnName("referringprovideraddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddresspostcode)
                    .HasColumnName("referringprovideraddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderfamilyname)
                    .HasColumnName("referringproviderfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderfullname)
                    .HasColumnName("referringproviderfullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovidergivenname)
                    .HasColumnName("referringprovidergivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideridentifier)
                    .HasColumnName("referringprovideridentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderlocationcode)
                    .HasColumnName("referringproviderlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderlocationtext)
                    .HasColumnName("referringproviderlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovidermiddlename)
                    .HasColumnName("referringprovidermiddlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderprefix)
                    .HasColumnName("referringproviderprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialty)
                    .HasColumnName("specialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreReferralprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referralprovider", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_referralprovider__recordstatus_idx");

                entity.HasIndex(e => e.ReferralproviderId)
                    .HasName("core_referralprovider_referralprovider_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_referralprovider__sequenceid_idx");

                entity.Property(e => e.Addresslineone)
                    .HasColumnName("addresslineone")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresslinetwo)
                    .HasColumnName("addresslinetwo")
                    .HasMaxLength(255);

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Givenname)
                    .HasColumnName("givenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumberlocal)
                    .HasColumnName("idnumberlocal")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumbernational)
                    .HasColumnName("idnumbernational")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcode)
                    .HasColumnName("postcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerrole)
                    .HasColumnName("providerrole")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ReferralproviderId)
                    .HasColumnName("referralprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Specialtycodelocal)
                    .HasColumnName("specialtycodelocal")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycodenational)
                    .HasColumnName("specialtycodenational")
                    .HasMaxLength(255);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreReferralprovider1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referralprovider", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_referralprovider__recordstatus_idx");

                entity.HasIndex(e => e.ReferralproviderId)
                    .HasName("core_referralprovider_referralprovider_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_referralprovider__sequenceid_idx");

                entity.Property(e => e.Addresslineone)
                    .HasColumnName("addresslineone")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresslinetwo)
                    .HasColumnName("addresslinetwo")
                    .HasMaxLength(255);

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Givenname)
                    .HasColumnName("givenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumberlocal)
                    .HasColumnName("idnumberlocal")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumbernational)
                    .HasColumnName("idnumbernational")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcode)
                    .HasColumnName("postcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerrole)
                    .HasColumnName("providerrole")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ReferralproviderId)
                    .HasColumnName("referralprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycodelocal)
                    .HasColumnName("specialtycodelocal")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycodenational)
                    .HasColumnName("specialtycodenational")
                    .HasMaxLength(255);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_CoreResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_result", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_result__recordstatus_idx");

                entity.HasIndex(e => e.ResultId)
                    .HasName("core_result_result_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_result__sequenceid_idx");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Analysisdatetime).HasColumnName("analysisdatetime");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Creationdatetime).HasColumnName("creationdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitycode)
                    .HasColumnName("healthcarefacilitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiercode)
                    .HasColumnName("identifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiertext)
                    .HasColumnName("identifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiercode)
                    .HasColumnName("observationidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiercodingsystem)
                    .HasColumnName("observationidentifiercodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationnotes).HasColumnName("observationnotes");

                entity.Property(e => e.Observationresultstatus)
                    .HasColumnName("observationresultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationsubid)
                    .HasColumnName("observationsubid")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangehigh)
                    .HasColumnName("referencerangehigh")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangelow)
                    .HasColumnName("referencerangelow")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportexaminationdate).HasColumnName("reportexaminationdate");

                entity.Property(e => e.Reportstatuscode)
                    .HasColumnName("reportstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportstatustext)
                    .HasColumnName("reportstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttitle)
                    .HasColumnName("reporttitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypecode)
                    .HasColumnName("reporttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypetext)
                    .HasColumnName("reporttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Scantype)
                    .HasColumnName("scantype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Signedby)
                    .HasColumnName("signedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                //entity.Property(e => e.Units)
                //    .HasColumnName("units")
                //    .HasMaxLength(255);

                entity.Property(e => e.Unitscode)
                    .HasColumnName("unitscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasMaxLength(255);

                //entity.Property(e => e.Value)
                //    .HasColumnName("value")
                //    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreResult1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_result", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_result__recordstatus_idx");

                entity.HasIndex(e => e.ResultId)
                    .HasName("core_result_result_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_result__sequenceid_idx");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Analysisdatetime).HasColumnName("analysisdatetime");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Creationdatetime).HasColumnName("creationdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitycode)
                    .HasColumnName("healthcarefacilitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiercode)
                    .HasColumnName("identifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiertext)
                    .HasColumnName("identifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiercode)
                    .HasColumnName("observationidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiercodingsystem)
                    .HasColumnName("observationidentifiercodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationnotes).HasColumnName("observationnotes");

                entity.Property(e => e.Observationresultstatus)
                    .HasColumnName("observationresultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationsubid)
                    .HasColumnName("observationsubid")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangehigh)
                    .HasColumnName("referencerangehigh")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangelow)
                    .HasColumnName("referencerangelow")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportexaminationdate).HasColumnName("reportexaminationdate");

                entity.Property(e => e.Reportstatuscode)
                    .HasColumnName("reportstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportstatustext)
                    .HasColumnName("reportstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttitle)
                    .HasColumnName("reporttitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypecode)
                    .HasColumnName("reporttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypetext)
                    .HasColumnName("reporttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scantype)
                    .HasColumnName("scantype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Signedby)
                    .HasColumnName("signedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                //entity.Property(e => e.Units)
                //    .HasColumnName("units")
                //    .HasMaxLength(255);

                entity.Property(e => e.Unitscode)
                    .HasColumnName("unitscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasMaxLength(255);

                //entity.Property(e => e.Value)
                //    .HasColumnName("value")
                //    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreScore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_score", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_score__recordstatus_idx");

                entity.HasIndex(e => e.ScoreId)
                    .HasName("core_score_score_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_score__sequenceid_idx");

                entity.Property(e => e.Calculatedby)
                    .HasColumnName("calculatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Calculateddatetime).HasColumnName("calculateddatetime");

                entity.Property(e => e.Calculatedsystem)
                    .HasColumnName("calculatedsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Guidance)
                    .HasColumnName("guidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("numeric");

                entity.Property(e => e.ScoreId)
                    .HasColumnName("score_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scoretype)
                    .HasColumnName("scoretype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreScore1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_score", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_score__recordstatus_idx");

                entity.HasIndex(e => e.ScoreId)
                    .HasName("core_score_score_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_score__sequenceid_idx");

                entity.Property(e => e.Calculatedby)
                    .HasColumnName("calculatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Calculateddatetime).HasColumnName("calculateddatetime");

                entity.Property(e => e.Calculatedsystem)
                    .HasColumnName("calculatedsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Guidance)
                    .HasColumnName("guidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("numeric");

                entity.Property(e => e.ScoreId)
                    .HasColumnName("score_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scoretype)
                    .HasColumnName("scoretype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreTheatresession>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_theatresession", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_theatresession__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_theatresession__sequenceid_idx");

                entity.HasIndex(e => e.TheatresessionId)
                    .HasName("core_theatresession_theatresession_id_idx");

                entity.Property(e => e.Appointmentduration)
                    .HasColumnName("appointmentduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Appointmentdurationunit)
                    .HasColumnName("appointmentdurationunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Bookingsequence)
                    .HasColumnName("bookingsequence")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbypersontypecode)
                    .HasColumnName("cancelledbypersontypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbypersontypetext)
                    .HasColumnName("cancelledbypersontypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledreasoncode)
                    .HasColumnName("cancelledreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledreasontext)
                    .HasColumnName("cancelledreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Deceisiontoadmitdate).HasColumnName("deceisiontoadmitdate");

                entity.Property(e => e.Deceisiontoadmitdatets)
                    .HasColumnName("deceisiontoadmitdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyusercode)
                    .HasColumnName("enteredbyusercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyuserlocation)
                    .HasColumnName("enteredbyuserlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyusername)
                    .HasColumnName("enteredbyusername")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyuserphonenumber)
                    .HasColumnName("enteredbyuserphonenumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitallocation)
                    .HasColumnName("hospitallocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtycode)
                    .HasColumnName("localspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtytext)
                    .HasColumnName("localspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Managementintention)
                    .HasColumnName("managementintention")
                    .HasMaxLength(255);

                entity.Property(e => e.Messagetriggercode)
                    .HasColumnName("messagetriggercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalspecialtycode)
                    .HasColumnName("nationalspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalspecialtytext)
                    .HasColumnName("nationalspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumbertracingstatus)
                    .HasColumnName("nhsnumbertracingstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationstatus)
                    .HasColumnName("operationstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypecode)
                    .HasColumnName("operationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypetext)
                    .HasColumnName("operationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Profilecode)
                    .HasColumnName("profilecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Readyfordischargedate).HasColumnName("readyfordischargedate");

                entity.Property(e => e.Readyfordischargedatets)
                    .HasColumnName("readyfordischargedatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatrelocationcode)
                    .HasColumnName("theatrelocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatrelocationtext)
                    .HasColumnName("theatrelocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionId)
                    .HasColumnName("theatresession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatresessioncode)
                    .HasColumnName("theatresessioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatresessiondate).HasColumnName("theatresessiondate");

                entity.Property(e => e.Theatresessiondatets)
                    .HasColumnName("theatresessiondatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Theatresessiondescription)
                    .HasColumnName("theatresessiondescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreTheatresession1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_theatresession", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_theatresession__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_theatresession__sequenceid_idx");

                entity.HasIndex(e => e.TheatresessionId)
                    .HasName("core_theatresession_theatresession_id_idx");

                entity.Property(e => e.Appointmentduration)
                    .HasColumnName("appointmentduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Appointmentdurationunit)
                    .HasColumnName("appointmentdurationunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Bookingsequence)
                    .HasColumnName("bookingsequence")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbypersontypecode)
                    .HasColumnName("cancelledbypersontypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbypersontypetext)
                    .HasColumnName("cancelledbypersontypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledreasoncode)
                    .HasColumnName("cancelledreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledreasontext)
                    .HasColumnName("cancelledreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deceisiontoadmitdate).HasColumnName("deceisiontoadmitdate");

                entity.Property(e => e.Deceisiontoadmitdatets)
                    .HasColumnName("deceisiontoadmitdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyusercode)
                    .HasColumnName("enteredbyusercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyuserlocation)
                    .HasColumnName("enteredbyuserlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyusername)
                    .HasColumnName("enteredbyusername")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyuserphonenumber)
                    .HasColumnName("enteredbyuserphonenumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitallocation)
                    .HasColumnName("hospitallocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtycode)
                    .HasColumnName("localspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtytext)
                    .HasColumnName("localspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Managementintention)
                    .HasColumnName("managementintention")
                    .HasMaxLength(255);

                entity.Property(e => e.Messagetriggercode)
                    .HasColumnName("messagetriggercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalspecialtycode)
                    .HasColumnName("nationalspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalspecialtytext)
                    .HasColumnName("nationalspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumbertracingstatus)
                    .HasColumnName("nhsnumbertracingstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationstatus)
                    .HasColumnName("operationstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypecode)
                    .HasColumnName("operationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypetext)
                    .HasColumnName("operationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Profilecode)
                    .HasColumnName("profilecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Readyfordischargedate).HasColumnName("readyfordischargedate");

                entity.Property(e => e.Readyfordischargedatets)
                    .HasColumnName("readyfordischargedatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatrelocationcode)
                    .HasColumnName("theatrelocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatrelocationtext)
                    .HasColumnName("theatrelocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionId)
                    .HasColumnName("theatresession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatresessioncode)
                    .HasColumnName("theatresessioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatresessiondate).HasColumnName("theatresessiondate");

                entity.Property(e => e.Theatresessiondatets)
                    .HasColumnName("theatresessiondatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Theatresessiondescription)
                    .HasColumnName("theatresessiondescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_CoreTheatresessionprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_theatresessionprovider", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_theatresessionprovider__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_theatresessionprovider__sequenceid_idx");

                entity.HasIndex(e => e.TheatresessionproviderId)
                    .HasName("core_theatresessionprovider_theatresessionprovider_id_idx");

                entity.Property(e => e.Actioncode)
                    .HasColumnName("actioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actiontext)
                    .HasColumnName("actiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerdegree)
                    .HasColumnName("providerdegree")
                    .HasMaxLength(255);

                entity.Property(e => e.Provideridnumber)
                    .HasColumnName("provideridnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerolecode)
                    .HasColumnName("providerolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerroletext)
                    .HasColumnName("providerroletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Teamidentifiercode)
                    .HasColumnName("teamidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Teamidentifiertext)
                    .HasColumnName("teamidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionId)
                    .HasColumnName("theatresession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionproviderId)
                    .HasColumnName("theatresessionprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreTheatresessionprovider1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_theatresessionprovider", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("core_theatresessionprovider__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("core_theatresessionprovider__sequenceid_idx");

                entity.HasIndex(e => e.TheatresessionproviderId)
                    .HasName("core_theatresessionprovider_theatresessionprovider_id_idx");

                entity.Property(e => e.Actioncode)
                    .HasColumnName("actioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actiontext)
                    .HasColumnName("actiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerdegree)
                    .HasColumnName("providerdegree")
                    .HasMaxLength(255);

                entity.Property(e => e.Provideridnumber)
                    .HasColumnName("provideridnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerolecode)
                    .HasColumnName("providerolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerroletext)
                    .HasColumnName("providerroletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Teamidentifiercode)
                    .HasColumnName("teamidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Teamidentifiertext)
                    .HasColumnName("teamidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionId)
                    .HasColumnName("theatresession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionproviderId)
                    .HasColumnName("theatresessionprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DcsEnrolledpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_enrolledpatients", "baseview");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumber)
                    .HasColumnName("idnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_DcsForm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_form", "entitystore");

                entity.HasIndex(e => e.FormId)
                    .HasName("dcs_form_form_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_form__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_form__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formjson)
                    .HasColumnName("formjson")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsForm1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_form", "entitystorematerialised");

                entity.HasIndex(e => e.FormId)
                    .HasName("dcs_form_form_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_form__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_form__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formjson)
                    .HasColumnName("formjson")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_DcsForminstance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_forminstance", "entitystore");

                entity.HasIndex(e => e.ForminstanceId)
                    .HasName("dcs_forminstance_forminstance_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_forminstance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_forminstance__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontext)
                    .HasColumnName("formcontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontextid)
                    .HasColumnName("formcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastupdatedatetime).HasColumnName("lastupdatedatetime");

                entity.Property(e => e.Lastupdatedatetimets)
                    .HasColumnName("lastupdatedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Lastupdatedby)
                    .HasColumnName("lastupdatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsForminstance1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_forminstance", "entitystorematerialised");

                entity.HasIndex(e => e.ForminstanceId)
                    .HasName("dcs_forminstance_forminstance_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_forminstance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_forminstance__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontext)
                    .HasColumnName("formcontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontextid)
                    .HasColumnName("formcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastupdatedatetime).HasColumnName("lastupdatedatetime");

                entity.Property(e => e.Lastupdatedatetimets)
                    .HasColumnName("lastupdatedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Lastupdatedby)
                    .HasColumnName("lastupdatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_DcsFormresponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_formresponse", "entitystore");

                entity.HasIndex(e => e.FormresponseId)
                    .HasName("dcs_formresponse_formresponse_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_formresponse__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_formresponse__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Fieldid)
                    .HasColumnName("fieldid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldquestion)
                    .HasColumnName("fieldquestion")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormresponseId)
                    .HasColumnName("formresponse_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Responsetext)
                    .HasColumnName("responsetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Responsevalue)
                    .HasColumnName("responsevalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sectionid)
                    .HasColumnName("sectionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsFormresponse1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_formresponse", "entitystorematerialised");

                entity.HasIndex(e => e.FormresponseId)
                    .HasName("dcs_formresponse_formresponse_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_formresponse__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_formresponse__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Fieldid)
                    .HasColumnName("fieldid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldquestion)
                    .HasColumnName("fieldquestion")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormresponseId)
                    .HasColumnName("formresponse_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Responsetext)
                    .HasColumnName("responsetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Responsevalue)
                    .HasColumnName("responsevalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectionid)
                    .HasColumnName("sectionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_DcsFormscore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_formscore", "entitystore");

                entity.HasIndex(e => e.FormscoreId)
                    .HasName("dcs_formscore_formscore_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_formscore__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_formscore__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Forminstancescore)
                    .HasColumnName("forminstancescore")
                    .HasMaxLength(255);

                entity.Property(e => e.FormscoreId)
                    .HasColumnName("formscore_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Reviewtype)
                    .HasColumnName("reviewtype")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Scoredescription)
                    .HasColumnName("scoredescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Scoreid)
                    .HasColumnName("scoreid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsFormscore1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_formscore", "entitystorematerialised");

                entity.HasIndex(e => e.FormscoreId)
                    .HasName("dcs_formscore_formscore_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_formscore__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_formscore__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Forminstancescore)
                    .HasColumnName("forminstancescore")
                    .HasMaxLength(255);

                entity.Property(e => e.FormscoreId)
                    .HasColumnName("formscore_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewtype)
                    .HasColumnName("reviewtype")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scoredescription)
                    .HasColumnName("scoredescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Scoreid)
                    .HasColumnName("scoreid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DcsOutpatientandreferralappointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_outpatientandreferralappointment", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumber)
                    .HasColumnName("idnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_DcsPatientregistration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_patientregistration", "entitystore");

                entity.HasIndex(e => e.PatientregistrationId)
                    .HasName("dcs_patientregistration_patientregistration_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_patientregistration__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_patientregistration__sequenceid_idx");

                entity.Property(e => e.Bloodtaken)
                    .HasColumnName("bloodtaken")
                    .HasMaxLength(255);

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasMaxLength(255);

                entity.Property(e => e.Bp)
                    .HasColumnName("bp")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontextid)
                    .HasColumnName("formcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsagptotake)
                    .HasColumnName("mrsagptotake")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsagroin)
                    .HasColumnName("mrsagroin")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsanose)
                    .HasColumnName("mrsanose")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsawound)
                    .HasColumnName("mrsawound")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientregistrationId)
                    .HasColumnName("patientregistration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedure)
                    .HasColumnName("procedure")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulsereg)
                    .HasColumnName("pulsereg")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Surgerygrade)
                    .HasColumnName("surgerygrade")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_DcsPatientregistration1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_patientregistration", "entitystorematerialised");

                entity.HasIndex(e => e.PatientregistrationId)
                    .HasName("dcs_patientregistration_patientregistration_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("dcs_patientregistration__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("dcs_patientregistration__sequenceid_idx");

                entity.Property(e => e.Bloodtaken)
                    .HasColumnName("bloodtaken")
                    .HasMaxLength(255);

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasMaxLength(255);

                entity.Property(e => e.Bp)
                    .HasColumnName("bp")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontextid)
                    .HasColumnName("formcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsagptotake)
                    .HasColumnName("mrsagptotake")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsagroin)
                    .HasColumnName("mrsagroin")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsanose)
                    .HasColumnName("mrsanose")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsawound)
                    .HasColumnName("mrsawound")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientregistrationId)
                    .HasColumnName("patientregistration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedure)
                    .HasColumnName("procedure")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulsereg)
                    .HasColumnName("pulsereg")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Surgerygrade)
                    .HasColumnName("surgerygrade")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoBedboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_bedboard", "baseview");

                entity.Property(e => e.Admissiondetails).HasColumnName("admissiondetails");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Allergies).HasColumnName("allergies");

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed).HasColumnName("bed");

                entity.Property(e => e.Bedcode).HasColumnName("bedcode");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Ews).HasColumnName("ews");

                entity.Property(e => e.Ewsbadgeclass).HasColumnName("ewsbadgeclass");

                entity.Property(e => e.Ewssmall).HasColumnName("ewssmall");

                entity.Property(e => e.Ewsvalue).HasColumnName("ewsvalue");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationdisplayname).HasColumnName("locationdisplayname");

                entity.Property(e => e.Locationwardinformation).HasColumnName("locationwardinformation");

                entity.Property(e => e.Locationwardinformationright).HasColumnName("locationwardinformationright");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn).HasColumnName("mrn");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Nilbymouth).HasColumnName("nilbymouth");

                entity.Property(e => e.Patientinformationdetailed).HasColumnName("patientinformationdetailed");

                entity.Property(e => e.Patientinformationsimple).HasColumnName("patientinformationsimple");

                entity.Property(e => e.Patientsurveyflag).HasColumnName("patientsurveyflag");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Questionflag).HasColumnName("questionflag");

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");
            });

            modelBuilder.Entity<baseview_DemoDemo2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_demo2", "baseview");

                entity.Property(e => e.Admissiondetails).HasColumnName("admissiondetails");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Allergies).HasColumnName("allergies");

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed).HasColumnName("bed");

                entity.Property(e => e.Bedcode).HasColumnName("bedcode");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Ews).HasColumnName("ews");

                entity.Property(e => e.Ewssmall).HasColumnName("ewssmall");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationdisplayname).HasColumnName("locationdisplayname");

                entity.Property(e => e.Locationwardinformation).HasColumnName("locationwardinformation");

                entity.Property(e => e.Locationwardinformationright).HasColumnName("locationwardinformationright");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn).HasColumnName("mrn");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Nilbymouth).HasColumnName("nilbymouth");

                entity.Property(e => e.Otstatus).HasColumnName("otstatus");

                entity.Property(e => e.Patientinformationdetailed).HasColumnName("patientinformationdetailed");

                entity.Property(e => e.Patientinformationsimple).HasColumnName("patientinformationsimple");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Questionflag).HasColumnName("questionflag");

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");
            });

            modelBuilder.Entity<baseview_DemoDemosampleview1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_demosampleview1", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DemoLocaldemosampleentity1view1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_localdemosampleentity1view1", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DemoNjrworklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_njrworklist", "baseview");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("citext");

                entity.Property(e => e.Consultant)
                    .HasColumnName("consultant")
                    .HasColumnType("citext");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("citext");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");

                entity.Property(e => e.Proceduredateformatted).HasColumnName("proceduredateformatted");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasColumnType("citext");

                entity.Property(e => e.Surgeon)
                    .HasColumnName("surgeon")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<baseview_DemoPatientcontactdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_patientcontactdetails", "baseview");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Dob)
                    .HasColumnName("dob")
                    .HasColumnType("date");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sex)
                    .HasColumnName("sex")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoPatientinfoc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_patientinfoc1", "baseview");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Dob)
                    .HasColumnName("dob")
                    .HasColumnType("date");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sex)
                    .HasColumnName("sex")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoUszdemo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_uszdemo", "baseview");

                entity.Property(e => e.Admissiondetails).HasColumnName("admissiondetails");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Allergies).HasColumnName("allergies");

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed).HasColumnName("bed");

                entity.Property(e => e.Bedcode).HasColumnName("bedcode");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Ews).HasColumnName("ews");

                entity.Property(e => e.Ewssmall).HasColumnName("ewssmall");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationdisplayname).HasColumnName("locationdisplayname");

                entity.Property(e => e.Locationwardinformation).HasColumnName("locationwardinformation");

                entity.Property(e => e.Locationwardinformationright).HasColumnName("locationwardinformationright");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn).HasColumnName("mrn");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Nilbymouth).HasColumnName("nilbymouth");

                entity.Property(e => e.Otstatus).HasColumnName("otstatus");

                entity.Property(e => e.Patientinformationdetailed).HasColumnName("patientinformationdetailed");

                entity.Property(e => e.Patientinformationsimple).HasColumnName("patientinformationsimple");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Questionflag).HasColumnName("questionflag");

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");
            });

            modelBuilder.Entity<baseview_EboardsBcpexport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_bcpexport", "baseview");

                entity.Property(e => e.Admitdate).HasColumnName("admitdate");

                entity.Property(e => e.Admittedbed)
                    .HasColumnName("admittedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittedward)
                    .HasColumnName("admittedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.AllergyFlag).HasColumnName("allergy_flag");

                entity.Property(e => e.Allocatedbed)
                    .HasColumnName("allocatedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedward)
                    .HasColumnName("allocatedward")
                    .HasMaxLength(255);

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultant)
                    .HasColumnName("consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Ddelay).HasColumnName("ddelay");

                entity.Property(e => e.DeliriumFlag).HasColumnName("delirium_flag");

                entity.Property(e => e.DeliriumStatus)
                    .HasColumnName("delirium_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.DementiaFlag).HasColumnName("dementia_flag");

                entity.Property(e => e.DementiaStatus)
                    .HasColumnName("dementia_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.DiabetesFlag).HasColumnName("diabetes_flag");

                entity.Property(e => e.DysphagiaFlag).HasColumnName("dysphagia_flag");

                entity.Property(e => e.ErppathwayFlag).HasColumnName("erppathway_flag");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasColumnType("character varying");

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasColumnType("character varying");

                entity.Property(e => e.FluidswitheldFlag).HasColumnName("fluidswitheld_flag");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.HahStatus)
                    .HasColumnName("hah_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.HelpwithfeedingFlag).HasColumnName("helpwithfeeding_flag");

                entity.Property(e => e.HydrantdeviceFlag).HasColumnName("hydrantdevice_flag");

                entity.Property(e => e.Intendeddischargedate).HasColumnName("intendeddischargedate");

                entity.Property(e => e.Juniorbleep)
                    .HasColumnName("juniorbleep")
                    .HasMaxLength(255);

                entity.Property(e => e.LatextallergyFlag).HasColumnName("latextallergy_flag");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.MicroStatus)
                    .HasColumnName("micro_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.NilbymouthFlag).HasColumnName("nilbymouth_flag");

                entity.Property(e => e.Nurse)
                    .HasColumnName("nurse")
                    .HasMaxLength(255);

                entity.Property(e => e.OtStatus)
                    .HasColumnName("ot_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.OtText)
                    .HasColumnName("ot_text")
                    .HasColumnType("character varying");

                entity.Property(e => e.Patientclass)
                    .HasColumnName("patientclass")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientsurveyStatus)
                    .HasColumnName("patientsurvey_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PrivatepatientFlag).HasColumnName("privatepatient_flag");

                entity.Property(e => e.PtStatus)
                    .HasColumnName("pt_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.PtText)
                    .HasColumnName("pt_text")
                    .HasColumnType("character varying");

                entity.Property(e => e.RadiologyStatus)
                    .HasColumnName("radiology_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.ReadyfordischargeStatus)
                    .HasColumnName("readyfordischarge_status")
                    .HasMaxLength(255);

                entity.Property(e => e.RecoverypathwayFlag).HasColumnName("recoverypathway_flag");

                entity.Property(e => e.S2Status)
                    .HasColumnName("s2_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.S5Status)
                    .HasColumnName("s5_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.SamenameBadge).HasColumnName("samename_badge");

                entity.Property(e => e.SarcomaFlag).HasColumnName("sarcoma_flag");

                entity.Property(e => e.ScheduledfortheatreBadge).HasColumnName("scheduledfortheatre_badge");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.ToreturnformhduFlag).HasColumnName("toreturnformhdu_flag");

                entity.Property(e => e.TransportStatus)
                    .HasColumnName("transport_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.TtaStatus)
                    .HasColumnName("tta_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.TtaText)
                    .HasColumnName("tta_text")
                    .HasColumnType("character varying");

                entity.Property(e => e.TvnFlag).HasColumnName("tvn_flag");

                entity.Property(e => e.VteStatus)
                    .HasColumnName("vte_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EboardsCurrentinpatientbeds>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_currentinpatientbeds", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd)
                    .HasColumnName("edd")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Returnbedcode)
                    .HasColumnName("returnbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returndate)
                    .HasColumnName("returndate")
                    .HasColumnType("date");

                entity.Property(e => e.Returntime)
                    .HasColumnName("returntime")
                    .HasMaxLength(255);

                entity.Property(e => e.Returnwardcode)
                    .HasColumnName("returnwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EboardsEncounteridd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_encounteridd", "baseview");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Idd)
                    .HasColumnName("idd")
                    .HasColumnType("timestamp with time zone");
            });

            modelBuilder.Entity<baseview_EboardsWardswithwaitingarea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_wardswithwaitingarea", "baseview");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardorder)
                    .HasColumnName("wardorder")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<entitystore_ExtendedEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_encounter", "entitystore");

                entity.Property(e => e.Consultingdoctorgmccode)
                    .HasColumnName("consultingdoctorgmccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorpasid)
                    .HasColumnName("consultingdoctorpasid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedadmissiondate).HasColumnName("intendedadmissiondate");

                entity.Property(e => e.Intendedadmissiondatets)
                    .HasColumnName("intendedadmissiondatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Intendedbay)
                    .HasColumnName("intendedbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedbed)
                    .HasColumnName("intendedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendeddischargedatetime).HasColumnName("intendeddischargedatetime");

                entity.Property(e => e.Intendeddischargedatetimets)
                    .HasColumnName("intendeddischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Intendedward)
                    .HasColumnName("intendedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Originaledd).HasColumnName("originaledd");

                entity.Property(e => e.Originaleddts)
                    .HasColumnName("originaleddts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_ExtendedEncounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_encounter", "entitystorematerialised");

                entity.Property(e => e.Consultingdoctorgmccode)
                    .HasColumnName("consultingdoctorgmccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorpasid)
                    .HasColumnName("consultingdoctorpasid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedadmissiondate).HasColumnName("intendedadmissiondate");

                entity.Property(e => e.Intendedadmissiondatets)
                    .HasColumnName("intendedadmissiondatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Intendedbay)
                    .HasColumnName("intendedbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedbed)
                    .HasColumnName("intendedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendeddischargedatetime).HasColumnName("intendeddischargedatetime");

                entity.Property(e => e.Intendeddischargedatetimets)
                    .HasColumnName("intendeddischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Intendedward)
                    .HasColumnName("intendedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Originaledd).HasColumnName("originaledd");

                entity.Property(e => e.Originaleddts)
                    .HasColumnName("originaleddts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_ExtendedPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_person", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_ExtendedPerson1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_person", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_ListBinarycheckboxvalueswithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_binarycheckboxvalueswithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Questioncustomhtml).HasColumnName("questioncustomhtml");

                entity.Property(e => e.Questioncustomhtmlalt).HasColumnName("questioncustomhtmlalt");

                entity.Property(e => e.Questionflag).HasColumnName("questionflag");

                entity.Property(e => e.Valueboolean).HasColumnName("valueboolean");
            });

            modelBuilder.Entity<baseview_ListDatewithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_datewithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuedate)
                    .HasColumnName("valuedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Valuedateformatted).HasColumnName("valuedateformatted");
            });

            modelBuilder.Entity<baseview_ListLongtextwithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_longtextwithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuelongtext).HasColumnName("valuelongtext");
            });

            modelBuilder.Entity<baseview_ListSelectradiovalueswithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_selectradiovalueswithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Optiondisplaytext)
                    .HasColumnName("optiondisplaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Optionflag).HasColumnName("optionflag");

                entity.Property(e => e.Optionflagalt).HasColumnName("optionflagalt");

                entity.Property(e => e.Optionvaluetext)
                    .HasColumnName("optionvaluetext")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionoptioncollectionId)
                    .HasColumnName("questionoptioncollection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ListShorttextwithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_shorttextwithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ListsAlllists>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("lists_alllists", "baseview");

                entity.Property(e => e.BaseviewId)
                    .HasColumnName("baseview_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Baseviewwardfield)
                    .HasColumnName("baseviewwardfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextid)
                    .HasColumnName("_contextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdchannelid)
                    .HasColumnName("_createdchannelid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Defaultcontext)
                    .HasColumnName("defaultcontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Defaultcontextfield)
                    .HasColumnName("defaultcontextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Defaultrowcssstyle)
                    .HasColumnName("defaultrowcssstyle")
                    .HasMaxLength(255);

                entity.Property(e => e.Expirydate)
                    .HasColumnName("_expirydate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Listcontextkey)
                    .HasColumnName("listcontextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Listdescription)
                    .HasColumnName("listdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Listname)
                    .HasColumnName("listname")
                    .HasMaxLength(255);

                entity.Property(e => e.Listnamespace)
                    .HasColumnName("listnamespace")
                    .HasMaxLength(255);

                entity.Property(e => e.Listnamespaceid)
                    .HasColumnName("listnamespaceid")
                    .HasMaxLength(255);

                entity.Property(e => e.Matchedcontextfield)
                    .HasColumnName("matchedcontextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientbannerfield)
                    .HasColumnName("patientbannerfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rowcssfield)
                    .HasColumnName("rowcssfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tablecssstyle)
                    .HasColumnName("tablecssstyle")
                    .HasMaxLength(255);

                entity.Property(e => e.Tableheadercssstyle)
                    .HasColumnName("tableheadercssstyle")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalAneClinicalnotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_clinicalnotes", "entitystore");

                entity.HasIndex(e => e.AneClinicalnotesId)
                    .HasName("local_ane_clinicalnotes_ane_clinicalnotes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_ane_clinicalnotes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_ane_clinicalnotes__sequenceid_idx");

                entity.Property(e => e.AneClinicalnotesId)
                    .HasColumnName("ane_clinicalnotes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalnotes)
                    .HasColumnName("clinicalnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneClinicalnotes1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_clinicalnotes", "entitystorematerialised");

                entity.HasIndex(e => e.AneClinicalnotesId)
                    .HasName("local_ane_clinicalnotes_ane_clinicalnotes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_ane_clinicalnotes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_ane_clinicalnotes__sequenceid_idx");

                entity.Property(e => e.AneClinicalnotesId)
                    .HasColumnName("ane_clinicalnotes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalnotes)
                    .HasColumnName("clinicalnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneCoding>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_coding", "entitystorematerialised");

                entity.HasIndex(e => e.AneCodingId)
                    .HasName("local_ane_coding_ane_coding_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_ane_coding__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_ane_coding__sequenceid_idx");

                entity.Property(e => e.Additionaltreatmentsarray)
                    .HasColumnName("additionaltreatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaesthesiaarray)
                    .HasColumnName("anaesthesiaarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Anatomicalareaarray)
                    .HasColumnName("anatomicalareaarray")
                    .HasMaxLength(255);

                entity.Property(e => e.AneCodingId)
                    .HasColumnName("ane_coding_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Diagnosisarray)
                    .HasColumnName("diagnosisarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargearray)
                    .HasColumnName("dischargearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargenowarray)
                    .HasColumnName("dischargenowarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargeplanningarray)
                    .HasColumnName("dischargeplanningarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Disposal)
                    .HasColumnName("disposal")
                    .HasMaxLength(255);

                entity.Property(e => e.Disposalward)
                    .HasColumnName("disposalward")
                    .HasMaxLength(255);

                entity.Property(e => e.Headandneckarray)
                    .HasColumnName("headandneckarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Informationcategoryarray)
                    .HasColumnName("informationcategoryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Injuriesarray)
                    .HasColumnName("injuriesarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Investigationarray)
                    .HasColumnName("investigationarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Laterallityarray)
                    .HasColumnName("laterallityarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Lifesupportarray)
                    .HasColumnName("lifesupportarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Lowerlimbarray)
                    .HasColumnName("lowerlimbarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Maindiagnosis)
                    .HasColumnName("maindiagnosis")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationarray)
                    .HasColumnName("medicationarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicinearray)
                    .HasColumnName("medicinearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Minorilnessarray)
                    .HasColumnName("minorilnessarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Minortreatmentsarray)
                    .HasColumnName("minortreatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Monitoringarray)
                    .HasColumnName("monitoringarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Obsandgynaearray)
                    .HasColumnName("obsandgynaearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Ophthalmologyarray)
                    .HasColumnName("ophthalmologyarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Orthopaedicsarray)
                    .HasColumnName("orthopaedicsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Othercategoryarray)
                    .HasColumnName("othercategoryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduresarray)
                    .HasColumnName("proceduresarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Psychiatryarray)
                    .HasColumnName("psychiatryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewingdoctor)
                    .HasColumnName("reviewingdoctor")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Seniorreviewarray)
                    .HasColumnName("seniorreviewarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Surgeryarray)
                    .HasColumnName("surgeryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatmentsarray)
                    .HasColumnName("treatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Trunkarray)
                    .HasColumnName("trunkarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Upperlimbarray)
                    .HasColumnName("upperlimbarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Urologyarray)
                    .HasColumnName("urologyarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Woundclosuresarray)
                    .HasColumnName("woundclosuresarray")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalAneCoding1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_coding", "entitystore");

                entity.HasIndex(e => e.AneCodingId)
                    .HasName("local_ane_coding_ane_coding_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_ane_coding__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_ane_coding__sequenceid_idx");

                entity.Property(e => e.Additionaltreatmentsarray)
                    .HasColumnName("additionaltreatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaesthesiaarray)
                    .HasColumnName("anaesthesiaarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Anatomicalareaarray)
                    .HasColumnName("anatomicalareaarray")
                    .HasMaxLength(255);

                entity.Property(e => e.AneCodingId)
                    .HasColumnName("ane_coding_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Diagnosisarray)
                    .HasColumnName("diagnosisarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargearray)
                    .HasColumnName("dischargearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargenowarray)
                    .HasColumnName("dischargenowarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargeplanningarray)
                    .HasColumnName("dischargeplanningarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Disposal)
                    .HasColumnName("disposal")
                    .HasMaxLength(255);

                entity.Property(e => e.Disposalward)
                    .HasColumnName("disposalward")
                    .HasMaxLength(255);

                entity.Property(e => e.Headandneckarray)
                    .HasColumnName("headandneckarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Informationcategoryarray)
                    .HasColumnName("informationcategoryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Injuriesarray)
                    .HasColumnName("injuriesarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Investigationarray)
                    .HasColumnName("investigationarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Laterallityarray)
                    .HasColumnName("laterallityarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Lifesupportarray)
                    .HasColumnName("lifesupportarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Lowerlimbarray)
                    .HasColumnName("lowerlimbarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Maindiagnosis)
                    .HasColumnName("maindiagnosis")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationarray)
                    .HasColumnName("medicationarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicinearray)
                    .HasColumnName("medicinearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Minorilnessarray)
                    .HasColumnName("minorilnessarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Minortreatmentsarray)
                    .HasColumnName("minortreatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Monitoringarray)
                    .HasColumnName("monitoringarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Obsandgynaearray)
                    .HasColumnName("obsandgynaearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Ophthalmologyarray)
                    .HasColumnName("ophthalmologyarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Orthopaedicsarray)
                    .HasColumnName("orthopaedicsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Othercategoryarray)
                    .HasColumnName("othercategoryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduresarray)
                    .HasColumnName("proceduresarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Psychiatryarray)
                    .HasColumnName("psychiatryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Reviewingdoctor)
                    .HasColumnName("reviewingdoctor")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Seniorreviewarray)
                    .HasColumnName("seniorreviewarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Surgeryarray)
                    .HasColumnName("surgeryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatmentsarray)
                    .HasColumnName("treatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Trunkarray)
                    .HasColumnName("trunkarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Upperlimbarray)
                    .HasColumnName("upperlimbarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Urologyarray)
                    .HasColumnName("urologyarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Woundclosuresarray)
                    .HasColumnName("woundclosuresarray")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_encounter", "entitystorematerialised");

                entity.HasIndex(e => e.AneEncounterId)
                    .HasName("local_ane_encounter_ane_encounter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_ane_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_ane_encounter__sequenceid_idx");

                entity.Property(e => e.Actualdeparturenow).HasColumnName("actualdeparturenow");

                entity.Property(e => e.Allergyinformation)
                    .HasColumnName("allergyinformation")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ambulancereference)
                    .HasColumnName("ambulancereference")
                    .HasMaxLength(255);

                entity.Property(e => e.AneEncounterId)
                    .HasColumnName("ane_encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Anestatus)
                    .HasColumnName("anestatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Arrivaltime).HasColumnName("arrivaltime");

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.Departuredatetime).HasColumnName("departuredatetime");

                entity.Property(e => e.Disposal)
                    .HasColumnName("disposal")
                    .HasMaxLength(255);

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Editbreachoveride).HasColumnName("editbreachoveride");

                entity.Property(e => e.Effectivedischargedatetime)
                    .HasColumnName("effectivedischargedatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Latestlabresults)
                    .HasColumnName("latestlabresults")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Presentingcomplaint)
                    .HasColumnName("presentingcomplaint")
                    .HasMaxLength(255);

                entity.Property(e => e.Ratorsee)
                    .HasColumnName("ratorsee")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforbreach)
                    .HasColumnName("reasonforbreach")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialtytime).HasColumnName("referredtospecialtytime");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatmentcompletedatetime).HasColumnName("treatmentcompletedatetime");

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triagecategory)
                    .HasColumnName("triagecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Triaged).HasColumnName("triaged");

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");

                entity.Property(e => e.Xray)
                    .HasColumnName("xray")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalAneEncounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_encounter", "entitystore");

                entity.HasIndex(e => e.AneEncounterId)
                    .HasName("local_ane_encounter_ane_encounter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_ane_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_ane_encounter__sequenceid_idx");

                entity.Property(e => e.Actualdeparturenow).HasColumnName("actualdeparturenow");

                entity.Property(e => e.Allergyinformation)
                    .HasColumnName("allergyinformation")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ambulancereference)
                    .HasColumnName("ambulancereference")
                    .HasMaxLength(255);

                entity.Property(e => e.AneEncounterId)
                    .HasColumnName("ane_encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Anestatus)
                    .HasColumnName("anestatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Arrivaltime).HasColumnName("arrivaltime");

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.Departuredatetime).HasColumnName("departuredatetime");

                entity.Property(e => e.Disposal)
                    .HasColumnName("disposal")
                    .HasMaxLength(255);

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Editbreachoveride).HasColumnName("editbreachoveride");

                entity.Property(e => e.Effectivedischargedatetime)
                    .HasColumnName("effectivedischargedatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Latestlabresults)
                    .HasColumnName("latestlabresults")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Presentingcomplaint)
                    .HasColumnName("presentingcomplaint")
                    .HasMaxLength(255);

                entity.Property(e => e.Ratorsee)
                    .HasColumnName("ratorsee")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforbreach)
                    .HasColumnName("reasonforbreach")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialtytime).HasColumnName("referredtospecialtytime");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatmentcompletedatetime).HasColumnName("treatmentcompletedatetime");

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triagecategory)
                    .HasColumnName("triagecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Triaged).HasColumnName("triaged");

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");

                entity.Property(e => e.Xray)
                    .HasColumnName("xray")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAdmintask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_admintask", "entitystorematerialised");

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofTreatmentId)
                    .HasColumnName("cof_treatment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskactionedby)
                    .HasColumnName("taskactionedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskactioneddate).HasColumnName("taskactioneddate");

                entity.Property(e => e.Taskcomments).HasColumnName("taskcomments");

                entity.Property(e => e.Taskcreateddate).HasColumnName("taskcreateddate");

                entity.Property(e => e.Taskcreateduser)
                    .HasColumnName("taskcreateduser")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskdescription)
                    .HasColumnName("taskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskisactioned).HasColumnName("taskisactioned");

                entity.Property(e => e.Taskkey)
                    .HasColumnName("taskkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofAdmintask1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_admintask", "entitystore");

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofTreatmentId)
                    .HasColumnName("cof_treatment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Taskactionedby)
                    .HasColumnName("taskactionedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskactioneddate).HasColumnName("taskactioneddate");

                entity.Property(e => e.Taskcomments).HasColumnName("taskcomments");

                entity.Property(e => e.Taskcreateddate).HasColumnName("taskcreateddate");

                entity.Property(e => e.Taskcreateduser)
                    .HasColumnName("taskcreateduser")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskdescription)
                    .HasColumnName("taskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskisactioned).HasColumnName("taskisactioned");

                entity.Property(e => e.Taskkey)
                    .HasColumnName("taskkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofAdmintaskhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_admintaskhistory", "entitystore");

                entity.Property(e => e.Actiondate).HasColumnName("actiondate");

                entity.Property(e => e.Actionuser)
                    .HasColumnName("actionuser")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskhistoryId)
                    .HasColumnName("cof_admintaskhistory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Taskcomments)
                    .HasColumnName("taskcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskisactioned).HasColumnName("taskisactioned");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAdmintaskhistory1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_admintaskhistory", "entitystorematerialised");

                entity.Property(e => e.Actiondate).HasColumnName("actiondate");

                entity.Property(e => e.Actionuser)
                    .HasColumnName("actionuser")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskhistoryId)
                    .HasColumnName("cof_admintaskhistory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskcomments)
                    .HasColumnName("taskcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskisactioned).HasColumnName("taskisactioned");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAppointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_appointment", "entitystorematerialised");

                entity.Property(e => e.Appointmentcomments)
                    .HasColumnName("appointmentcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAppointmentId)
                    .HasColumnName("cof_appointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentschedule)
                    .HasColumnName("nextappointmentschedule")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofAppointment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_appointment", "entitystore");

                entity.Property(e => e.Appointmentcomments)
                    .HasColumnName("appointmentcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAppointmentId)
                    .HasColumnName("cof_appointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentschedule)
                    .HasColumnName("nextappointmentschedule")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofAttendancestatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_attendancestatus", "entitystore");

                entity.Property(e => e.CofAttendancestatusId)
                    .HasColumnName("cof_attendancestatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupattendanceoutcomeId)
                    .HasColumnName("cof_lookupattendanceoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isselected).HasColumnName("isselected");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAttendancestatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_attendancestatus", "entitystorematerialised");

                entity.Property(e => e.CofAttendancestatusId)
                    .HasColumnName("cof_attendancestatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupattendanceoutcomeId)
                    .HasColumnName("cof_lookupattendanceoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isselected).HasColumnName("isselected");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofHl7messaging>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_hl7messaging", "entitystore");

                entity.Property(e => e.CofHl7messagingId)
                    .HasColumnName("cof_hl7messaging_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hl7message).HasColumnName("hl7message");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofHl7messaging1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_hl7messaging", "entitystorematerialised");

                entity.Property(e => e.CofHl7messagingId)
                    .HasColumnName("cof_hl7messaging_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hl7message).HasColumnName("hl7message");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentassignedto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentassignedto", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentassignedtoId)
                    .HasColumnName("cof_lookupappointmentassignedto_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupappointmentassignedto1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentassignedto", "entitystore");

                entity.Property(e => e.CofLookupappointmentassignedtoId)
                    .HasColumnName("cof_lookupappointmentassignedto_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupappointmentattendstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentattendstatus", "entitystore");

                entity.Property(e => e.CofLookupappointmentattendstatusId)
                    .HasColumnName("cof_lookupappointmentattendstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isattended).HasColumnName("isattended");

                entity.Property(e => e.Iscancelled).HasColumnName("iscancelled");

                entity.Property(e => e.Isdna).HasColumnName("isdna");

                entity.Property(e => e.Isunattended).HasColumnName("isunattended");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentattendstatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentattendstatus", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentattendstatusId)
                    .HasColumnName("cof_lookupappointmentattendstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isattended).HasColumnName("isattended");

                entity.Property(e => e.Iscancelled).HasColumnName("iscancelled");

                entity.Property(e => e.Isdna).HasColumnName("isdna");

                entity.Property(e => e.Isunattended).HasColumnName("isunattended");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupappointmentpriority>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentpriority", "entitystore");

                entity.Property(e => e.CofLookupappointmentpriorityId)
                    .HasColumnName("cof_lookupappointmentpriority_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Is2ww).HasColumnName("is2ww");

                entity.Property(e => e.Isrout).HasColumnName("isrout");

                entity.Property(e => e.Isurg).HasColumnName("isurg");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentpriority1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentpriority", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentpriorityId)
                    .HasColumnName("cof_lookupappointmentpriority_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Is2ww).HasColumnName("is2ww");

                entity.Property(e => e.Isrout).HasColumnName("isrout");

                entity.Property(e => e.Isurg).HasColumnName("isurg");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentreason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentreason", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentreasonId)
                    .HasColumnName("cof_lookupappointmentreason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdnadtg).HasColumnName("isdnadtg");

                entity.Property(e => e.Isdnafirapp).HasColumnName("isdnafirapp");

                entity.Property(e => e.Isdnafuam).HasColumnName("isdnafuam");

                entity.Property(e => e.Isdnafuwt).HasColumnName("isdnafuwt");

                entity.Property(e => e.Isfureq).HasColumnName("isfureq");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nonrttattended).HasColumnName("nonrttattended");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttattended).HasColumnName("rttattended");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupappointmentreason1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentreason", "entitystore");

                entity.Property(e => e.CofLookupappointmentreasonId)
                    .HasColumnName("cof_lookupappointmentreason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdnadtg).HasColumnName("isdnadtg");

                entity.Property(e => e.Isdnafirapp).HasColumnName("isdnafirapp");

                entity.Property(e => e.Isdnafuam).HasColumnName("isdnafuam");

                entity.Property(e => e.Isdnafuwt).HasColumnName("isdnafuwt");

                entity.Property(e => e.Isfureq).HasColumnName("isfureq");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nonrttattended).HasColumnName("nonrttattended");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Rttattended).HasColumnName("rttattended");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentschedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentschedule", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentscheduleId)
                    .HasColumnName("cof_lookupappointmentschedule_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupappointmentschedule1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentschedule", "entitystore");

                entity.Property(e => e.CofLookupappointmentscheduleId)
                    .HasColumnName("cof_lookupappointmentschedule_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmenttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmenttype", "entitystorematerialised");

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupappointmenttypeId)
                    .HasColumnName("cof_lookupappointmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupappointmenttype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmenttype", "entitystore");

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupappointmenttypeId)
                    .HasColumnName("cof_lookupappointmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupattendanceoutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupattendanceoutcome", "entitystore");

                entity.Property(e => e.CofLookupattendanceoutcomeId)
                    .HasColumnName("cof_lookupattendanceoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Discdisable).HasColumnName("discdisable");

                entity.Property(e => e.Isaddnow).HasColumnName("isaddnow");

                entity.Property(e => e.Isaddwl).HasColumnName("isaddwl");

                entity.Property(e => e.Isattout).HasColumnName("isattout");

                entity.Property(e => e.Isdiagreq).HasColumnName("isdiagreq");

                entity.Property(e => e.Isdiscpat).HasColumnName("isdiscpat");

                entity.Property(e => e.Isdnaout).HasColumnName("isdnaout");

                entity.Property(e => e.Isfuopreq).HasColumnName("isfuopreq");

                entity.Property(e => e.Isrefpat).HasColumnName("isrefpat");

                entity.Property(e => e.Isreschapp).HasColumnName("isreschapp");

                entity.Property(e => e.Istrepro).HasColumnName("istrepro");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupattendanceoutcome1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupattendanceoutcome", "entitystorematerialised");

                entity.Property(e => e.CofLookupattendanceoutcomeId)
                    .HasColumnName("cof_lookupattendanceoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Discdisable).HasColumnName("discdisable");

                entity.Property(e => e.Isaddnow).HasColumnName("isaddnow");

                entity.Property(e => e.Isaddwl).HasColumnName("isaddwl");

                entity.Property(e => e.Isattout).HasColumnName("isattout");

                entity.Property(e => e.Isdiagreq).HasColumnName("isdiagreq");

                entity.Property(e => e.Isdiscpat).HasColumnName("isdiscpat");

                entity.Property(e => e.Isdnaout).HasColumnName("isdnaout");

                entity.Property(e => e.Isfuopreq).HasColumnName("isfuopreq");

                entity.Property(e => e.Isrefpat).HasColumnName("isrefpat");

                entity.Property(e => e.Isreschapp).HasColumnName("isreschapp");

                entity.Property(e => e.Istrepro).HasColumnName("istrepro");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupclinicoutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupclinicoutcome", "entitystore");

                entity.Property(e => e.CofLookupclinicoutcomeId)
                    .HasColumnName("cof_lookupclinicoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Idpk)
                    .HasColumnName("idpk")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactivertt).HasColumnName("isactivertt");

                entity.Property(e => e.Isadmittod).HasColumnName("isadmittod");

                entity.Property(e => e.Isclinoutdischarge).HasColumnName("isclinoutdischarge");

                entity.Property(e => e.Isdecisiontotreat).HasColumnName("isdecisiontotreat");

                entity.Property(e => e.Isdectre).HasColumnName("isdectre");

                entity.Property(e => e.Isfirstdeft).HasColumnName("isfirstdeft");

                entity.Property(e => e.Isfollup).HasColumnName("isfollup");

                entity.Property(e => e.Isnotactivertt).HasColumnName("isnotactivertt");

                entity.Property(e => e.Ispatmon).HasColumnName("ispatmon");

                entity.Property(e => e.Ispattreat).HasColumnName("ispattreat");

                entity.Property(e => e.Isrefext).HasColumnName("isrefext");

                entity.Property(e => e.Isrefint).HasColumnName("isrefint");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Notrereq).HasColumnName("notrereq");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupclinicoutcome1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupclinicoutcome", "entitystorematerialised");

                entity.Property(e => e.CofLookupclinicoutcomeId)
                    .HasColumnName("cof_lookupclinicoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Idpk)
                    .HasColumnName("idpk")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactivertt).HasColumnName("isactivertt");

                entity.Property(e => e.Isadmittod).HasColumnName("isadmittod");

                entity.Property(e => e.Isclinoutdischarge).HasColumnName("isclinoutdischarge");

                entity.Property(e => e.Isdecisiontotreat).HasColumnName("isdecisiontotreat");

                entity.Property(e => e.Isdectre).HasColumnName("isdectre");

                entity.Property(e => e.Isfirstdeft).HasColumnName("isfirstdeft");

                entity.Property(e => e.Isfollup).HasColumnName("isfollup");

                entity.Property(e => e.Isnotactivertt).HasColumnName("isnotactivertt");

                entity.Property(e => e.Ispatmon).HasColumnName("ispatmon");

                entity.Property(e => e.Ispattreat).HasColumnName("ispattreat");

                entity.Property(e => e.Isrefext).HasColumnName("isrefext");

                entity.Property(e => e.Isrefint).HasColumnName("isrefint");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Notrereq).HasColumnName("notrereq");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupdecisiontotreatreason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupdecisiontotreatreason", "entitystore");

                entity.Property(e => e.CofLookupdecisiontotreatreasonId)
                    .HasColumnName("cof_lookupdecisiontotreatreason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isadddcip).HasColumnName("isadddcip");

                entity.Property(e => e.Isdttreason).HasColumnName("isdttreason");

                entity.Property(e => e.Istciagreed).HasColumnName("istciagreed");

                entity.Property(e => e.Istreatfop).HasColumnName("istreatfop");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupdecisiontotreatreason1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupdecisiontotreatreason", "entitystorematerialised");

                entity.Property(e => e.CofLookupdecisiontotreatreasonId)
                    .HasColumnName("cof_lookupdecisiontotreatreason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isadddcip).HasColumnName("isadddcip");

                entity.Property(e => e.Isdttreason).HasColumnName("isdttreason");

                entity.Property(e => e.Istciagreed).HasColumnName("istciagreed");

                entity.Property(e => e.Istreatfop).HasColumnName("istreatfop");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupdischargereason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupdischargereason", "entitystore");

                entity.Property(e => e.CofLookupdischargereasonId)
                    .HasColumnName("cof_lookupdischargereason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactiveattendreason).HasColumnName("isactiveattendreason");

                entity.Property(e => e.Iscdnotre).HasColumnName("iscdnotre");

                entity.Property(e => e.Isdnafirst).HasColumnName("isdnafirst");

                entity.Property(e => e.Isdnafu).HasColumnName("isdnafu");

                entity.Property(e => e.Isnonactiveattendreason).HasColumnName("isnonactiveattendreason");

                entity.Property(e => e.Isnotdnare).HasColumnName("isnotdnare");

                entity.Property(e => e.Isreftru).HasColumnName("isreftru");

                entity.Property(e => e.Issendift).HasColumnName("issendift");

                entity.Property(e => e.Istreatgiven).HasColumnName("istreatgiven");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupdischargereason1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupdischargereason", "entitystorematerialised");

                entity.Property(e => e.CofLookupdischargereasonId)
                    .HasColumnName("cof_lookupdischargereason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactiveattendreason).HasColumnName("isactiveattendreason");

                entity.Property(e => e.Iscdnotre).HasColumnName("iscdnotre");

                entity.Property(e => e.Isdnafirst).HasColumnName("isdnafirst");

                entity.Property(e => e.Isdnafu).HasColumnName("isdnafu");

                entity.Property(e => e.Isnonactiveattendreason).HasColumnName("isnonactiveattendreason");

                entity.Property(e => e.Isnotdnare).HasColumnName("isnotdnare");

                entity.Property(e => e.Isreftru).HasColumnName("isreftru");

                entity.Property(e => e.Issendift).HasColumnName("issendift");

                entity.Property(e => e.Istreatgiven).HasColumnName("istreatgiven");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupgeneral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupgeneral", "entitystorematerialised");

                entity.Property(e => e.CofLookupgeneralId)
                    .HasColumnName("cof_lookupgeneral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isno).HasColumnName("isno");

                entity.Property(e => e.Isoff).HasColumnName("isoff");

                entity.Property(e => e.Ison).HasColumnName("ison");

                entity.Property(e => e.Isyes).HasColumnName("isyes");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupgeneral1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupgeneral", "entitystore");

                entity.Property(e => e.CofLookupgeneralId)
                    .HasColumnName("cof_lookupgeneral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isno).HasColumnName("isno");

                entity.Property(e => e.Isoff).HasColumnName("isoff");

                entity.Property(e => e.Ison).HasColumnName("ison");

                entity.Property(e => e.Isyes).HasColumnName("isyes");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupinactivertt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupinactivertt", "entitystore");

                entity.Property(e => e.CofLookupinactiverttId)
                    .HasColumnName("cof_lookupinactivertt_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Ispatmon).HasColumnName("ispatmon");

                entity.Property(e => e.Ispattreat).HasColumnName("ispattreat");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupinactivertt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupinactivertt", "entitystorematerialised");

                entity.Property(e => e.CofLookupinactiverttId)
                    .HasColumnName("cof_lookupinactivertt_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Ispatmon).HasColumnName("ispatmon");

                entity.Property(e => e.Ispattreat).HasColumnName("ispattreat");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookuplaterality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuplaterality", "entitystore");

                entity.Property(e => e.CofLookuplateralityId)
                    .HasColumnName("cof_lookuplaterality_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookuplaterality1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuplaterality", "entitystorematerialised");

                entity.Property(e => e.CofLookuplateralityId)
                    .HasColumnName("cof_lookuplaterality_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupnextappointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupnextappointment", "entitystorematerialised");

                entity.Property(e => e.CofLookupnextappointmentId)
                    .HasColumnName("cof_lookupnextappointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isnextavail).HasColumnName("isnextavail");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupnextappointment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupnextappointment", "entitystore");

                entity.Property(e => e.CofLookupnextappointmentId)
                    .HasColumnName("cof_lookupnextappointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isnextavail).HasColumnName("isnextavail");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupprocedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupprocedure", "entitystore");

                entity.Property(e => e.CofLookupprocedureId)
                    .HasColumnName("cof_lookupprocedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isother).HasColumnName("isother");

                entity.Property(e => e.Isplaster).HasColumnName("isplaster");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupprocedure1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupprocedure", "entitystorematerialised");

                entity.Property(e => e.CofLookupprocedureId)
                    .HasColumnName("cof_lookupprocedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isother).HasColumnName("isother");

                entity.Property(e => e.Isplaster).HasColumnName("isplaster");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupriskdescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupriskdescription", "entitystore");

                entity.Property(e => e.Accesslevel)
                    .HasColumnName("accesslevel")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupriskdescriptionId)
                    .HasColumnName("cof_lookupriskdescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Notifiable)
                    .HasColumnName("notifiable")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Riskdescription)
                    .HasColumnName("riskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskgroup)
                    .HasColumnName("riskgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskidentifier)
                    .HasColumnName("riskidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Risksymbol)
                    .HasColumnName("risksymbol")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Startdate).HasColumnName("startdate");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupriskdescription1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupriskdescription", "entitystorematerialised");

                entity.Property(e => e.Accesslevel)
                    .HasColumnName("accesslevel")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupriskdescriptionId)
                    .HasColumnName("cof_lookupriskdescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Notifiable)
                    .HasColumnName("notifiable")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskdescription)
                    .HasColumnName("riskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskgroup)
                    .HasColumnName("riskgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskidentifier)
                    .HasColumnName("riskidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Risksymbol)
                    .HasColumnName("risksymbol")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdate).HasColumnName("startdate");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupriskflag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupriskflag", "entitystore");

                entity.Property(e => e.Ageless18).HasColumnName("ageless18");

                entity.Property(e => e.CofLookupriskflagId)
                    .HasColumnName("cof_lookupriskflag_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Riskid)
                    .HasColumnName("riskid")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warning)
                    .HasColumnName("warning")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupriskflag1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupriskflag", "entitystorematerialised");

                entity.Property(e => e.Ageless18).HasColumnName("ageless18");

                entity.Property(e => e.CofLookupriskflagId)
                    .HasColumnName("cof_lookupriskflag_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskid)
                    .HasColumnName("riskid")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warning)
                    .HasColumnName("warning")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalCofLookuprttpathwaytype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuprttpathwaytype", "entitystore");

                entity.Property(e => e.CofLookuprttpathwaytypeId)
                    .HasColumnName("cof_lookuprttpathwaytype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isrttpath).HasColumnName("isrttpath");

                entity.Property(e => e.Notrttpath).HasColumnName("notrttpath");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookuprttpathwaytype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuprttpathwaytype", "entitystorematerialised");

                entity.Property(e => e.CofLookuprttpathwaytypeId)
                    .HasColumnName("cof_lookuprttpathwaytype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isrttpath).HasColumnName("isrttpath");

                entity.Property(e => e.Notrttpath).HasColumnName("notrttpath");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupscheduleperriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupscheduleperriod", "entitystore");

                entity.Property(e => e.CofLookupscheduleperriodId)
                    .HasColumnName("cof_lookupscheduleperriod_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupscheduleperriod1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupscheduleperriod", "entitystorematerialised");

                entity.Property(e => e.CofLookupscheduleperriodId)
                    .HasColumnName("cof_lookupscheduleperriod_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupsite>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupsite", "entitystore");

                entity.Property(e => e.CofLookupsiteId)
                    .HasColumnName("cof_lookupsite_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isother).HasColumnName("isother");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupsite1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupsite", "entitystorematerialised");

                entity.Property(e => e.CofLookupsiteId)
                    .HasColumnName("cof_lookupsite_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isother).HasColumnName("isother");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookupspecialty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupspecialty", "entitystore");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupspecialtyId)
                    .HasColumnName("cof_lookupspecialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupspecialty1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupspecialty", "entitystorematerialised");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupspecialtyId)
                    .HasColumnName("cof_lookupspecialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookuptaskattendancemapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuptaskattendancemapping", "entitystorematerialised");

                entity.Property(e => e.CofLookuptaskattendancemappingId)
                    .HasColumnName("cof_lookuptaskattendancemapping_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isaddwl).HasColumnName("isaddwl");

                entity.Property(e => e.Isadnow).HasColumnName("isadnow");

                entity.Property(e => e.Isdiscpat).HasColumnName("isdiscpat");

                entity.Property(e => e.Isfuopreq).HasColumnName("isfuopreq");

                entity.Property(e => e.Isreschapp).HasColumnName("isreschapp");

                entity.Property(e => e.Istrepro).HasColumnName("istrepro");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofLookuptaskattendancemapping1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuptaskattendancemapping", "entitystore");

                entity.Property(e => e.CofLookuptaskattendancemappingId)
                    .HasColumnName("cof_lookuptaskattendancemapping_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isaddwl).HasColumnName("isaddwl");

                entity.Property(e => e.Isadnow).HasColumnName("isadnow");

                entity.Property(e => e.Isdiscpat).HasColumnName("isdiscpat");

                entity.Property(e => e.Isfuopreq).HasColumnName("isfuopreq");

                entity.Property(e => e.Isreschapp).HasColumnName("isreschapp");

                entity.Property(e => e.Istrepro).HasColumnName("istrepro");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofPersonrisk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_personrisk", "entitystore");

                entity.Property(e => e.CofPersonriskId)
                    .HasColumnName("cof_personrisk_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Formattedenddate)
                    .HasColumnName("formattedenddate")
                    .HasMaxLength(255);

                entity.Property(e => e.Formattedstartdate)
                    .HasColumnName("formattedstartdate")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Riskcode)
                    .HasColumnName("riskcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskdescription)
                    .HasColumnName("riskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("date");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofPersonrisk1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_personrisk", "entitystorematerialised");

                entity.Property(e => e.CofPersonriskId)
                    .HasColumnName("cof_personrisk_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Formattedenddate)
                    .HasColumnName("formattedenddate")
                    .HasMaxLength(255);

                entity.Property(e => e.Formattedstartdate)
                    .HasColumnName("formattedstartdate")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskcode)
                    .HasColumnName("riskcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskdescription)
                    .HasColumnName("riskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("date");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_record", "entitystore");

                entity.HasIndex(e => e.CofRecordId)
                    .HasName("local_cof_record_cof_record_id_idx");

                entity.HasIndex(e => e.EncounterId)
                    .HasName("local_cof_record_encounter_id_idx");

                entity.HasIndex(e => e.PersonId)
                    .HasName("local_cof_record_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_cof_record__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_cof_record__sequenceid_idx");

                entity.Property(e => e.Appointmentcomments).HasColumnName("appointmentcomments");

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendanceoutcomeaddtowl).HasColumnName("attendanceoutcomeaddtowl");

                entity.Property(e => e.Attendanceoutcomeadmitnow).HasColumnName("attendanceoutcomeadmitnow");

                entity.Property(e => e.Attendanceoutcomecomments).HasColumnName("attendanceoutcomecomments");

                entity.Property(e => e.Attendanceoutcomediagnostics).HasColumnName("attendanceoutcomediagnostics");

                entity.Property(e => e.Attendanceoutcomedischargepatient).HasColumnName("attendanceoutcomedischargepatient");

                entity.Property(e => e.Attendanceoutcomefollowup).HasColumnName("attendanceoutcomefollowup");

                entity.Property(e => e.Attendanceoutcomerefer).HasColumnName("attendanceoutcomerefer");

                entity.Property(e => e.Attendanceoutcomereschedule).HasColumnName("attendanceoutcomereschedule");

                entity.Property(e => e.Attendanceoutcometreatmentgiven).HasColumnName("attendanceoutcometreatmentgiven");

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcomecomments).HasColumnName("clinicoutcomecomments");

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofrecordlastupdatedby)
                    .HasColumnName("cofrecordlastupdatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Decisiontotreatreason)
                    .HasColumnName("decisiontotreatreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargereason)
                    .HasColumnName("dischargereason")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargereasoncomments).HasColumnName("dischargereasoncomments");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Incorrectrtt).HasColumnName("incorrectrtt");

                entity.Property(e => e.Incorrectrttreason).HasColumnName("incorrectrttreason");

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Manualattend).HasColumnName("manualattend");

                entity.Property(e => e.Manualdna).HasColumnName("manualdna");

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Riskflagcontinue).HasColumnName("riskflagcontinue");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleappointmentin)
                    .HasColumnName("scheduleappointmentin")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Supporteddischarge)
                    .HasColumnName("supporteddischarge")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcitaskcreated).HasColumnName("tcitaskcreated");

                entity.Property(e => e.Tcitaskcreateddate).HasColumnName("tcitaskcreateddate");

                entity.Property(e => e.Tcitasktype)
                    .HasColumnName("tcitasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weeksmonths)
                    .HasColumnName("weeksmonths")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofRecord1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_record", "entitystorematerialised");

                entity.Property(e => e.Appointmentcomments).HasColumnName("appointmentcomments");

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendanceoutcomeaddtowl).HasColumnName("attendanceoutcomeaddtowl");

                entity.Property(e => e.Attendanceoutcomeadmitnow).HasColumnName("attendanceoutcomeadmitnow");

                entity.Property(e => e.Attendanceoutcomecomments).HasColumnName("attendanceoutcomecomments");

                entity.Property(e => e.Attendanceoutcomediagnostics).HasColumnName("attendanceoutcomediagnostics");

                entity.Property(e => e.Attendanceoutcomedischargepatient).HasColumnName("attendanceoutcomedischargepatient");

                entity.Property(e => e.Attendanceoutcomefollowup).HasColumnName("attendanceoutcomefollowup");

                entity.Property(e => e.Attendanceoutcomerefer).HasColumnName("attendanceoutcomerefer");

                entity.Property(e => e.Attendanceoutcomereschedule).HasColumnName("attendanceoutcomereschedule");

                entity.Property(e => e.Attendanceoutcometreatmentgiven).HasColumnName("attendanceoutcometreatmentgiven");

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcomecomments).HasColumnName("clinicoutcomecomments");

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofrecordlastupdatedby)
                    .HasColumnName("cofrecordlastupdatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Decisiontotreatreason)
                    .HasColumnName("decisiontotreatreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargereason)
                    .HasColumnName("dischargereason")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargereasoncomments).HasColumnName("dischargereasoncomments");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Incorrectrtt).HasColumnName("incorrectrtt");

                entity.Property(e => e.Incorrectrttreason).HasColumnName("incorrectrttreason");

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Manualattend).HasColumnName("manualattend");

                entity.Property(e => e.Manualdna).HasColumnName("manualdna");

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskflagcontinue).HasColumnName("riskflagcontinue");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleappointmentin)
                    .HasColumnName("scheduleappointmentin")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Supporteddischarge)
                    .HasColumnName("supporteddischarge")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcitaskcreated).HasColumnName("tcitaskcreated");

                entity.Property(e => e.Tcitaskcreateddate).HasColumnName("tcitaskcreateddate");

                entity.Property(e => e.Tcitasktype)
                    .HasColumnName("tcitasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weeksmonths)
                    .HasColumnName("weeksmonths")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofRttextract>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_rttextract", "entitystorematerialised");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentstatus)
                    .HasColumnName("appointmentstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Extractdatetime).HasColumnName("extractdatetime");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttdescription)
                    .HasColumnName("rttdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofRttextract1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_rttextract", "entitystore");

                entity.HasIndex(e => e.Appointmentdate)
                    .HasName("local_cof_rttextract_appointmentdate_idx");

                entity.HasIndex(e => e.Cliniccode)
                    .HasName("local_cof_rttextract_cliniccode_idx");

                entity.HasIndex(e => e.CofRttextractId)
                    .HasName("local_cof_rttextract_cof_rttextract_id_idx");

                entity.HasIndex(e => e.EncounterId)
                    .HasName("local_cof_rttextract_encounter_id_idx");

                entity.HasIndex(e => e.Leadconsultantcode)
                    .HasName("local_cof_rttextract_leadconsultantcode_idx");

                entity.HasIndex(e => e.PersonId)
                    .HasName("local_cof_rttextract_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_cof_rttextract__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_cof_rttextract__sequenceid_idx");

                entity.HasIndex(e => e.Specialtycode)
                    .HasName("local_cof_rttextract_specialtycode_idx");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentstatus)
                    .HasColumnName("appointmentstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Extractdatetime).HasColumnName("extractdatetime");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttdescription)
                    .HasColumnName("rttdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofSubtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_subtype", "entitystore");

                entity.Property(e => e.CofSubtypeId)
                    .HasColumnName("cof_subtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Subtypename)
                    .HasColumnName("subtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktypename)
                    .HasColumnName("tasktypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofSubtype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_subtype", "entitystorematerialised");

                entity.Property(e => e.CofSubtypeId)
                    .HasColumnName("cof_subtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Subtypename)
                    .HasColumnName("subtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktypename)
                    .HasColumnName("tasktypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofSystemattributes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_systemattributes", "entitystorematerialised");

                entity.Property(e => e.Attributename)
                    .HasColumnName("attributename")
                    .HasMaxLength(255);

                entity.Property(e => e.Binaryvalue).HasColumnName("binaryvalue");

                entity.Property(e => e.CofSystemattributesId)
                    .HasColumnName("cof_systemattributes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Numericvalue)
                    .HasColumnName("numericvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofSystemattributes1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_systemattributes", "entitystore");

                entity.Property(e => e.Attributename)
                    .HasColumnName("attributename")
                    .HasMaxLength(255);

                entity.Property(e => e.Binaryvalue).HasColumnName("binaryvalue");

                entity.Property(e => e.CofSystemattributesId)
                    .HasColumnName("cof_systemattributes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Numericvalue)
                    .HasColumnName("numericvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalCofTreatment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_treatment", "entitystore");

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofTreatmentId)
                    .HasColumnName("cof_treatment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");

                entity.Property(e => e.Laterality)
                    .HasColumnName("laterality")
                    .HasMaxLength(255);

                entity.Property(e => e.Plaster)
                    .HasColumnName("plaster")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredescription)
                    .HasColumnName("proceduredescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredisplay)
                    .HasColumnName("proceduredisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedureother)
                    .HasColumnName("procedureother")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sitedescription)
                    .HasColumnName("sitedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Sitedisplay)
                    .HasColumnName("sitedisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Sitename)
                    .HasColumnName("sitename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatment)
                    .HasColumnName("treatment")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentcomments)
                    .HasColumnName("treatmentcomments")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofTreatment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_treatment", "entitystorematerialised");

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofTreatmentId)
                    .HasColumnName("cof_treatment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");

                entity.Property(e => e.Laterality)
                    .HasColumnName("laterality")
                    .HasMaxLength(255);

                entity.Property(e => e.Plaster)
                    .HasColumnName("plaster")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredescription)
                    .HasColumnName("proceduredescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredisplay)
                    .HasColumnName("proceduredisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedureother)
                    .HasColumnName("procedureother")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sitedescription)
                    .HasColumnName("sitedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Sitedisplay)
                    .HasColumnName("sitedisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Sitename)
                    .HasColumnName("sitename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatment)
                    .HasColumnName("treatment")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentcomments)
                    .HasColumnName("treatmentcomments")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalCofWaynetest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_waynetest", "entitystore");

                entity.Property(e => e.CofWaynetestId)
                    .HasColumnName("cof_waynetest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("citext");

                entity.Property(e => e.Edd).HasColumnName("edd");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofWaynetest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_waynetest", "entitystorematerialised");

                entity.Property(e => e.CofWaynetestId)
                    .HasColumnName("cof_waynetest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("citext");

                entity.Property(e => e.Edd).HasColumnName("edd");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemo1Exportentity1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity1111", "entitystore");

                entity.HasIndex(e => e.Demo1Exportentity1111Id)
                    .HasName("local_demo1_exportentity1111_demo1_exportentity1111_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity1111__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity1111__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Demo1Exportentity1111Id)
                    .HasColumnName("demo1_exportentity1111_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp10)
                    .HasColumnName("exp10")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity1111", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity1111Id)
                    .HasName("local_demo1_exportentity1111_demo1_exportentity1111_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity1111__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity1111__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity1111Id)
                    .HasColumnName("demo1_exportentity1111_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp10)
                    .HasColumnName("exp10")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity2222>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity2222", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity2222Id)
                    .HasName("local_demo1_exportentity2222_demo1_exportentity2222_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity2222__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity2222__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity2222Id)
                    .HasColumnName("demo1_exportentity2222_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2).HasColumnName("exp2");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9).HasColumnName("exp9");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemo1Exportentity22221>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity2222", "entitystore");

                entity.HasIndex(e => e.Demo1Exportentity2222Id)
                    .HasName("local_demo1_exportentity2222_demo1_exportentity2222_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity2222__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity2222__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Demo1Exportentity2222Id)
                    .HasColumnName("demo1_exportentity2222_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2).HasColumnName("exp2");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9).HasColumnName("exp9");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemo1Exportentity3333>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity3333", "entitystore");

                entity.HasIndex(e => e.Demo1Exportentity3333Id)
                    .HasName("local_demo1_exportentity3333_demo1_exportentity3333_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity3333__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity3333__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Demo1Exportentity3333Id)
                    .HasColumnName("demo1_exportentity3333_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity33331>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity3333", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity3333Id)
                    .HasName("local_demo1_exportentity3333_demo1_exportentity3333_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity3333__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity3333__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity3333Id)
                    .HasColumnName("demo1_exportentity3333_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemo1Exportentity4444>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity4444", "entitystore");

                entity.HasIndex(e => e.Demo1Exportentity4444Id)
                    .HasName("local_demo1_exportentity4444_demo1_exportentity4444_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity4444__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity4444__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Demo1Exportentity4444Id)
                    .HasColumnName("demo1_exportentity4444_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp222)
                    .HasColumnName("exp222")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4).HasColumnName("exp4");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity44441>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity4444", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity4444Id)
                    .HasName("local_demo1_exportentity4444_demo1_exportentity4444_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity4444__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity4444__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity4444Id)
                    .HasColumnName("demo1_exportentity4444_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp222)
                    .HasColumnName("exp222")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4).HasColumnName("exp4");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemo1Exportentity6666>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity6666", "entitystore");

                entity.HasIndex(e => e.Demo1Exportentity6666Id)
                    .HasName("local_demo1_exportentity6666_demo1_exportentity6666_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity6666__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity6666__sequenceid_idx");

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Demo1Exportentity6666Id)
                    .HasColumnName("demo1_exportentity6666_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity66661>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity6666", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity6666Id)
                    .HasName("local_demo1_exportentity6666_demo1_exportentity6666_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_exportentity6666__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_exportentity6666__sequenceid_idx");

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity6666Id)
                    .HasColumnName("demo1_exportentity6666_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemo1Newsampletoday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_newsampletoday", "entitystore");

                entity.HasIndex(e => e.Demo1NewsampletodayId)
                    .HasName("local_demo1_newsampletoday_demo1_newsampletoday_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_newsampletoday__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_newsampletoday__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Demo1NewsampletodayId)
                    .HasColumnName("demo1_newsampletoday_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Newsampletoday1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_newsampletoday", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1NewsampletodayId)
                    .HasName("local_demo1_newsampletoday_demo1_newsampletoday_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo1_newsampletoday__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo1_newsampletoday__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1NewsampletodayId)
                    .HasColumnName("demo1_newsampletoday_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_aa", "entitystore");

                entity.HasIndex(e => e.DemoAaId)
                    .HasName("local_demo_aa_demo_aa_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_aa__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_aa__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoAaId)
                    .HasColumnName("demo_aa_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoAa1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_aa", "entitystorematerialised");

                entity.HasIndex(e => e.DemoAaId)
                    .HasName("local_demo_aa_demo_aa_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_aa__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_aa__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoAaId)
                    .HasColumnName("demo_aa_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoBedboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bedboard", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoBedboardId)
                    .HasColumnName("demo_bedboard_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd).HasColumnName("edd");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ews).HasColumnName("ews");

                entity.Property(e => e.Hah).HasColumnName("hah");

                entity.Property(e => e.Knownas)
                    .HasColumnName("knownas")
                    .HasColumnType("citext");

                entity.Property(e => e.Nilbymouth).HasColumnName("nilbymouth");

                entity.Property(e => e.Nurseallocated)
                    .HasColumnName("nurseallocated")
                    .HasColumnType("citext");

                entity.Property(e => e.Nurseincharge)
                    .HasColumnName("nurseincharge")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Vtecompleted).HasColumnName("vtecompleted");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBedboard1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bedboard", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBedboardId)
                    .HasColumnName("demo_bedboard_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd).HasColumnName("edd");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ews).HasColumnName("ews");

                entity.Property(e => e.Hah).HasColumnName("hah");

                entity.Property(e => e.Knownas)
                    .HasColumnName("knownas")
                    .HasColumnType("citext");

                entity.Property(e => e.Nilbymouth).HasColumnName("nilbymouth");

                entity.Property(e => e.Nurseallocated)
                    .HasColumnName("nurseallocated")
                    .HasColumnType("citext");

                entity.Property(e => e.Nurseincharge)
                    .HasColumnName("nurseincharge")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Vtecompleted).HasColumnName("vtecompleted");
            });

            modelBuilder.Entity<entitystore_LocalDemoBi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bi", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoBiId)
                    .HasColumnName("demo_bi_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBi1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bi", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBiId)
                    .HasColumnName("demo_bi_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoBloodpressure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bloodpressure", "entitystore");

                entity.HasIndex(e => e.DemoBloodpressureId)
                    .HasName("local_demo_bloodpressure_demo_bloodpressure_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_bloodpressure__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_bloodpressure__sequenceid_idx");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(2000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoBloodpressureId)
                    .HasColumnName("demo_bloodpressure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Diastolicbp).HasColumnName("diastolicbp");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Systolicbp).HasColumnName("systolicbp");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBloodpressure1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bloodpressure", "entitystorematerialised");

                entity.HasIndex(e => e.DemoBloodpressureId)
                    .HasName("local_demo_bloodpressure_demo_bloodpressure_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_bloodpressure__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_bloodpressure__sequenceid_idx");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(2000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBloodpressureId)
                    .HasColumnName("demo_bloodpressure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Diastolicbp).HasColumnName("diastolicbp");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Systolicbp).HasColumnName("systolicbp");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoBmitest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bmitest", "entitystore");

                entity.Property(e => e.Bmiofperson)
                    .HasColumnName("bmiofperson")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoBmitestId)
                    .HasColumnName("demo_bmitest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weightofperson)
                    .HasColumnName("weightofperson")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBmitest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bmitest", "entitystorematerialised");

                entity.Property(e => e.Bmiofperson)
                    .HasColumnName("bmiofperson")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBmitestId)
                    .HasColumnName("demo_bmitest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weightofperson)
                    .HasColumnName("weightofperson")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<entitystore_LocalDemoIndiwardemo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_indiwardemo", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoIndiwardemoId)
                    .HasColumnName("demo_indiwardemo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoIndiwardemo1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_indiwardemo", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoIndiwardemoId)
                    .HasColumnName("demo_indiwardemo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoInfectiontimeline>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_infectiontimeline", "entitystore");

                entity.HasIndex(e => e.DemoInfectiontimelineId)
                    .HasName("local_demo_infectiontimeline_demo_infectiontimeline_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_infectiontimeline__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_infectiontimeline__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Datestamp)
                    .HasColumnName("datestamp")
                    .HasColumnType("date");

                entity.Property(e => e.DemoInfectiontimelineId)
                    .HasColumnName("demo_infectiontimeline_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Infectionstatus)
                    .HasColumnName("infectionstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Infectiontype)
                    .HasColumnName("infectiontype")
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoInfectiontimeline1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_infectiontimeline", "entitystorematerialised");

                entity.HasIndex(e => e.DemoInfectiontimelineId)
                    .HasName("local_demo_infectiontimeline_demo_infectiontimeline_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_infectiontimeline__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_infectiontimeline__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datestamp)
                    .HasColumnName("datestamp")
                    .HasColumnType("date");

                entity.Property(e => e.DemoInfectiontimelineId)
                    .HasColumnName("demo_infectiontimeline_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Infectionstatus)
                    .HasColumnName("infectionstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Infectiontype)
                    .HasColumnName("infectiontype")
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoRahul>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_rahul", "entitystore");

                entity.HasIndex(e => e.DemoRahulId)
                    .HasName("local_demo_rahul_demo_rahul_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_rahul__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_rahul__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoRahulId)
                    .HasColumnName("demo_rahul_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoRahul1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_rahul", "entitystorematerialised");

                entity.HasIndex(e => e.DemoRahulId)
                    .HasName("local_demo_rahul_demo_rahul_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_rahul__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_rahul__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoRahulId)
                    .HasColumnName("demo_rahul_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoRelationtest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_relationtest", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoRelationtestId)
                    .HasColumnName("demo_relationtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdDemoRelationtestId)
                    .HasColumnName("encounter_id_demo_relationtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoRelationtest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_relationtest", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoRelationtestId)
                    .HasColumnName("demo_relationtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdDemoRelationtestId)
                    .HasColumnName("encounter_id_demo_relationtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoRktestentity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_rktestentity", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoRktestentityId)
                    .HasColumnName("demo_rktestentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdContextkey)
                    .HasColumnName("encounter_id__contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdT1)
                    .HasColumnName("encounter_id_t1")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.T1)
                    .HasColumnName("t1")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoRktestentity1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_rktestentity", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoRktestentityId)
                    .HasColumnName("demo_rktestentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdContextkey)
                    .HasColumnName("encounter_id__contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdT1)
                    .HasColumnName("encounter_id_t1")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.T1)
                    .HasColumnName("t1")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoSachindemo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sachindemo", "entitystore");

                entity.HasIndex(e => e.DemoSachindemoId)
                    .HasName("local_demo_sachindemo_demo_sachindemo_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_sachindemo__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_sachindemo__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoSachindemoId)
                    .HasColumnName("demo_sachindemo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hotelname)
                    .HasColumnName("hotelname")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonIdHotelname)
                    .HasColumnName("person_id_hotelname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSachindemo1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sachindemo", "entitystorematerialised");

                entity.HasIndex(e => e.DemoSachindemoId)
                    .HasName("local_demo_sachindemo_demo_sachindemo_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_sachindemo__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_sachindemo__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSachindemoId)
                    .HasColumnName("demo_sachindemo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hotelname)
                    .HasColumnName("hotelname")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonIdHotelname)
                    .HasColumnName("person_id_hotelname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoSalford>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_salford", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoSalfordId)
                    .HasColumnName("demo_salford_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSalford1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_salford", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSalfordId)
                    .HasColumnName("demo_salford_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSample>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sample", "entitystorematerialised");

                entity.HasIndex(e => e.DemoSampleId)
                    .HasName("local_demo_sample_demo_sample_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_sample__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_sample__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleId)
                    .HasColumnName("demo_sample_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Newcolumn).HasColumnName("newcolumn");

                entity.Property(e => e.Newcolumn2).HasColumnName("newcolumn2");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSampleentity1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sampleentity1", "entitystorematerialised");

                entity.HasIndex(e => e.DemoSampleentity1Id)
                    .HasName("local_demo_sampleentity1_demo_sampleentity1_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_sampleentity1__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_sampleentity1__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoSampleentity11>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sampleentity1", "entitystore");

                entity.HasIndex(e => e.DemoSampleentity1Id)
                    .HasName("local_demo_sampleentity1_demo_sampleentity1_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_sampleentity1__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_sampleentity1__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalDemoTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_test", "entitystore");

                entity.HasIndex(e => e.DemoTestId)
                    .HasName("local_demo_test_demo_test_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_test__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_test__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.DemoTestId)
                    .HasColumnName("demo_test_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_test", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTestId)
                    .HasName("local_demo_test_demo_test_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_demo_test__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_demo_test__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTestId)
                    .HasColumnName("demo_test_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalEboardsEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_encounter", "entitystore");

                entity.Property(e => e.Aliasfirstname)
                    .HasColumnName("aliasfirstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Aliaslastname)
                    .HasColumnName("aliaslastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocateddate)
                    .HasColumnName("allocateddate")
                    .HasColumnType("date");

                entity.Property(e => e.Allocatedtime)
                    .HasColumnName("allocatedtime")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedwardcode)
                    .HasColumnName("allocatedwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EboardsEncounterId)
                    .HasColumnName("eboards_encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd)
                    .HasColumnName("edd")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeeninbed).HasColumnName("hasbeeninbed");

                entity.Property(e => e.Likestobeknownas)
                    .HasColumnName("likestobeknownas")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Returnbedcode)
                    .HasColumnName("returnbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returncode)
                    .HasColumnName("returncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returndate)
                    .HasColumnName("returndate")
                    .HasColumnType("date");

                entity.Property(e => e.Returntime)
                    .HasColumnName("returntime")
                    .HasMaxLength(255);

                entity.Property(e => e.Returnwardcode)
                    .HasColumnName("returnwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsEncounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_encounter", "entitystorematerialised");

                entity.Property(e => e.Aliasfirstname)
                    .HasColumnName("aliasfirstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Aliaslastname)
                    .HasColumnName("aliaslastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocateddate)
                    .HasColumnName("allocateddate")
                    .HasColumnType("date");

                entity.Property(e => e.Allocatedtime)
                    .HasColumnName("allocatedtime")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedwardcode)
                    .HasColumnName("allocatedwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsEncounterId)
                    .HasColumnName("eboards_encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd)
                    .HasColumnName("edd")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeeninbed).HasColumnName("hasbeeninbed");

                entity.Property(e => e.Likestobeknownas)
                    .HasColumnName("likestobeknownas")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Returnbedcode)
                    .HasColumnName("returnbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returncode)
                    .HasColumnName("returncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returndate)
                    .HasColumnName("returndate")
                    .HasColumnType("date");

                entity.Property(e => e.Returntime)
                    .HasColumnName("returntime")
                    .HasMaxLength(255);

                entity.Property(e => e.Returnwardcode)
                    .HasColumnName("returnwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalEboardsWardinformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_wardinformation", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EboardsWardinformationId)
                    .HasColumnName("eboards_wardinformation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardinformation).HasColumnName("wardinformation");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsWardinformation1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_wardinformation", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsWardinformationId)
                    .HasColumnName("eboards_wardinformation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardinformation).HasColumnName("wardinformation");
            });

            modelBuilder.Entity<entitystorematerialised_LocalLookupSpecialty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_lookup_specialty", "entitystorematerialised");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.LookupSpecialtyId)
                    .HasColumnName("lookup_specialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalLookupSpecialty1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_lookup_specialty", "entitystore");

                entity.HasIndex(e => e.LookupSpecialtyId)
                    .HasName("local_lookup_specialty_lookup_specialty_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_lookup_specialty__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_lookup_specialty__sequenceid_idx");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.LookupSpecialtyId)
                    .HasColumnName("lookup_specialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalRnohIntendedprocedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rnoh_intendedprocedure", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_rnoh_intendedprocedure__recordstatus_idx");

                entity.HasIndex(e => e.RnohIntendedprocedureId)
                    .HasName("local_rnoh_intendedprocedure_rnoh_intendedprocedure_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_rnoh_intendedprocedure__sequenceid_idx");

                entity.Property(e => e.Anaesthesiacode)
                    .HasColumnName("anaesthesiacode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecode)
                    .HasColumnName("procedurecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecodingsystem)
                    .HasColumnName("procedurecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredatetime).HasColumnName("proceduredatetime");

                entity.Property(e => e.Proceduredatetimets)
                    .HasColumnName("proceduredatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Proceduredescription)
                    .HasColumnName("proceduredescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Proceduretext)
                    .HasColumnName("proceduretext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RnohIntendedprocedureId)
                    .HasColumnName("rnoh_intendedprocedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalRnohIntendedprocedure1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rnoh_intendedprocedure", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_rnoh_intendedprocedure__recordstatus_idx");

                entity.HasIndex(e => e.RnohIntendedprocedureId)
                    .HasName("local_rnoh_intendedprocedure_rnoh_intendedprocedure_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_rnoh_intendedprocedure__sequenceid_idx");

                entity.Property(e => e.Anaesthesiacode)
                    .HasColumnName("anaesthesiacode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecode)
                    .HasColumnName("procedurecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecodingsystem)
                    .HasColumnName("procedurecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredatetime).HasColumnName("proceduredatetime");

                entity.Property(e => e.Proceduredatetimets)
                    .HasColumnName("proceduredatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Proceduredescription)
                    .HasColumnName("proceduredescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Proceduretext)
                    .HasColumnName("proceduretext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RnohIntendedprocedureId)
                    .HasColumnName("rnoh_intendedprocedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalRtsComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_comment", "entitystore");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.RtsCommentId)
                    .HasColumnName("rts_comment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsComment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_comment", "entitystorematerialised");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsCommentId)
                    .HasColumnName("rts_comment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalRtsDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_document", "entitystore");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Filepath)
                    .HasColumnName("filepath")
                    .HasMaxLength(1000);

                entity.Property(e => e.Filetype)
                    .HasColumnName("filetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.RtsDocumentId)
                    .HasColumnName("rts_document_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsDocument1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_document", "entitystorematerialised");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Filepath)
                    .HasColumnName("filepath")
                    .HasMaxLength(1000);

                entity.Property(e => e.Filetype)
                    .HasColumnName("filetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsDocumentId)
                    .HasColumnName("rts_document_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalRtsReferencedata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_referencedata", "entitystore");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedate).HasColumnName("effectivedate");

                entity.Property(e => e.Publisher)
                    .HasColumnName("publisher")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.RtsReferencedataId)
                    .HasColumnName("rts_referencedata_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuesetid)
                    .HasColumnName("valuesetid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsReferencedata1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_referencedata", "entitystorematerialised");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedate).HasColumnName("effectivedate");

                entity.Property(e => e.Publisher)
                    .HasColumnName("publisher")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferencedataId)
                    .HasColumnName("rts_referencedata_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuesetid)
                    .HasColumnName("valuesetid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalRtsReferral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_referral", "entitystore");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Assignedtoprovider)
                    .HasColumnName("assignedtoprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedtospeciality)
                    .HasColumnName("assignedtospeciality")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalinfofirstsubmitted).HasColumnName("clinicalinfofirstsubmitted");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Datebookingmade).HasColumnName("datebookingmade");

                entity.Property(e => e.Documentsdownloaded).HasColumnName("documentsdownloaded");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerteamtriage)
                    .HasColumnName("providerteamtriage")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringlocation)
                    .HasColumnName("referringlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovider)
                    .HasColumnName("referringprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdate).HasColumnName("statusdate");

                entity.Property(e => e.Statususer)
                    .HasColumnName("statususer")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsReferral1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_referral", "entitystorematerialised");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Assignedtoprovider)
                    .HasColumnName("assignedtoprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedtospeciality)
                    .HasColumnName("assignedtospeciality")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalinfofirstsubmitted).HasColumnName("clinicalinfofirstsubmitted");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datebookingmade).HasColumnName("datebookingmade");

                entity.Property(e => e.Documentsdownloaded).HasColumnName("documentsdownloaded");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerteamtriage)
                    .HasColumnName("providerteamtriage")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringlocation)
                    .HasColumnName("referringlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovider)
                    .HasColumnName("referringprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdate).HasColumnName("statusdate");

                entity.Property(e => e.Statususer)
                    .HasColumnName("statususer")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalSecambCad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_cad", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_secamb_cad__recordstatus_idx");

                entity.HasIndex(e => e.SecambCadId)
                    .HasName("local_secamb_cad_secamb_cad_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_secamb_cad__sequenceid_idx");

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalSecambCad1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_cad", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_secamb_cad__recordstatus_idx");

                entity.HasIndex(e => e.SecambCadId)
                    .HasName("local_secamb_cad_secamb_cad_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_secamb_cad__sequenceid_idx");

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalSecambEpcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_epcr", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_secamb_epcr__recordstatus_idx");

                entity.HasIndex(e => e.SecambEpcrId)
                    .HasName("local_secamb_epcr_secamb_epcr_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_secamb_epcr__sequenceid_idx");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");
            });

            modelBuilder.Entity<entitystorematerialised_LocalSecambEpcr1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_epcr", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_secamb_epcr__recordstatus_idx");

                entity.HasIndex(e => e.SecambEpcrId)
                    .HasName("local_secamb_epcr_secamb_epcr_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_secamb_epcr__sequenceid_idx");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");
            });

            modelBuilder.Entity<entitystore_LocalSecambEpcramended>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_epcramended", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_secamb_epcramended__recordstatus_idx");

                entity.HasIndex(e => e.SecambEpcramendedId)
                    .HasName("local_secamb_epcramended_secamb_epcramended_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_secamb_epcramended__sequenceid_idx");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcramendedId)
                    .HasColumnName("secamb_epcramended_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");
            });

            modelBuilder.Entity<entitystorematerialised_LocalSecambEpcramended1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_epcramended", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_secamb_epcramended__recordstatus_idx");

                entity.HasIndex(e => e.SecambEpcramendedId)
                    .HasName("local_secamb_epcramended_secamb_epcramended_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_secamb_epcramended__sequenceid_idx");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcramendedId)
                    .HasColumnName("secamb_epcramended_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusForm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_form", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Activefrom).HasColumnName("activefrom");

                entity.Property(e => e.Activeto).HasColumnName("activeto");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormId)
                    .HasColumnName("terminus_form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<entitystore_LocalTerminusForm1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_form", "entitystore");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Activefrom).HasColumnName("activefrom");

                entity.Property(e => e.Activeto).HasColumnName("activeto");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormId)
                    .HasColumnName("terminus_form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<entitystore_LocalTerminusFormfield>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_formfield", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Defaultvalue)
                    .HasColumnName("defaultvalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Htmlcontent).HasColumnName("htmlcontent");

                entity.Property(e => e.Jsoncontent).HasColumnName("jsoncontent");

                entity.Property(e => e.Mandatory).HasColumnName("mandatory");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormfieldId)
                    .HasColumnName("terminus_formfield_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormsectionId)
                    .HasColumnName("terminus_formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validationpattern)
                    .HasColumnName("validationpattern")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusFormfield1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_formfield", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Defaultvalue)
                    .HasColumnName("defaultvalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Htmlcontent).HasColumnName("htmlcontent");

                entity.Property(e => e.Jsoncontent).HasColumnName("jsoncontent");

                entity.Property(e => e.Mandatory).HasColumnName("mandatory");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormfieldId)
                    .HasColumnName("terminus_formfield_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormsectionId)
                    .HasColumnName("terminus_formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validationpattern)
                    .HasColumnName("validationpattern")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystore_LocalTerminusFormsection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_formsection", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormId)
                    .HasColumnName("terminus_form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormsectionId)
                    .HasColumnName("terminus_formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusFormsection1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_formsection", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormId)
                    .HasColumnName("terminus_form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormsectionId)
                    .HasColumnName("terminus_formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalTerminusMedicaltest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_medicaltest", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_terminus_medicaltest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_terminus_medicaltest__sequenceid_idx");

                entity.HasIndex(e => e.TerminusMedicaltestId)
                    .HasName("local_terminus_medicaltest_terminus_medicaltest_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusMedicaltestId)
                    .HasColumnName("terminus_medicaltest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusMedicaltest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_medicaltest", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_terminus_medicaltest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_terminus_medicaltest__sequenceid_idx");

                entity.HasIndex(e => e.TerminusMedicaltestId)
                    .HasName("local_terminus_medicaltest_terminus_medicaltest_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusMedicaltestId)
                    .HasColumnName("terminus_medicaltest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_LocalTerminusSpvlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_spvlog", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dateviewed).HasColumnName("dateviewed");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusSpvlogId)
                    .HasColumnName("terminus_spvlog_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusSpvlog1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_spvlog", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateviewed).HasColumnName("dateviewed");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusSpvlogId)
                    .HasColumnName("terminus_spvlog_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_LocalUszDemoperson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_usz_demoperson", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_usz_demoperson__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_usz_demoperson__sequenceid_idx");

                entity.HasIndex(e => e.UszDemopersonId)
                    .HasName("local_usz_demoperson_usz_demoperson_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.UszDemopersonId)
                    .HasColumnName("usz_demoperson_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalUszDemoperson1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_usz_demoperson", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("local_usz_demoperson__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("local_usz_demoperson__sequenceid_idx");

                entity.HasIndex(e => e.UszDemopersonId)
                    .HasName("local_usz_demoperson_usz_demoperson_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.UszDemopersonId)
                    .HasColumnName("usz_demoperson_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MasterAccountmerges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_accountmerges", "entitystore");

                entity.HasIndex(e => e.AccountmergesId)
                    .HasName("master_accountmerges_accountmerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_accountmerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_accountmerges__sequenceid_idx");

                entity.Property(e => e.AccountmergesId)
                    .HasColumnName("accountmerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Destaccountid)
                    .HasColumnName("destaccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Masteraccountid)
                    .HasColumnName("masteraccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sourceaccountid)
                    .HasColumnName("sourceaccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MasterAccountmerges1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_accountmerges", "entitystorematerialised");

                entity.HasIndex(e => e.AccountmergesId)
                    .HasName("master_accountmerges_accountmerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_accountmerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_accountmerges__sequenceid_idx");

                entity.Property(e => e.AccountmergesId)
                    .HasColumnName("accountmerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Destaccountid)
                    .HasColumnName("destaccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Masteraccountid)
                    .HasColumnName("masteraccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourceaccountid)
                    .HasColumnName("sourceaccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MasterEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_encounter", "entitystore");

                entity.HasIndex(e => e.EncounterId)
                    .HasName("master_encounter_encounter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_encounter__sequenceid_idx");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(1000);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(1000);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Masterencounterid)
                    .HasColumnName("masterencounterid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_MasterEncounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_encounter", "entitystorematerialised");

                entity.HasIndex(e => e.EncounterId)
                    .HasName("master_encounter_encounter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_encounter__sequenceid_idx");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(1000);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(1000);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Masterencounterid)
                    .HasColumnName("masterencounterid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystore_MasterEncountermerges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_encountermerges", "entitystore");

                entity.HasIndex(e => e.EncountermergesId)
                    .HasName("master_encountermerges_encountermerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_encountermerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_encountermerges__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destencounterid)
                    .HasColumnName("destencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.EncountermergesId)
                    .HasColumnName("encountermerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Masterencounterid)
                    .HasColumnName("masterencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceencounterid)
                    .HasColumnName("sourceencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MasterEncountermerges1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_encountermerges", "entitystorematerialised");

                entity.HasIndex(e => e.EncountermergesId)
                    .HasName("master_encountermerges_encountermerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_encountermerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_encountermerges__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destencounterid)
                    .HasColumnName("destencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.EncountermergesId)
                    .HasColumnName("encountermerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Masterencounterid)
                    .HasColumnName("masterencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceencounterid)
                    .HasColumnName("sourceencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MasterPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_person", "entitystore");

                entity.HasIndex(e => e.PersonId)
                    .HasName("master_person_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_person__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_person__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Masterpersonid)
                    .HasColumnName("masterpersonid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_MasterPerson1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_person", "entitystorematerialised");

                entity.HasIndex(e => e.PersonId)
                    .HasName("master_person_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_person__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_person__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Masterpersonid)
                    .HasColumnName("masterpersonid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystore_MasterPersonmerges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_personmerges", "entitystore");

                entity.HasIndex(e => e.PersonmergesId)
                    .HasName("master_personmerges_personmerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_personmerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_personmerges__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Destpersonid)
                    .HasColumnName("destpersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.Masterpersonid)
                    .HasColumnName("masterpersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonmergesId)
                    .HasColumnName("personmerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcepersonid)
                    .HasColumnName("sourcepersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MasterPersonmerges1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_personmerges", "entitystorematerialised");

                entity.HasIndex(e => e.PersonmergesId)
                    .HasName("master_personmerges_personmerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_personmerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_personmerges__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Destpersonid)
                    .HasColumnName("destpersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.Masterpersonid)
                    .HasColumnName("masterpersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonmergesId)
                    .HasColumnName("personmerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcepersonid)
                    .HasColumnName("sourcepersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MasterTestentity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_testentity", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_testentity__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_testentity__sequenceid_idx");

                entity.HasIndex(e => e.TestentityId)
                    .HasName("master_testentity_testentity_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TestentityId)
                    .HasColumnName("testentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MasterTestentity1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_testentity", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("master_testentity__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("master_testentity__sequenceid_idx");

                entity.HasIndex(e => e.TestentityId)
                    .HasName("master_testentity_testentity_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TestentityId)
                    .HasColumnName("testentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaAdminpins>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_adminpins", "entitystore");

                entity.HasIndex(e => e.AdminpinsId)
                    .HasName("meta_adminpins_adminpins_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_adminpins__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_adminpins__sequenceid_idx");

                entity.Property(e => e.AdminpinsId)
                    .HasColumnName("adminpins_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Pin)
                    .HasColumnName("pin")
                    .HasMaxLength(255);

                entity.Property(e => e.Pintype)
                    .HasColumnName("pintype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAdminpins1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_adminpins", "entitystorematerialised");

                entity.HasIndex(e => e.AdminpinsId)
                    .HasName("meta_adminpins_adminpins_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_adminpins__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_adminpins__sequenceid_idx");

                entity.Property(e => e.AdminpinsId)
                    .HasColumnName("adminpins_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Pin)
                    .HasColumnName("pin")
                    .HasMaxLength(255);

                entity.Property(e => e.Pintype)
                    .HasColumnName("pintype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_application", "entitystore");

                entity.HasIndex(e => e.ApplicationId)
                    .HasName("meta_application_application_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_application__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_application__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Applicationname)
                    .HasColumnName("applicationname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplication1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_application", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationId)
                    .HasName("meta_application_application_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_application__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_application__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Applicationname)
                    .HasColumnName("applicationname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaApplicationlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationlist", "entitystore");

                entity.HasIndex(e => e.ApplicationlistId)
                    .HasName("meta_applicationlist_applicationlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_applicationlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_applicationlist__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationlistId)
                    .HasColumnName("applicationlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Listid)
                    .HasColumnName("listid")
                    .HasMaxLength(255);

                entity.Property(e => e.Listname)
                    .HasColumnName("listname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplicationlist1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationlist", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationlistId)
                    .HasName("meta_applicationlist_applicationlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_applicationlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_applicationlist__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationlistId)
                    .HasColumnName("applicationlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Listid)
                    .HasColumnName("listid")
                    .HasMaxLength(255);

                entity.Property(e => e.Listname)
                    .HasColumnName("listname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaApplicationmodulemapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationmodulemapping", "entitystore");

                entity.HasIndex(e => e.ApplicationmodulemappingId)
                    .HasName("meta_applicationmodulemapping_applicationmodulemapping_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_applicationmodulemapping__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_applicationmodulemapping__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationmodulemappingId)
                    .HasColumnName("applicationmodulemapping_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Isdefaultmodule).HasColumnName("isdefaultmodule");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplicationmodulemapping1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationmodulemapping", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationmodulemappingId)
                    .HasName("meta_applicationmodulemapping_applicationmodulemapping_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_applicationmodulemapping__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_applicationmodulemapping__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationmodulemappingId)
                    .HasColumnName("applicationmodulemapping_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Isdefaultmodule).HasColumnName("isdefaultmodule");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaBedstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_bedstatus", "entitystore");

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.BedstatusId)
                    .HasColumnName("bedstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusnumber).HasColumnName("statusnumber");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaBedstatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_bedstatus", "entitystorematerialised");

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.BedstatusId)
                    .HasColumnName("bedstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusnumber).HasColumnName("statusnumber");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaCarerecordtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_carerecordtype", "entitystore");

                entity.HasIndex(e => e.CarerecordtypeId)
                    .HasName("meta_carerecordtype_carerecordtype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_carerecordtype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_carerecordtype__sequenceid_idx");

                entity.Property(e => e.CarerecordtypeId)
                    .HasColumnName("carerecordtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaCarerecordtype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_carerecordtype", "entitystorematerialised");

                entity.HasIndex(e => e.CarerecordtypeId)
                    .HasName("meta_carerecordtype_carerecordtype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_carerecordtype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_carerecordtype__sequenceid_idx");

                entity.Property(e => e.CarerecordtypeId)
                    .HasColumnName("carerecordtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaChart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_chart", "entitystore");

                entity.HasIndex(e => e.ChartId)
                    .HasName("meta_chart_chart_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_chart__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_chart__sequenceid_idx");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartname)
                    .HasColumnName("chartname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaChart1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_chart", "entitystorematerialised");

                entity.HasIndex(e => e.ChartId)
                    .HasName("meta_chart_chart_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_chart__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_chart__sequenceid_idx");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartname)
                    .HasColumnName("chartname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaChartgraph>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_chartgraph", "entitystore");

                entity.HasIndex(e => e.ChartgraphId)
                    .HasName("meta_chartgraph_chartgraph_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_chartgraph__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_chartgraph__sequenceid_idx");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ChartgraphId)
                    .HasColumnName("chartgraph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartgraphorder)
                    .HasColumnName("chartgraphorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaChartgraph1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_chartgraph", "entitystorematerialised");

                entity.HasIndex(e => e.ChartgraphId)
                    .HasName("meta_chartgraph_chartgraph_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_chartgraph__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_chartgraph__sequenceid_idx");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ChartgraphId)
                    .HasColumnName("chartgraph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartgraphorder)
                    .HasColumnName("chartgraphorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaCliniccontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_cliniccontext", "baseview");

                entity.Property(e => e.Cliniccode).HasColumnName("cliniccode");

                entity.Property(e => e.Clinictext).HasColumnName("clinictext");
            });

            modelBuilder.Entity<baseview_MetaConsultantcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_consultantcontext", "baseview");

                entity.Property(e => e.Consultantcode)
                    .HasColumnName("consultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultanttext)
                    .HasColumnName("consultanttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MetaFluidbalanceintakeroute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalanceintakeroute", "baseview");

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasColumnType("character varying");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_MetaFluidbalanceoutputroute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalanceoutputroute", "baseview");

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasColumnType("character varying");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<entitystore_MetaFluidbalanceroute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalanceroute", "entitystore");

                entity.HasIndex(e => e.FluidbalancerouteId)
                    .HasName("meta_fluidbalanceroute_fluidbalanceroute_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_fluidbalanceroute__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_fluidbalanceroute__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidintakeoroutputtype)
                    .HasColumnName("fluidintakeoroutputtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidbalanceroute1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalanceroute", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancerouteId)
                    .HasName("meta_fluidbalanceroute_fluidbalanceroute_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_fluidbalanceroute__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_fluidbalanceroute__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidintakeoroutputtype)
                    .HasColumnName("fluidintakeoroutputtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaFluidbalancetimeslot>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalancetimeslot", "entitystore");

                entity.HasIndex(e => e.FluidbalancetimeslotId)
                    .HasName("meta_fluidbalancetimeslot_fluidbalancetimeslot_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_fluidbalancetimeslot__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_fluidbalancetimeslot__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FluidbalancetimeslotId)
                    .HasColumnName("fluidbalancetimeslot_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeslot)
                    .HasColumnName("timeslot")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidbalancetimeslot1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalancetimeslot", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancetimeslotId)
                    .HasName("meta_fluidbalancetimeslot_fluidbalancetimeslot_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_fluidbalancetimeslot__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_fluidbalancetimeslot__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FluidbalancetimeslotId)
                    .HasColumnName("fluidbalancetimeslot_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeslot)
                    .HasColumnName("timeslot")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaFluidbalancetype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalancetype", "entitystore");

                entity.HasIndex(e => e.FluidbalancetypeId)
                    .HasName("meta_fluidbalancetype_fluidbalancetype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_fluidbalancetype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_fluidbalancetype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancetypeId)
                    .HasColumnName("fluidbalancetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidintakeoroutputtype)
                    .HasColumnName("fluidintakeoroutputtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typename)
                    .HasColumnName("typename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidbalancetype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalancetype", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancetypeId)
                    .HasName("meta_fluidbalancetype_fluidbalancetype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_fluidbalancetype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_fluidbalancetype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancetypeId)
                    .HasColumnName("fluidbalancetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidintakeoroutputtype)
                    .HasColumnName("fluidintakeoroutputtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typename)
                    .HasColumnName("typename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaGraph>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graph", "entitystore");

                entity.HasIndex(e => e.GraphId)
                    .HasName("meta_graph_graph_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graph__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graph__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphname)
                    .HasColumnName("graphname")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphtype)
                    .HasColumnName("graphtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraph1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graph", "entitystorematerialised");

                entity.HasIndex(e => e.GraphId)
                    .HasName("meta_graph_graph_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graph__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graph__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphname)
                    .HasColumnName("graphname")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphtype)
                    .HasColumnName("graphtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaGraphband>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphband", "entitystore");

                entity.HasIndex(e => e.GraphbandId)
                    .HasName("meta_graphband_graphband_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graphband__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graphband__sequenceid_idx");

                entity.Property(e => e.Bandorder)
                    .HasColumnName("bandorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Bandscore)
                    .HasColumnName("bandscore")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Domainvalue)
                    .HasColumnName("domainvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphbandId)
                    .HasColumnName("graphband_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Label)
                    .HasColumnName("label")
                    .HasMaxLength(255);

                entity.Property(e => e.Lowerlimit)
                    .HasColumnName("lowerlimit")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ordinalparameterdomain)
                    .HasColumnName("ordinalparameterdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Secondarydomainvalue)
                    .HasColumnName("secondarydomainvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Upperlimit)
                    .HasColumnName("upperlimit")
                    .HasColumnType("numeric");

                entity.Property(e => e.WarningscoresystemId)
                    .HasColumnName("warningscoresystem_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraphband1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphband", "entitystorematerialised");

                entity.HasIndex(e => e.GraphbandId)
                    .HasName("meta_graphband_graphband_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graphband__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graphband__sequenceid_idx");

                entity.Property(e => e.Bandorder)
                    .HasColumnName("bandorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Bandscore)
                    .HasColumnName("bandscore")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Domainvalue)
                    .HasColumnName("domainvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphbandId)
                    .HasColumnName("graphband_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Label)
                    .HasColumnName("label")
                    .HasMaxLength(255);

                entity.Property(e => e.Lowerlimit)
                    .HasColumnName("lowerlimit")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ordinalparameterdomain)
                    .HasColumnName("ordinalparameterdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Secondarydomainvalue)
                    .HasColumnName("secondarydomainvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Upperlimit)
                    .HasColumnName("upperlimit")
                    .HasColumnType("numeric");

                entity.Property(e => e.WarningscoresystemId)
                    .HasColumnName("warningscoresystem_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MetaGraphcharts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphcharts", "baseview");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartgraphorder)
                    .HasColumnName("chartgraphorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Chartname)
                    .HasColumnName("chartname")
                    .HasMaxLength(255);

                entity.Property(e => e.Ewsbandingrange).HasColumnName("ewsbandingrange");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphname)
                    .HasColumnName("graphname")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphtype)
                    .HasColumnName("graphtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordinalparameterdomain)
                    .HasColumnName("ordinalparameterdomain")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Parameterdomain).HasColumnName("parameterdomain");

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Parameterlabelsdomain)
                    .HasColumnName("parameterlabelsdomain")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Secondaryparameterdomain).HasColumnName("secondaryparameterdomain");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaGraphparameterkey>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphparameterkey", "entitystore");

                entity.HasIndex(e => e.GraphparameterkeyId)
                    .HasName("meta_graphparameterkey_graphparameterkey_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graphparameterkey__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graphparameterkey__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphparameterkeyId)
                    .HasColumnName("graphparameterkey_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraphparameterkey1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphparameterkey", "entitystorematerialised");

                entity.HasIndex(e => e.GraphparameterkeyId)
                    .HasName("meta_graphparameterkey_graphparameterkey_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graphparameterkey__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graphparameterkey__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphparameterkeyId)
                    .HasColumnName("graphparameterkey_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaGraphscale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphscale", "entitystore");

                entity.HasIndex(e => e.GraphscaleId)
                    .HasName("meta_graphscale_graphscale_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graphscale__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graphscale__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphscaleId)
                    .HasColumnName("graphscale_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraphscale1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphscale", "entitystorematerialised");

                entity.HasIndex(e => e.GraphscaleId)
                    .HasName("meta_graphscale_graphscale_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_graphscale__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_graphscale__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphscaleId)
                    .HasColumnName("graphscale_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaListcontexts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_listcontexts", "entitystore");

                entity.HasIndex(e => e.ListcontextsId)
                    .HasName("meta_listcontexts_listcontexts_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_listcontexts__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_listcontexts__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Field)
                    .HasColumnName("field")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListcontextsId)
                    .HasColumnName("listcontexts_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaListcontexts1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_listcontexts", "entitystorematerialised");

                entity.HasIndex(e => e.ListcontextsId)
                    .HasName("meta_listcontexts_listcontexts_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_listcontexts__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_listcontexts__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Field)
                    .HasColumnName("field")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListcontextsId)
                    .HasColumnName("listcontexts_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaModule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_module", "entitystore");

                entity.HasIndex(e => e.ModuleId)
                    .HasName("meta_module_module_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_module__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_module__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Domselector)
                    .HasColumnName("domselector")
                    .HasMaxLength(255);

                entity.Property(e => e.Jsurl)
                    .HasColumnName("jsurl")
                    .HasMaxLength(1000);

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Moduledescription)
                    .HasColumnName("moduledescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Modulename)
                    .HasColumnName("modulename")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaModule1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_module", "entitystorematerialised");

                entity.HasIndex(e => e.ModuleId)
                    .HasName("meta_module_module_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_module__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_module__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Domselector)
                    .HasColumnName("domselector")
                    .HasMaxLength(255);

                entity.Property(e => e.Jsurl)
                    .HasColumnName("jsurl")
                    .HasMaxLength(1000);

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Moduledescription)
                    .HasColumnName("moduledescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Modulename)
                    .HasColumnName("modulename")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaModulelist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_modulelist", "baseview");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Domselector)
                    .HasColumnName("domselector")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdefaultmodule).HasColumnName("isdefaultmodule");

                entity.Property(e => e.Jsurl)
                    .HasColumnName("jsurl")
                    .HasMaxLength(1000);

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Moduledescription)
                    .HasColumnName("moduledescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Modulename)
                    .HasColumnName("modulename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaObservationchartsettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationchartsettings", "entitystore");

                entity.HasIndex(e => e.ObservationchartsettingsId)
                    .HasName("meta_observationchartsettings_observationchartsettings_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_observationchartsettings__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_observationchartsettings__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Numberofcolumnsinthechart)
                    .HasColumnName("numberofcolumnsinthechart")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationchartsettingsId)
                    .HasColumnName("observationchartsettings_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ratioofcellheighttowidth)
                    .HasColumnName("ratioofcellheighttowidth")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationchartsettings1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationchartsettings", "entitystorematerialised");

                entity.HasIndex(e => e.ObservationchartsettingsId)
                    .HasName("meta_observationchartsettings_observationchartsettings_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_observationchartsettings__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_observationchartsettings__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Numberofcolumnsinthechart)
                    .HasColumnName("numberofcolumnsinthechart")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationchartsettingsId)
                    .HasColumnName("observationchartsettings_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ratioofcellheighttowidth)
                    .HasColumnName("ratioofcellheighttowidth")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaObservationscaletype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationscaletype", "entitystore");

                entity.HasIndex(e => e.ObservationscaletypeId)
                    .HasName("meta_observationscaletype_observationscaletype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_observationscaletype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_observationscaletype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Scaletypedescription)
                    .HasColumnName("scaletypedescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Scaletypename)
                    .HasColumnName("scaletypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationscaletype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationscaletype", "entitystorematerialised");

                entity.HasIndex(e => e.ObservationscaletypeId)
                    .HasName("meta_observationscaletype_observationscaletype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_observationscaletype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_observationscaletype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scaletypedescription)
                    .HasColumnName("scaletypedescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Scaletypename)
                    .HasColumnName("scaletypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaObservationtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationtype", "entitystore");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Valuelist)
                    .HasColumnName("valuelist")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationtype1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationtype", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Valuelist)
                    .HasColumnName("valuelist")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaObservationtypemeasurement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationtypemeasurement", "entitystore");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationtypemeasurement1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationtypemeasurement", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaOxygendevices>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_oxygendevices", "entitystore");

                entity.HasIndex(e => e.OxygendevicesId)
                    .HasName("meta_oxygendevices_oxygendevices_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_oxygendevices__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_oxygendevices__sequenceid_idx");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaOxygendevices1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_oxygendevices", "entitystorematerialised");

                entity.HasIndex(e => e.OxygendevicesId)
                    .HasName("meta_oxygendevices_oxygendevices_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_oxygendevices__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_oxygendevices__sequenceid_idx");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaPersona>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_persona", "entitystore");

                entity.HasIndex(e => e.PersonaId)
                    .HasName("meta_persona_persona_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_persona__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_persona__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personaname)
                    .HasColumnName("personaname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersona1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_persona", "entitystorematerialised");

                entity.HasIndex(e => e.PersonaId)
                    .HasName("meta_persona_persona_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_persona__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_persona__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personaname)
                    .HasColumnName("personaname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaPersona2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_persona", "baseview");

                entity.Property(e => e.Contextname)
                    .HasColumnName("contextname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personadispname)
                    .HasColumnName("personadispname")
                    .HasMaxLength(255);

                entity.Property(e => e.Personadisporder).HasColumnName("personadisporder");

                entity.Property(e => e.Personaname)
                    .HasColumnName("personaname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaPersonacontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontext", "entitystore");

                entity.HasIndex(e => e.PersonacontextId)
                    .HasName("meta_personacontext_personacontext_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontext__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontext__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextname)
                    .HasColumnName("contextname")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Mappingentitycolumn)
                    .HasColumnName("mappingentitycolumn")
                    .HasMaxLength(255);

                entity.Property(e => e.Mappingentitycontext)
                    .HasColumnName("mappingentitycontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Mappingentityname)
                    .HasColumnName("mappingentityname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontext1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontext", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextId)
                    .HasName("meta_personacontext_personacontext_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontext__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontext__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextname)
                    .HasColumnName("contextname")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Mappingentitycolumn)
                    .HasColumnName("mappingentitycolumn")
                    .HasMaxLength(255);

                entity.Property(e => e.Mappingentitycontext)
                    .HasColumnName("mappingentitycontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Mappingentityname)
                    .HasColumnName("mappingentityname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaPersonacontextgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextgroup", "entitystore");

                entity.HasIndex(e => e.PersonacontextgroupId)
                    .HasName("meta_personacontextgroup_personacontextgroup_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontextgroup__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontextgroup__sequenceid_idx");

                entity.Property(e => e.Contextgroupname)
                    .HasColumnName("contextgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextgroupId)
                    .HasColumnName("personacontextgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontextgroup1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextgroup", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextgroupId)
                    .HasName("meta_personacontextgroup_personacontextgroup_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontextgroup__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontextgroup__sequenceid_idx");

                entity.Property(e => e.Contextgroupname)
                    .HasColumnName("contextgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextgroupId)
                    .HasColumnName("personacontextgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystore_MetaPersonacontextgroupusers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextgroupusers", "entitystore");

                entity.HasIndex(e => e.PersonacontextgroupusersId)
                    .HasName("meta_personacontextgroupusers_personacontextgroupusers_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontextgroupusers__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontextgroupusers__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.PersonacontextgroupId)
                    .HasColumnName("personacontextgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextgroupusersId)
                    .HasColumnName("personacontextgroupusers_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Useridentifier)
                    .HasColumnName("useridentifier")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontextgroupusers1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextgroupusers", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextgroupusersId)
                    .HasName("meta_personacontextgroupusers_personacontextgroupusers_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontextgroupusers__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontextgroupusers__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.PersonacontextgroupId)
                    .HasColumnName("personacontextgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextgroupusersId)
                    .HasColumnName("personacontextgroupusers_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Useridentifier)
                    .HasColumnName("useridentifier")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaPersonacontextmappingcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextmappingcodes", "entitystore");

                entity.HasIndex(e => e.PersonacontextmappingcodesId)
                    .HasName("meta_personacontextmappingcod_personacontextmappingcodes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontextmappingcodes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontextmappingcodes__sequenceid_idx");

                entity.Property(e => e.Codetype)
                    .HasColumnName("codetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Mappingcode)
                    .HasColumnName("mappingcode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextmappingcodesId)
                    .HasColumnName("personacontextmappingcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontextmappingcodes1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextmappingcodes", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextmappingcodesId)
                    .HasName("meta_personacontextmappingcod_personacontextmappingcodes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_personacontextmappingcodes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_personacontextmappingcodes__sequenceid_idx");

                entity.Property(e => e.Codetype)
                    .HasColumnName("codetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Mappingcode)
                    .HasColumnName("mappingcode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextmappingcodesId)
                    .HasColumnName("personacontextmappingcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaTheatrecontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_theatrecontext", "baseview");

                entity.Property(e => e.Cliniccode).HasColumnName("cliniccode");

                entity.Property(e => e.Clinictext).HasColumnName("clinictext");
            });

            modelBuilder.Entity<entitystore_MetaWard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_ward", "entitystore");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardId)
                    .HasColumnName("ward_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplayshort)
                    .HasColumnName("warddisplayshort")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardstatus).HasColumnName("wardstatus");
            });

            modelBuilder.Entity<entitystorematerialised_MetaWard1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_ward", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardId)
                    .HasColumnName("ward_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplayshort)
                    .HasColumnName("warddisplayshort")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardstatus).HasColumnName("wardstatus");
            });

            modelBuilder.Entity<entitystorematerialised_MetaWardbay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardbay", "entitystorematerialised");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardbayId)
                    .HasColumnName("wardbay_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaWardbay1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardbay", "entitystore");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardbayId)
                    .HasColumnName("wardbay_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaWardbaybed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardbaybed", "entitystore");

                entity.Property(e => e.Acceptfemale).HasColumnName("acceptfemale");

                entity.Property(e => e.Acceptmale).HasColumnName("acceptmale");

                entity.Property(e => e.Acceptmaximumage).HasColumnName("acceptmaximumage");

                entity.Property(e => e.Acceptminimumage).HasColumnName("acceptminimumage");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaydisplay)
                    .HasColumnName("bedbaydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Bedtype)
                    .HasColumnName("bedtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWardbaybed1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardbaybed", "entitystorematerialised");

                entity.Property(e => e.Acceptfemale).HasColumnName("acceptfemale");

                entity.Property(e => e.Acceptmale).HasColumnName("acceptmale");

                entity.Property(e => e.Acceptmaximumage).HasColumnName("acceptmaximumage");

                entity.Property(e => e.Acceptminimumage).HasColumnName("acceptminimumage");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaydisplay)
                    .HasColumnName("bedbaydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Bedtype)
                    .HasColumnName("bedtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaWardwithoutbed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardwithoutbed", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_wardwithoutbed__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_wardwithoutbed__sequenceid_idx");

                entity.HasIndex(e => e.WardwithoutbedId)
                    .HasName("meta_wardwithoutbed_wardwithoutbed_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.WardwithoutbedId)
                    .HasColumnName("wardwithoutbed_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWardwithoutbed1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardwithoutbed", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_wardwithoutbed__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_wardwithoutbed__sequenceid_idx");

                entity.HasIndex(e => e.WardwithoutbedId)
                    .HasName("meta_wardwithoutbed_wardwithoutbed_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.WardwithoutbedId)
                    .HasColumnName("wardwithoutbed_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_MetaWarningscoresystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_warningscoresystem", "entitystore");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_warningscoresystem__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_warningscoresystem__sequenceid_idx");

                entity.HasIndex(e => e.WarningscoresystemId)
                    .HasName("meta_warningscoresystem_warningscoresystem_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warningscorename)
                    .HasColumnName("warningscorename")
                    .HasMaxLength(255);

                entity.Property(e => e.WarningscoresystemId)
                    .HasColumnName("warningscoresystem_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWarningscoresystem1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_warningscoresystem", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("meta_warningscoresystem__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("meta_warningscoresystem__sequenceid_idx");

                entity.HasIndex(e => e.WarningscoresystemId)
                    .HasName("meta_warningscoresystem_warningscoresystem_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warningscorename)
                    .HasColumnName("warningscorename")
                    .HasMaxLength(255);

                entity.Property(e => e.WarningscoresystemId)
                    .HasColumnName("warningscoresystem_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_NhsersGetersworklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nhsers_getersworklist", "baseview");
            });

            modelBuilder.Entity<baseview_PatientbannerColumn2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_column2", "baseview");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasColumnType("character varying");

                entity.Property(e => e.Intendeddischargedate).HasColumnName("intendeddischargedate");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasColumnType("character varying");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight).HasColumnName("weight");
            });

            modelBuilder.Entity<baseview_PatientbannerLatestipencounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_latestipencounter", "baseview");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendeddischargedate).HasColumnName("intendeddischargedate");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerMainbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_mainbanner", "baseview");

                entity.Property(e => e.Address).HasColumnName("address");

                entity.Property(e => e.Born).HasColumnName("born");

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactdetails).HasColumnName("contactdetails");

                entity.Property(e => e.Currentlyadmittedto).HasColumnName("currentlyadmittedto");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicgroup)
                    .HasColumnName("ethnicgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasColumnType("character varying");

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonaddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personaddress", "baseview");

                entity.Property(e => e.Address).HasColumnName("address");

                entity.Property(e => e.Isprimaryaddress).HasColumnName("isprimaryaddress");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonallergy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personallergy", "baseview");

                entity.Property(e => e.AllergyintolleranceId)
                    .HasColumnName("allergyintollerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasColumnType("citext");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasColumnType("citext");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastoccurence)
                    .HasColumnName("lastoccurence")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Onsetageyears).HasColumnName("onsetageyears");

                entity.Property(e => e.Onsetdatetime)
                    .HasColumnName("onsetdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Onsetstring)
                    .HasColumnName("onsetstring")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasColumnType("citext");

                entity.Property(e => e.Recordeddate)
                    .HasColumnName("recordeddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasColumnType("citext");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasColumnType("citext");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<baseview_PatientbannerPersoncontactinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personcontactinfo", "baseview");

                entity.Property(e => e.Contactdetails).HasColumnName("contactdetails");

                entity.Property(e => e.Contactnotes)
                    .HasColumnName("contactnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttype)
                    .HasColumnName("contacttype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonidentifier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personidentifier", "baseview");

                entity.Property(e => e.Hospitalnumber).HasColumnName("hospitalnumber");

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersoninfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personinfo", "baseview");

                entity.Property(e => e.Born)
                    .HasColumnName("born")
                    .HasColumnType("date");

                entity.Property(e => e.Ethnicgroup)
                    .HasColumnName("ethnicgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonobservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personobservation", "baseview");

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight).HasColumnName("weight");
            });

            modelBuilder.Entity<baseview_PoaAsa1worklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_asa1worklist", "baseview");

                entity.Property(e => e.Ageyears).HasColumnName("ageyears");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Forminstancescore)
                    .HasColumnName("forminstancescore")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Reviewtype)
                    .HasColumnName("reviewtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Scoredescription)
                    .HasColumnName("scoredescription")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<baseview_RtsComments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rts_comments", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.RtsCommentId)
                    .HasColumnName("rts_comment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_RtsWorklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rts_worklist", "baseview");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Assignedtoprovider)
                    .HasColumnName("assignedtoprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedtospeciality)
                    .HasColumnName("assignedtospeciality")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalinfofirstsubmitted).HasColumnName("clinicalinfofirstsubmitted");

                entity.Property(e => e.Datebookingmade).HasColumnName("datebookingmade");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Documentsdownloaded).HasColumnName("documentsdownloaded");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerteamtriage)
                    .HasColumnName("providerteamtriage")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamtriageId)
                    .HasColumnName("providerteamtriage_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringlocation)
                    .HasColumnName("referringlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovider)
                    .HasColumnName("referringprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdate).HasColumnName("statusdate");

                entity.Property(e => e.Statususer)
                    .HasColumnName("statususer")
                    .HasMaxLength(255);

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_SecambCad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_cad", "baseview");

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedambulancedispatchedtimeformatted).HasColumnName("cadassignedambulancedispatchedtimeformatted");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cademergencycalltimeformatted).HasColumnName("cademergencycalltimeformatted");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadproblemidentifiedtimeformatted).HasColumnName("cadproblemidentifiedtimeformatted");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltodispatch).HasColumnName("calltodispatch");

                entity.Property(e => e.Calltoproblemidentified).HasColumnName("calltoproblemidentified");

                entity.Property(e => e.Problemidentifiedtodispatch).HasColumnName("problemidentifiedtodispatch");

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_SecambCadswithoutpcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_cadswithoutpcr", "baseview");

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedambulancedispatchedtimeformatted).HasColumnName("cadassignedambulancedispatchedtimeformatted");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cademergencycalltimeformatted).HasColumnName("cademergencycalltimeformatted");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadproblemidentifiedtimeformatted).HasColumnName("cadproblemidentifiedtimeformatted");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_SecambEpcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_epcr", "baseview");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atpatientformatted).HasColumnName("atpatientformatted");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Atsceneformatted).HasColumnName("atsceneformatted");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Calltimeformatted).HasColumnName("calltimeformatted");

                entity.Property(e => e.Calltimetohandover).HasColumnName("calltimetohandover");

                entity.Property(e => e.Calltoatpatient).HasColumnName("calltoatpatient");

                entity.Property(e => e.Calltoatscene).HasColumnName("calltoatscene");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalwaitingtime).HasColumnName("hospitalwaitingtime");

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Incidentdateformatted).HasColumnName("incidentdateformatted");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Leftsceneformatted).HasColumnName("leftsceneformatted");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Patienthandoverformatted).HasColumnName("patienthandoverformatted");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timeathospitalformatted).HasColumnName("timeathospitalformatted");

                entity.Property(e => e.Timeonroute).HasColumnName("timeonroute");

                entity.Property(e => e.Timeonscene).HasColumnName("timeonscene");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");

                entity.Property(e => e.Verbalhandoverformatted).HasColumnName("verbalhandoverformatted");
            });

            modelBuilder.Entity<baseview_SecambNoncompliantresponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_noncompliantresponse", "baseview");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atpatientformatted).HasColumnName("atpatientformatted");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Atsceneformatted).HasColumnName("atsceneformatted");

                entity.Property(e => e.Auditbadge).HasColumnName("auditbadge");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedambulancedispatchedtimeformatted).HasColumnName("cadassignedambulancedispatchedtimeformatted");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cademergencycalltimeformatted).HasColumnName("cademergencycalltimeformatted");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadproblemidentifiedtimeformatted).HasColumnName("cadproblemidentifiedtimeformatted");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Calltimeformatted).HasColumnName("calltimeformatted");

                entity.Property(e => e.Calltimetohandover).HasColumnName("calltimetohandover");

                entity.Property(e => e.Calltoatpatient).HasColumnName("calltoatpatient");

                entity.Property(e => e.Calltoatscene).HasColumnName("calltoatscene");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Epcrcadincidentnumber)
                    .HasColumnName("epcrcadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalwaitingtime).HasColumnName("hospitalwaitingtime");

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Incidentdateformatted).HasColumnName("incidentdateformatted");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Leftsceneformatted).HasColumnName("leftsceneformatted");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Patienthandoverformatted).HasColumnName("patienthandoverformatted");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.Responsebadge).HasColumnName("responsebadge");

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timeathospitalformatted).HasColumnName("timeathospitalformatted");

                entity.Property(e => e.Timeonroute).HasColumnName("timeonroute");

                entity.Property(e => e.Timeonscene).HasColumnName("timeonscene");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");

                entity.Property(e => e.Verbalhandoverformatted).HasColumnName("verbalhandoverformatted");
            });

            modelBuilder.Entity<baseview_SecambRandomresponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_randomresponse", "baseview");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atpatientformatted).HasColumnName("atpatientformatted");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Atsceneformatted).HasColumnName("atsceneformatted");

                entity.Property(e => e.Auditbadge).HasColumnName("auditbadge");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedambulancedispatchedtimeformatted).HasColumnName("cadassignedambulancedispatchedtimeformatted");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cademergencycalltimeformatted).HasColumnName("cademergencycalltimeformatted");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadproblemidentifiedtimeformatted).HasColumnName("cadproblemidentifiedtimeformatted");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Calltimeformatted).HasColumnName("calltimeformatted");

                entity.Property(e => e.Calltimetohandover).HasColumnName("calltimetohandover");

                entity.Property(e => e.Calltoatpatient).HasColumnName("calltoatpatient");

                entity.Property(e => e.Calltoatscene).HasColumnName("calltoatscene");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Epcrcadincidentnumber)
                    .HasColumnName("epcrcadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalwaitingtime).HasColumnName("hospitalwaitingtime");

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Incidentdateformatted).HasColumnName("incidentdateformatted");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Leftsceneformatted).HasColumnName("leftsceneformatted");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Patienthandoverformatted).HasColumnName("patienthandoverformatted");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.Responsebadge).HasColumnName("responsebadge");

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timeathospitalformatted).HasColumnName("timeathospitalformatted");

                entity.Property(e => e.Timeonroute).HasColumnName("timeonroute");

                entity.Property(e => e.Timeonscene).HasColumnName("timeonscene");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");

                entity.Property(e => e.Verbalhandoverformatted).HasColumnName("verbalhandoverformatted");
            });

            modelBuilder.Entity<baseview_SecambStemi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_stemi", "baseview");

                entity.Property(e => e.Aspirinbadge).HasColumnName("aspirinbadge");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atpatientformatted).HasColumnName("atpatientformatted");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Atsceneformatted).HasColumnName("atsceneformatted");

                entity.Property(e => e.Auditbadge).HasColumnName("auditbadge");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedambulancedispatchedtimeformatted).HasColumnName("cadassignedambulancedispatchedtimeformatted");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cademergencycalltimeformatted).HasColumnName("cademergencycalltimeformatted");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadproblemidentifiedtimeformatted).HasColumnName("cadproblemidentifiedtimeformatted");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Calltimeformatted).HasColumnName("calltimeformatted");

                entity.Property(e => e.Calltimetohandover).HasColumnName("calltimetohandover");

                entity.Property(e => e.Calltoatpatient).HasColumnName("calltoatpatient");

                entity.Property(e => e.Calltoatscene).HasColumnName("calltoatscene");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Clopidogrelbadge).HasColumnName("clopidogrelbadge");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Epcrcadincidentnumber)
                    .HasColumnName("epcrcadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Gtnbadge).HasColumnName("gtnbadge");

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalwaitingtime).HasColumnName("hospitalwaitingtime");

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Incidentdateformatted).HasColumnName("incidentdateformatted");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Leftsceneformatted).HasColumnName("leftsceneformatted");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Patienthandoverformatted).HasColumnName("patienthandoverformatted");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtbadge).HasColumnName("phtbadge");

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.Responsebadge).HasColumnName("responsebadge");

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Stemibadge).HasColumnName("stemibadge");

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timeathospitalformatted).HasColumnName("timeathospitalformatted");

                entity.Property(e => e.Timeonroute).HasColumnName("timeonroute");

                entity.Property(e => e.Timeonscene).HasColumnName("timeonscene");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");

                entity.Property(e => e.Verbalhandoverformatted).HasColumnName("verbalhandoverformatted");
            });

            modelBuilder.Entity<baseview_TerminusAllinpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_allinpatients", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusAllinpatientswithhighews>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_allinpatientswithhighews", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaystatusdisplay)
                    .HasColumnName("bedbaystatusdisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplayhtml5).HasColumnName("beddisplayhtml5");

                entity.Property(e => e.Beddisplaynohtml).HasColumnName("beddisplaynohtml");

                entity.Property(e => e.Bedenabled).HasColumnName("bedenabled");

                entity.Property(e => e.Bednumbercolour).HasColumnName("bednumbercolour");

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasMaxLength(255);

                entity.Property(e => e.ColActions).HasColumnName("col_actions");

                entity.Property(e => e.ColBadges).HasColumnName("col_badges");

                entity.Property(e => e.ColBed)
                    .HasColumnName("col_bed")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultant)
                    .HasColumnName("col_consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultantlocator).HasColumnName("col_consultantlocator");

                entity.Property(e => e.ColDays).HasColumnName("col_days");

                entity.Property(e => e.ColExpecteddischargedate).HasColumnName("col_expecteddischargedate");

                entity.Property(e => e.ColJuniorbleep).HasColumnName("col_juniorbleep");

                entity.Property(e => e.ColNurse).HasColumnName("col_nurse");

                entity.Property(e => e.ColOttext).HasColumnName("col_ottext");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.ColPatientNoimage).HasColumnName("col_patient_noimage");

                entity.Property(e => e.ColPttext).HasColumnName("col_pttext");

                entity.Property(e => e.ColRadiology).HasColumnName("col_radiology");

                entity.Property(e => e.ColStatus).HasColumnName("col_status");

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Fullnamewithhospno).HasColumnName("fullnamewithhospno");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Intenteddischargedateformatted).HasColumnName("intenteddischargedateformatted");

                entity.Property(e => e.Issamename).HasColumnName("issamename");

                entity.Property(e => e.Lastobservationtime).HasColumnName("lastobservationtime");

                entity.Property(e => e.Lastobservationtimetext).HasColumnName("lastobservationtimetext");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.Locationwithconsultant)
                    .HasColumnName("locationwithconsultant")
                    .HasColumnType("character varying");

                entity.Property(e => e.Locatorboardtitleward).HasColumnName("locatorboardtitleward");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.News2score)
                    .HasColumnName("news2score")
                    .HasColumnType("numeric");

                entity.Property(e => e.Nextobsdueinhours).HasColumnName("nextobsdueinhours");

                entity.Property(e => e.Nextobsdueinminutes).HasColumnName("nextobsdueinminutes");

                entity.Property(e => e.Nextobsduestatus).HasColumnName("nextobsduestatus");

                entity.Property(e => e.Nextobsduetime).HasColumnName("nextobsduetime");

                entity.Property(e => e.Nextobsduetimetext).HasColumnName("nextobsduetimetext");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.Orderbycolumn).HasColumnName("orderbycolumn");

                entity.Property(e => e.OtFlag).HasColumnName("ot_flag");

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PtFlag).HasColumnName("pt_flag");

                entity.Property(e => e.Scheduledfortheatrebadge).HasColumnName("scheduledfortheatrebadge");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcidisplaylist).HasColumnName("tcidisplaylist");

                entity.Property(e => e.Tcidisplaylistwithbr).HasColumnName("tcidisplaylistwithbr");

                entity.Property(e => e.TeamFlag).HasColumnName("team_flag");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.TtaFlag).HasColumnName("tta_flag");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.VteFlag).HasColumnName("vte_flag");

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardbay).HasColumnName("wardbay");

                entity.Property(e => e.Wardbaybed).HasColumnName("wardbaybed");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");

                entity.Property(e => e.Wardnamelarge).HasColumnName("wardnamelarge");

                entity.Property(e => e.Wbbbedstatus)
                    .HasColumnName("wbbbedstatus")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_TerminusAllpatientswithobservationsdueoroverdue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_allpatientswithobservationsdueoroverdue", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaystatusdisplay)
                    .HasColumnName("bedbaystatusdisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplayhtml5).HasColumnName("beddisplayhtml5");

                entity.Property(e => e.Beddisplaynohtml).HasColumnName("beddisplaynohtml");

                entity.Property(e => e.Bedenabled).HasColumnName("bedenabled");

                entity.Property(e => e.Bednumbercolour).HasColumnName("bednumbercolour");

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasMaxLength(255);

                entity.Property(e => e.ColActions).HasColumnName("col_actions");

                entity.Property(e => e.ColBadges).HasColumnName("col_badges");

                entity.Property(e => e.ColBed)
                    .HasColumnName("col_bed")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultant)
                    .HasColumnName("col_consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultantlocator).HasColumnName("col_consultantlocator");

                entity.Property(e => e.ColDays).HasColumnName("col_days");

                entity.Property(e => e.ColExpecteddischargedate).HasColumnName("col_expecteddischargedate");

                entity.Property(e => e.ColJuniorbleep).HasColumnName("col_juniorbleep");

                entity.Property(e => e.ColNurse).HasColumnName("col_nurse");

                entity.Property(e => e.ColOttext).HasColumnName("col_ottext");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.ColPatientNoimage).HasColumnName("col_patient_noimage");

                entity.Property(e => e.ColPttext).HasColumnName("col_pttext");

                entity.Property(e => e.ColRadiology).HasColumnName("col_radiology");

                entity.Property(e => e.ColStatus).HasColumnName("col_status");

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Fullnamewithhospno).HasColumnName("fullnamewithhospno");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Intenteddischargedateformatted).HasColumnName("intenteddischargedateformatted");

                entity.Property(e => e.Issamename).HasColumnName("issamename");

                entity.Property(e => e.Lastobservationtime).HasColumnName("lastobservationtime");

                entity.Property(e => e.Lastobservationtimetext).HasColumnName("lastobservationtimetext");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.Locationwithconsultant)
                    .HasColumnName("locationwithconsultant")
                    .HasColumnType("character varying");

                entity.Property(e => e.Locatorboardtitleward).HasColumnName("locatorboardtitleward");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.News2score)
                    .HasColumnName("news2score")
                    .HasColumnType("numeric");

                entity.Property(e => e.Nextobsdueinhours).HasColumnName("nextobsdueinhours");

                entity.Property(e => e.Nextobsdueinminutes).HasColumnName("nextobsdueinminutes");

                entity.Property(e => e.Nextobsduestatus).HasColumnName("nextobsduestatus");

                entity.Property(e => e.Nextobsduetime).HasColumnName("nextobsduetime");

                entity.Property(e => e.Nextobsduetimetext).HasColumnName("nextobsduetimetext");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.Orderbycolumn).HasColumnName("orderbycolumn");

                entity.Property(e => e.OtFlag).HasColumnName("ot_flag");

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PtFlag).HasColumnName("pt_flag");

                entity.Property(e => e.Scheduledfortheatrebadge).HasColumnName("scheduledfortheatrebadge");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcidisplaylist).HasColumnName("tcidisplaylist");

                entity.Property(e => e.Tcidisplaylistwithbr).HasColumnName("tcidisplaylistwithbr");

                entity.Property(e => e.TeamFlag).HasColumnName("team_flag");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.TtaFlag).HasColumnName("tta_flag");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.VteFlag).HasColumnName("vte_flag");

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardbay).HasColumnName("wardbay");

                entity.Property(e => e.Wardbaybed).HasColumnName("wardbaybed");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");

                entity.Property(e => e.Wardnamelarge).HasColumnName("wardnamelarge");

                entity.Property(e => e.Wbbbedstatus)
                    .HasColumnName("wbbbedstatus")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_TerminusFluidbalancechart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_fluidbalancechart", "baseview");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Eventtime)
                    .HasColumnName("eventtime")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancechartId)
                    .HasColumnName("fluidbalancechart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceeventId)
                    .HasColumnName("fluidbalanceevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Intakeobsid1).HasColumnName("intakeobsid1");

                entity.Property(e => e.Intakeobsid2).HasColumnName("intakeobsid2");

                entity.Property(e => e.Intakeobsid3).HasColumnName("intakeobsid3");

                entity.Property(e => e.Intakeobsid4).HasColumnName("intakeobsid4");

                entity.Property(e => e.Intakeroute1).HasColumnName("intakeroute1");

                entity.Property(e => e.Intakeroute2).HasColumnName("intakeroute2");

                entity.Property(e => e.Intakeroute3).HasColumnName("intakeroute3");

                entity.Property(e => e.Intakeroute4).HasColumnName("intakeroute4");

                entity.Property(e => e.Intakerunningtotal).HasColumnName("intakerunningtotal");

                entity.Property(e => e.Intakevolume1)
                    .HasColumnName("intakevolume1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Intakevolume2)
                    .HasColumnName("intakevolume2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Intakevolume3)
                    .HasColumnName("intakevolume3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Intakevolume4)
                    .HasColumnName("intakevolume4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Iv).HasColumnName("iv");

                entity.Property(e => e.Ivobsid).HasColumnName("ivobsid");

                entity.Property(e => e.Ivvolume)
                    .HasColumnName("ivvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Oral).HasColumnName("oral");

                entity.Property(e => e.Oralobsid).HasColumnName("oralobsid");

                entity.Property(e => e.Oralvolume)
                    .HasColumnName("oralvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Outputobsid1).HasColumnName("outputobsid1");

                entity.Property(e => e.Outputobsid2).HasColumnName("outputobsid2");

                entity.Property(e => e.Outputobsid3).HasColumnName("outputobsid3");

                entity.Property(e => e.Outputobsid4).HasColumnName("outputobsid4");

                entity.Property(e => e.Outputroute1).HasColumnName("outputroute1");

                entity.Property(e => e.Outputroute2).HasColumnName("outputroute2");

                entity.Property(e => e.Outputroute3).HasColumnName("outputroute3");

                entity.Property(e => e.Outputroute4).HasColumnName("outputroute4");

                entity.Property(e => e.Outputrunningtotal).HasColumnName("outputrunningtotal");

                entity.Property(e => e.Outputvolume1)
                    .HasColumnName("outputvolume1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Outputvolume2)
                    .HasColumnName("outputvolume2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Outputvolume3)
                    .HasColumnName("outputvolume3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Outputvolume4)
                    .HasColumnName("outputvolume4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Urine).HasColumnName("urine");

                entity.Property(e => e.Urineobsid).HasColumnName("urineobsid");

                entity.Property(e => e.Urinevolume)
                    .HasColumnName("urinevolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Vomit).HasColumnName("vomit");

                entity.Property(e => e.Vomitobsid).HasColumnName("vomitobsid");

                entity.Property(e => e.Vomitvolume)
                    .HasColumnName("vomitvolume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_TerminusMycurrentinpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_mycurrentinpatients", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_TerminusMypatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_mypatients", "entitystore");

                entity.HasIndex(e => e.MypatientsId)
                    .HasName("terminus_mypatients_mypatients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("terminus_mypatients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("terminus_mypatients__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.MypatientsId)
                    .HasColumnName("mypatients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminusMypatients1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_mypatients", "entitystorematerialised");

                entity.HasIndex(e => e.MypatientsId)
                    .HasName("terminus_mypatients_mypatients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("terminus_mypatients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("terminus_mypatients__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.MypatientsId)
                    .HasColumnName("mypatients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPatientbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientbanner", "baseview");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_TerminusPatientlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlist", "entitystore");

                entity.HasIndex(e => e.PatientlistId)
                    .HasName("terminus_patientlist_patientlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("terminus_patientlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("terminus_patientlist__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientlistname)
                    .HasColumnName("patientlistname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_TerminusPatientlist1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlist", "entitystorematerialised");

                entity.HasIndex(e => e.PatientlistId)
                    .HasName("terminus_patientlist_patientlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("terminus_patientlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("terminus_patientlist__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientlistname)
                    .HasColumnName("patientlistname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminusPatientlist2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlist", "baseview");

                entity.Property(e => e.Counts).HasColumnName("counts");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientlistname)
                    .HasColumnName("patientlistname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPatientlists>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlists", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPatientsearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientsearch", "baseview");

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Empi)
                    .HasColumnName("empi")
                    .HasMaxLength(255);

                entity.Property(e => e.Empitypecode)
                    .HasColumnName("empitypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasColumnType("citext");

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasColumnType("citext");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasColumnType("citext");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasColumnType("citext");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrntypecode)
                    .HasColumnName("mrntypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystore_TerminusPersonpatientlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_personpatientlist", "entitystore");

                entity.HasIndex(e => e.PersonpatientlistId)
                    .HasName("terminus_personpatientlist_personpatientlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("terminus_personpatientlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("terminus_personpatientlist__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate)
                    .HasColumnName("_createddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("timezone('UTC'::text, now())");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonpatientlistId)
                    .HasColumnName("personpatientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus)
                    .HasColumnName("_recordstatus")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Sequenceid)
                    .HasColumnName("_sequenceid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_TerminusPersonpatientlist1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_personpatientlist", "entitystorematerialised");

                entity.HasIndex(e => e.PersonpatientlistId)
                    .HasName("terminus_personpatientlist_personpatientlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasName("terminus_personpatientlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasName("terminus_personpatientlist__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonpatientlistId)
                    .HasColumnName("personpatientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminusPersonswithids>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_personswithids", "baseview");

                entity.Property(e => e.Ageyears).HasColumnName("ageyears");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSpvobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_spvobservations", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSpvobservationsbyevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_spvobservationsbyevent", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Clvl)
                    .HasColumnName("clvl")
                    .HasMaxLength(255);

                entity.Property(e => e.ClvlSymbol)
                    .HasColumnName("clvl_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Dbp)
                    .HasColumnName("dbp")
                    .HasMaxLength(255);

                entity.Property(e => e.DbpSymbol)
                    .HasColumnName("dbp_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.HeightSymbol)
                    .HasColumnName("height_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Hr)
                    .HasColumnName("hr")
                    .HasMaxLength(255);

                entity.Property(e => e.HrSymbol)
                    .HasColumnName("hr_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp)
                    .HasColumnName("resp")
                    .HasMaxLength(255);

                entity.Property(e => e.RespSymbol)
                    .HasColumnName("resp_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Sbp)
                    .HasColumnName("sbp")
                    .HasMaxLength(255);

                entity.Property(e => e.SbpSymbol)
                    .HasColumnName("sbp_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2Symbol)
                    .HasColumnName("spo2_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);

                entity.Property(e => e.WeightSymbol)
                    .HasColumnName("weight_symbol")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSpvobservationsbyeventchart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_spvobservationsbyeventchart", "baseview");

                entity.Property(e => e.Acvpu)
                    .HasColumnName("acvpu")
                    .HasMaxLength(255);

                entity.Property(e => e.Bpd)
                    .HasColumnName("bpd")
                    .HasMaxLength(255);

                entity.Property(e => e.Bps)
                    .HasColumnName("bps")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp)
                    .HasColumnName("resp")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Temp)
                    .HasColumnName("temp")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TestDemobmitest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_demobmitest", "baseview");

                entity.Property(e => e.Bmiofperson)
                    .HasColumnName("bmiofperson")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBmitestId)
                    .HasColumnName("demo_bmitest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weightofperson)
                    .HasColumnName("weightofperson")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<baseview_TestJsont>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_jsont", "baseview");

                entity.Property(e => e.Colspec)
                    .HasColumnName("colspec")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<baseview_TestObshcart3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_obshcart3", "baseview");

                entity.Property(e => e.Acvpu)
                    .HasColumnName("acvpu")
                    .HasMaxLength(255);

                entity.Property(e => e.Bpd)
                    .HasColumnName("bpd")
                    .HasMaxLength(255);

                entity.Property(e => e.Bps)
                    .HasColumnName("bps")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp)
                    .HasColumnName("resp")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Temp)
                    .HasColumnName("temp")
                    .HasMaxLength(255);

                entity.Property(e => e.Tempunits)
                    .HasColumnName("tempunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TestTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_test", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TestTestgs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_testgs", "baseview");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.HasSequence("core_lookup__sequenceid_seq", "entitystore").StartsAt(3);

            modelBuilder.HasSequence("core_person__sequenceid_seq", "entitystore").StartsAt(3);

            OnModelCreatingPartial(modelBuilder);
        }

    }
}
